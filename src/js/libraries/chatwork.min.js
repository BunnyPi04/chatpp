/**
 * Modules in this bundle
 * @license
 *
 * array.prototype.find:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Paul Miller <http://paulmillr.com>
 *   maintainers: ljharb <ljharb@gmail.com>, paulmillr <paul@paulmillr.com>
 *   contributors: Duncan Hall <himself@duncanhall.net>
 *   homepage: https://github.com/paulmillr/Array.prototype.find#readme
 *   version: 2.0.1
 *
 * clipboard:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   maintainers: zenorocha <zno.rocha@gmail.com>
 *   homepage: https://github.com/zenorocha/clipboard.js#readme
 *   version: 1.5.16
 *
 * define-properties:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/define-properties#readme
 *   version: 1.1.2
 *
 * delegate:
 *   maintainers: zenorocha <zno.rocha@gmail.com>
 *   homepage: https://github.com/zenorocha/delegate#readme
 *   version: 3.1.1
 *
 * es-abstract:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband <ljharb@gmail.com>
 *   maintainers: ljharb <ljharb@gmail.com>
 *   contributors: Jordan Harband <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/es-abstract#readme
 *   version: 1.6.1
 *
 * es-to-primitive:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/es-to-primitive#readme
 *   version: 1.1.1
 *
 * foreach:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Manuel Stofer <manuel@takimata.ch>
 *   maintainers: manuelstofer <manuel@takimata.ch>
 *   contributors: Manuel Stofer, Jordan Harband
 *   homepage: https://github.com/manuelstofer/foreach
 *   version: 2.0.5
 *
 * function-bind:
 *   licenses: MIT (http://opensource.org/licenses/MIT)
 *   author: Raynos <raynos2@gmail.com>
 *   maintainers: raynos <raynos2@gmail.com>, ljharb <ljharb@gmail.com>
 *   contributors: Raynos, Jordan Harband
 *   homepage: https://github.com/Raynos/function-bind
 *   version: 1.1.0
 *
 * good-listener:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   maintainers: zenorocha <zno.rocha@gmail.com>
 *   homepage: https://github.com/zenorocha/good-listener#readme
 *   version: 1.2.1
 *
 * is-callable:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband <ljharb@gmail.com>
 *   maintainers: ljharb <ljharb@gmail.com>
 *   contributors: Jordan Harband <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/is-callable#readme
 *   version: 1.1.3
 *
 * is-date-object:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/is-date-object#readme
 *   version: 1.0.1
 *
 * is-regex:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/is-regex
 *   version: 1.0.3
 *
 * is-symbol:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband
 *   maintainers: ljharb <ljharb@gmail.com>
 *   homepage: https://github.com/ljharb/is-symbol
 *   version: 1.0.1
 *
 * js-cookie:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Klaus Hartl
 *   maintainers: fagner <gravatar@fagnermartins.com>, carhartl <klaus.hartl@gmail.com>
 *   homepage: https://github.com/js-cookie/js-cookie#readme
 *   version: 2.1.3
 *
 * locale-compare-polyfill:
 *   license: BSD-2-Clause (http://opensource.org/licenses/BSD-2-Clause)
 *   author: Jeppe Burchardt
 *   maintainers: kosmobot <jeppe@burchardt.com>
 *   homepage: https://github.com/kosmobot/locale-compare-polyfill#readme
 *   version: 0.0.2
 *
 * lodash.escape:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: John-David Dalton <john.david.dalton@gmail.com>
 *   maintainers: jdalton <john.david.dalton@gmail.com>, mathias <mathias@qiwi.be>, phated <blaine@iceddev.com>
 *   contributors: John-David Dalton <john.david.dalton@gmail.com>, Blaine Bublitz <blaine.bublitz@gmail.com>, Mathias Bynens <mathias@qiwi.be>
 *   homepage: https://lodash.com/
 *   version: 4.0.1
 *
 * lodash.range:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: John-David Dalton <john.david.dalton@gmail.com>
 *   maintainers: jdalton <john.david.dalton@gmail.com>, mathias <mathias@qiwi.be>, phated <blaine@iceddev.com>
 *   contributors: John-David Dalton <john.david.dalton@gmail.com>, Blaine Bublitz <blaine.bublitz@gmail.com>, Mathias Bynens <mathias@qiwi.be>
 *   homepage: https://lodash.com/
 *   version: 3.2.0
 *
 * number-to-locale-string:
 *   license: Public Domain
 *   author: Phillip Wills <phil@phillipwills.com>
 *   maintainers: willsp <phil@phillipwills.com>
 *   homepage: https://github.com/willsp/polyfill-Number.toLocaleString-with-Locales
 *   version: 1.0.1
 *
 * object-keys:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Jordan Harband <ljharb@gmail.com>
 *   maintainers: ljharb <ljharb@gmail.com>
 *   contributors: Jordan Harband <ljharb@gmail.com>, Raynos <raynos2@gmail.com>, Nathan Rajlich <nathan@tootallnate.net>, Ivan Starkov <istarkov@gmail.com>, Gary Katsevman <git@gkatsev.com>
 *   homepage: https://github.com/ljharb/object-keys#readme
 *   version: 1.0.11
 *
 * select:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   maintainers: zenorocha <zno.rocha@gmail.com>
 *   homepage: https://github.com/zenorocha/select#readme
 *   version: 1.1.0
 *
 * string:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: JP Richardson <jprichardson@gmail.com>
 *   maintainers: jprichardson <jprichardson@gmail.com>, az7arul <az7arul@gmail.com>
 *   homepage: http://stringjs.com
 *   version: 3.3.3
 *
 * tiny-emitter:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Scott Corgan
 *   maintainers: scottcorgan <scottcorgan@gmail.com>
 *   homepage: https://github.com/scottcorgan/tiny-emitter#readme
 *   version: 1.1.0
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
! function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s
}({
    1: [
        function(require, module, exports) {
            "use strict";
            var ES = require("es-abstract/es6");
            module.exports = function(predicate) {
                var list = ES.ToObject(this),
                    length = ES.ToInteger(ES.ToLength(list.length));
                if (!ES.IsCallable(predicate)) throw new TypeError("Array#find: predicate must be a function");
                if (0 !== length)
                    for (var value, thisArg = arguments[1], i = 0; i < length; i++)
                        if (value = list[i], ES.Call(predicate, thisArg, [value, i, list])) return value
            }
        }, {
            "es-abstract/es6": 18
        }
    ],
    2: [
        function(require, module, exports) {
            "use strict";
            var define = require("define-properties"),
                ES = require("es-abstract/es6"),
                implementation = require("./implementation"),
                getPolyfill = require("./polyfill"),
                shim = require("./shim"),
                slice = Array.prototype.slice,
                boundFindShim = function(array, predicate) {
                    ES.RequireObjectCoercible(array);
                    var args = slice.call(arguments, 1);
                    return implementation.apply(array, args)
                };
            define(boundFindShim, {
                getPolyfill: getPolyfill,
                implementation: implementation,
                shim: shim
            }), module.exports = boundFindShim
        }, {
            "./implementation": 1,
            "./polyfill": 3,
            "./shim": 4,
            "define-properties": 12,
            "es-abstract/es6": 18
        }
    ],
    3: [
        function(require, module, exports) {
            "use strict";
            module.exports = function() {
                var implemented = Array.prototype.find && [, 1].find(function(item, index) {
                    return 0 === index
                });
                return implemented ? Array.prototype.find : require("./implementation")
            }
        }, {
            "./implementation": 1
        }
    ],
    4: [
        function(require, module, exports) {
            "use strict";
            var define = require("define-properties"),
                getPolyfill = require("./polyfill");
            module.exports = function() {
                var polyfill = getPolyfill();
                return define(Array.prototype, {
                    find: polyfill
                }, {
                    find: function() {
                        return Array.prototype.find !== polyfill
                    }
                }), polyfill
            }
        }, {
            "./polyfill": 3,
            "define-properties": 12
        }
    ],
    5: [
        function(require, module, exports) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }

            function _toArray(arr) {
                return Array.isArray(arr) ? arr : Array.from(arr)
            }

            function chopParser(text, content, regexp) {
                var next = text.replace(regexp, function(all) {
                    return content.push({
                        type: "message",
                        value: all
                    }), ""
                });
                return [next, content]
            }

            function blockParser(text, content, type) {
                var match = text.match(/^\[(\w+%\d+%)/);
                if (!match) return chopParser(text, content, /^\[\w+/);
                var tag = match.pop();
                if (text.indexOf("[/" + tag + "]") === -1) return ["", content.concat(illigalBlockContent(tag, text))];
                var replacedText = text.replace(/^\[(\w+%\d+%):(\w+)\]/, "[$1 id=$2]");
                if (!replacedText.match(/^\[(\w+%\d+%)(\s+\w+=["']?\S+["']?)*?\]/)) return ["", content.concat(illigalBlockContent(tag, text))];
                if ("code" === type) {
                    var codeNext = replacedText.replace(/^\[(code%\d+%)([\s\S]*?)\]([\s\S]*?)\[\/\1\]\n?/, function(all, type_, attrs, innerText) {
                        return content.push({
                            type: "code",
                            attributes: _Utils2.
                            default.parseAttribute(attrs),
                            content: innerText ? [{
                                type: "message",
                                value: innerText
                            }] : []
                        }), ""
                    });
                    return [codeNext, content]
                }
                var replaceFunction = function(all, type_, attrs, innerText) {
                    return content.push({
                        type: type,
                        attributes: _Utils2.
                        default.parseAttribute(attrs),
                        content: (0, _index.parse_)(innerText)
                    }), ""
                };
                if ("qt" === type) {
                    var qtNext = replacedText.replace(/^\[(qt%\d+%)([\s\S]*?)\]([\s\S]*?)\[\/\1\]\n?/, replaceFunction);
                    return [qtNext, content]
                }
                var next = replacedText.replace(/^\[(\w+%\d+%)([\s\S]*?)\]([\s\S]*?)\[\/\1\]/, replaceFunction);
                return next === replacedText ? ["", content.concat((0, _MessageTokenizer2.
                    default)(text))] : [next, content]
            }

            function illigalBlockContent(tag, text) {
                var tagToken = {
                    type: "message",
                    value: "[" + tag
                }, tokens = (0, _index.parse_)(text.replace(/^\[(\w+%\d+%)/, ""));
                return tokens.length ? "message" !== tokens[0].type ? [tagToken].concat(tokens) : (tokens[0].value = "" + tagToken.value + tokens[0].value, tokens) : [tagToken]
            }

            function inlineParser(text, content, type) {
                var _text$split = text.split(/]/),
                    _text$split2 = _toArray(_text$split),
                    before = _text$split2[0],
                    afters = _text$split2.slice(1);
                if (!afters.length) return ["", content.concat((0, _MessageTokenizer2.
                    default)(before))];
                var after = afters.join("]");
                before += "]";
                var match = before.match(/\[\w+([\s\S]*?)\]/);
                if (!match) return ["", content.concat((0, _MessageTokenizer2.
                    default)(before))];
                var attr = match.pop(),
                    id = attr.match(/^:(\w+)/);
                if (id) return [after, content.concat({
                    type: type,
                    attributes: {
                        id: id.pop()
                    }
                })];
                if (attr && !attr.match(/\s[\s\S]*?=/)) return ["", content.concat((0, _MessageTokenizer2.
                    default)(before))];
                var attributes = _Utils2.
                default.parseAttribute(attr);
                return [after, content.concat({
                    type: type,
                    attributes: attributes
                })]
            }

            function parse(text) {
                var content = [],
                    match = text.match(/^\[(\w+)/);
                if (!match) {
                    var _chopParser = chopParser(text, content, /\[/),
                        _chopParser2 = _slicedToArray(_chopParser, 2);
                    return text = _chopParser2[0], content = _chopParser2[1], content.concat((0, _index.parse_)(text))
                }
                var type = match.pop().toLowerCase();
                if (_BlockTypes2.
                    default.isBlock(type)) {
                    var _blockParser = blockParser(text, content, type),
                        _blockParser2 = _slicedToArray(_blockParser, 2);
                    text = _blockParser2[0], content = _blockParser2[1]
                } else if (_BlockTypes2.
                    default.isInline(type)) {
                    var _inlineParser = inlineParser(text, content, type),
                        _inlineParser2 = _slicedToArray(_inlineParser, 2);
                    text = _inlineParser2[0], content = _inlineParser2[1]
                } else {
                    var _chopParser3 = chopParser(text, content, /\[\w+/),
                        _chopParser4 = _slicedToArray(_chopParser3, 2);
                    text = _chopParser4[0], content = _chopParser4[1]
                }
                return text ? content.concat((0, _index.parse_)(text)) : content
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            });
            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [],
                        _n = !0,
                        _d = !1,
                        _e = void 0;
                    try {
                        for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0);
                    } catch (err) {
                        _d = !0, _e = err
                    } finally {
                        try {
                            !_n && _i.
                            return &&_i.
                            return ()
                        } finally {
                            if (_d) throw _e
                        }
                    }
                    return _arr
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) return arr;
                    if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i);
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }();
            exports.chopParser = chopParser, exports.blockParser = blockParser, exports.inlineParser = inlineParser, exports.
            default = parse;
            var _BlockTypes = require("../Types/BlockTypes"),
                _BlockTypes2 = _interopRequireDefault(_BlockTypes),
                _index = require("../index"),
                _MessageTokenizer = require("./MessageTokenizer"),
                _MessageTokenizer2 = _interopRequireDefault(_MessageTokenizer),
                _Utils = require("./Utils"),
                _Utils2 = _interopRequireDefault(_Utils)
        }, {
            "../Types/BlockTypes": 8,
            "../index": 9,
            "./MessageTokenizer": 6,
            "./Utils": 7
        }
    ],
    6: [
        function(require, module, exports) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }

            function setEmoticonRegexp(regexp) {
                emoticonRegexp = regexp
            }

            function emoticonParser(text) {
                var content = [];
                return _Utils2.
                default.tictac(text.split(emoticonRegexp), function(target) {
                    target && content.push({
                        type: "message",
                        value: target
                    })
                }, function(target) {
                    content.push({
                        type: "emoticon",
                        value: target
                    })
                }), content
            }

            function urlParser(text) {
                var urls = text.split(/(https?:\/\/[-.!~*';?:@&=+$,%#{}()\w]+[-.!~*';?:@&=+$,%#{}()\w\/]+)/i);
                return parseUrls(urls)
            }

            function parse(text) {
                return urlParser(text)
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.setEmoticonRegexp = setEmoticonRegexp, exports.emoticonParser = emoticonParser, exports.urlParser = urlParser, exports.
            default = parse;
            var _Utils = require("./Utils"),
                _Utils2 = _interopRequireDefault(_Utils),
                emoticonRegexp = void 0,
                parseUrls = function parseUrls(urls) {
                    if (1 === urls.length) return emoticonParser(urls.join(""));
                    var content = emoticonParser(urls.shift()),
                        url = urls.shift(),
                        count = (url.match(/\(/g) || []).length,
                        url_parts = url.split(/\)/),
                        main_url = url_parts.splice(0, count + 1).join(")");
                    return url_parts.length && (urls[0] = "" + [""].concat(url_parts).join(")") + urls[0]), content.push({
                        type: "url",
                        value: main_url
                    }), content.concat(parseUrls(urls))
                }
        }, {
            "./Utils": 7
        }
    ],
    7: [
        function(require, module, exports) {
            "use strict";

            function _toArray(arr) {
                return Array.isArray(arr) ? arr : Array.from(arr)
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.
            default = {
                parseAttribute: function(text) {
                    return text.split(/\s+/).filter(function(_) {
                        return !!_
                    }).reduce(function(base, attr) {
                        var _attr$split = attr.split("="),
                            _attr$split2 = _toArray(_attr$split),
                            key = _attr$split2[0],
                            val = _attr$split2.slice(1);
                        return base[key] = val.join("="), base
                    }, {})
                },
                tictac: function(array, tic, tac) {
                    array.forEach(function(cur, index) {
                        index % 2 ? tac(cur, index) : tic(cur, index)
                    })
                }
            }
        }, {}
    ],
    8: [
        function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            });
            var types = {
                hr: "inline",
                code: "block",
                pname: "inline",
                picon: "inline",
                piconname: "inline",
                info: "block",
                title: "block",
                to: "inline",
                rp: "inline",
                qtmeta: "inline",
                qt: "block",
                live: "inline",
                task: "block",
                dtext: "inline",
                date: "inline",
                download: "block",
                preview: "inline"
            };
            exports.
            default = {
                types: types,
                isBlock: function(type) {
                    return "block" === types[type]
                },
                isInline: function(type) {
                    return "inline" === types[type]
                },
                getBlockTypeNameRegExp: function(prefix, suffix) {
                    var _this = this,
                        names = Object.keys(this.types).filter(function(key) {
                            return "block" === _this.types[key]
                        }).reduce(function(base, key) {
                            return base.push(key), base
                        }, []);
                    return new RegExp(prefix + names.join("|") + suffix, "gi")
                }
            }
        }, {}
    ],
    9: [
        function(require, module, exports) {
            "use strict";

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                }
            }

            function _toArray(arr) {
                return Array.isArray(arr) ? arr : Array.from(arr)
            }

            function setEmoticons(emoticons) {
                (0, _MessageTokenizer.setEmoticonRegexp)(new RegExp("(" + emoticons.map(function(_) {
                    return _.replace(/\W/g, "\\$&")
                }).join("|") + ")"))
            }

            function parseToken(text) {
                var resultContent = [],
                    _text$split = text.split(/\[/),
                    _text$split2 = _toArray(_text$split),
                    before = _text$split2[0],
                    after = _text$split2.slice(1);
                return before && (resultContent = resultContent.concat((0, _MessageTokenizer2.
                    default)(before))), after.length ? resultContent.concat((0, _BlockTokenizer2.
                    default)("[" + after.join("["))) : resultContent
            }

            function preProc(text) {
                text = text.replace(/%/g, "%_%").replace(/(\[code[\s\S]*?\])([\s\S]*?)(\[\/code\])/gi, function(all, open, code, close) {
                    return open + code.replace(/\W/g, function(_) {
                        return "%" + _.charCodeAt(0) + "%"
                    }) + close
                });
                var blockCounter = {}, blocks = _BlockTypes2.
                default.getBlockTypeNameRegExp("\\[/?(", ")(\\W)");
                return text = text.replace(blocks, function(all, type, term) {
                    type = type.toLowerCase(), blockCounter[type] = blockCounter[type] || 0, all = all.replace(new RegExp(term.replace(/\W/g, "\\$&") + "$"), ""), all.match(/\//) || blockCounter[type]++;
                    var block = all + "%" + blockCounter[type] + "%" + term;
                    return all.match(/\//) && blockCounter[type]--, block
                })
            }

            function postProc(contents) {
                contents.filter(function(_) {
                    return !("code" !== _.type || !_.content || !_.content.length)
                }).forEach(function(content) {
                    content.content[0].value = content.content[0].value.replace(/%(\d+)%/g, function(all, charCode) {
                        return String.fromCharCode(charCode)
                    }).replace(/%_%/g, "%")
                });
                var blocks = _BlockTypes2.
                default.getBlockTypeNameRegExp("(\\[/?", ")%\\d+%");
                return contents.filter(function(_) {
                    return "message" === _.type || "url" === _.type
                }).forEach(function(content) {
                    content.value = content.value.replace(blocks, "$1").replace(/%_%/g, "%")
                }), contents
            }

            function mergeMessage(contents) {
                var results = [];
                return contents.forEach(function(content) {
                    if (!results.length) return results.push(content);
                    if ("message" !== content.type) return results.push(content);
                    var lastContent = results[results.length - 1];
                    return "message" !== lastContent.type ? results.push(content) : void(lastContent.value += content.value)
                }), results
            }

            function parse_(text) {
                var content = parseToken(text),
                    postResult = postProc(content);
                return mergeMessage(postResult)
            }

            function parse(text) {
                if (!text) return [];
                if ("[deleted]" === text) return [{
                    type: "deleted",
                    attributes: {}
                }];
                var preText = preProc(text),
                    content = parse_(preText);
                return content
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.setEmoticons = setEmoticons, exports.parseToken = parseToken, exports.preProc = preProc, exports.postProc = postProc, exports.mergeMessage = mergeMessage, exports.parse_ = parse_, exports.
            default = parse;
            var _BlockTypes = require("./Types/BlockTypes"),
                _BlockTypes2 = _interopRequireDefault(_BlockTypes),
                _MessageTokenizer = require("./Tokenizer/MessageTokenizer"),
                _MessageTokenizer2 = _interopRequireDefault(_MessageTokenizer),
                _BlockTokenizer = require("./Tokenizer/BlockTokenizer"),
                _BlockTokenizer2 = _interopRequireDefault(_BlockTokenizer)
        }, {
            "./Tokenizer/BlockTokenizer": 5,
            "./Tokenizer/MessageTokenizer": 6,
            "./Types/BlockTypes": 8
        }
    ],
    10: [
        function(require, module, exports) {
            ! function(global, factory) {
                if ("function" == typeof define && define.amd) define(["module", "select"], factory);
                else if ("undefined" != typeof exports) factory(module, require("select"));
                else {
                    var mod = {
                        exports: {}
                    };
                    factory(mod, global.select), global.clipboardAction = mod.exports
                }
            }(this, function(module, _select) {
                "use strict";

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    }
                }

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function")
                }
                var _select2 = _interopRequireDefault(_select),
                    _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                        return typeof obj
                    } : function(obj) {
                        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
                    }, _createClass = function() {
                        function defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
                            }
                        }
                        return function(Constructor, protoProps, staticProps) {
                            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor
                        }
                    }(),
                    ClipboardAction = function() {
                        function ClipboardAction(options) {
                            _classCallCheck(this, ClipboardAction), this.resolveOptions(options), this.initSelection()
                        }
                        return _createClass(ClipboardAction, [{
                            key: "resolveOptions",
                            value: function() {
                                var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                this.action = options.action, this.emitter = options.emitter, this.target = options.target, this.text = options.text, this.trigger = options.trigger, this.selectedText = ""
                            }
                        }, {
                            key: "initSelection",
                            value: function() {
                                this.text ? this.selectFake() : this.target && this.selectTarget()
                            }
                        }, {
                            key: "selectFake",
                            value: function() {
                                var _this = this,
                                    isRTL = "rtl" == document.documentElement.getAttribute("dir");
                                this.removeFake(), this.fakeHandlerCallback = function() {
                                    return _this.removeFake()
                                }, this.fakeHandler = document.body.addEventListener("click", this.fakeHandlerCallback) || !0, this.fakeElem = document.createElement("textarea"), this.fakeElem.style.fontSize = "12pt", this.fakeElem.style.border = "0", this.fakeElem.style.padding = "0", this.fakeElem.style.margin = "0", this.fakeElem.style.position = "absolute", this.fakeElem.style[isRTL ? "right" : "left"] = "-9999px";
                                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                                this.fakeElem.addEventListener("focus", window.scrollTo(0, yPosition)), this.fakeElem.style.top = yPosition + "px", this.fakeElem.setAttribute("readonly", ""), this.fakeElem.value = this.text, document.body.appendChild(this.fakeElem), this.selectedText = (0, _select2.
                                    default)(this.fakeElem), this.copyText()
                            }
                        }, {
                            key: "removeFake",
                            value: function() {
                                this.fakeHandler && (document.body.removeEventListener("click", this.fakeHandlerCallback), this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem && (document.body.removeChild(this.fakeElem), this.fakeElem = null)
                            }
                        }, {
                            key: "selectTarget",
                            value: function() {
                                this.selectedText = (0, _select2.
                                    default)(this.target), this.copyText()
                            }
                        }, {
                            key: "copyText",
                            value: function() {
                                var succeeded = void 0;
                                try {
                                    succeeded = document.execCommand(this.action)
                                } catch (err) {
                                    succeeded = !1
                                }
                                this.handleResult(succeeded)
                            }
                        }, {
                            key: "handleResult",
                            value: function(succeeded) {
                                this.emitter.emit(succeeded ? "success" : "error", {
                                    action: this.action,
                                    text: this.selectedText,
                                    trigger: this.trigger,
                                    clearSelection: this.clearSelection.bind(this)
                                })
                            }
                        }, {
                            key: "clearSelection",
                            value: function() {
                                this.target && this.target.blur(), window.getSelection().removeAllRanges()
                            }
                        }, {
                            key: "destroy",
                            value: function() {
                                this.removeFake()
                            }
                        }, {
                            key: "action",
                            set: function() {
                                var action = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "copy";
                                if (this._action = action, "copy" !== this._action && "cut" !== this._action) throw new Error('Invalid "action" value, use either "copy" or "cut"')
                            },
                            get: function() {
                                return this._action
                            }
                        }, {
                            key: "target",
                            set: function(target) {
                                if (void 0 !== target) {
                                    if (!target || "object" !== ("undefined" == typeof target ? "undefined" : _typeof(target)) || 1 !== target.nodeType) throw new Error('Invalid "target" value, use a valid Element');
                                    if ("copy" === this.action && target.hasAttribute("disabled")) throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                                    if ("cut" === this.action && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                                    this._target = target
                                }
                            },
                            get: function() {
                                return this._target
                            }
                        }]), ClipboardAction
                    }();
                module.exports = ClipboardAction
            })
        }, {
            select: 42
        }
    ],
    11: [
        function(require, module, exports) {
            ! function(global, factory) {
                if ("function" == typeof define && define.amd) define(["module", "./clipboard-action", "tiny-emitter", "good-listener"], factory);
                else if ("undefined" != typeof exports) factory(module, require("./clipboard-action"), require("tiny-emitter"), require("good-listener"));
                else {
                    var mod = {
                        exports: {}
                    };
                    factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener), global.clipboard = mod.exports
                }
            }(this, function(module, _clipboardAction, _tinyEmitter, _goodListener) {
                "use strict";

                function _interopRequireDefault(obj) {
                    return obj && obj.__esModule ? obj : {
                        default: obj
                    }
                }

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function")
                }

                function _possibleConstructorReturn(self, call) {
                    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return !call || "object" != typeof call && "function" != typeof call ? self : call
                }

                function _inherits(subClass, superClass) {
                    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass)
                }

                function getAttributeValue(suffix, element) {
                    var attribute = "data-clipboard-" + suffix;
                    if (element.hasAttribute(attribute)) return element.getAttribute(attribute)
                }
                var _clipboardAction2 = _interopRequireDefault(_clipboardAction),
                    _tinyEmitter2 = _interopRequireDefault(_tinyEmitter),
                    _goodListener2 = _interopRequireDefault(_goodListener),
                    _createClass = function() {
                        function defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor)
                            }
                        }
                        return function(Constructor, protoProps, staticProps) {
                            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor
                        }
                    }(),
                    Clipboard = function(_Emitter) {
                        function Clipboard(trigger, options) {
                            _classCallCheck(this, Clipboard);
                            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));
                            return _this.resolveOptions(options), _this.listenClick(trigger), _this
                        }
                        return _inherits(Clipboard, _Emitter), _createClass(Clipboard, [{
                            key: "resolveOptions",
                            value: function() {
                                var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                this.action = "function" == typeof options.action ? options.action : this.defaultAction, this.target = "function" == typeof options.target ? options.target : this.defaultTarget, this.text = "function" == typeof options.text ? options.text : this.defaultText
                            }
                        }, {
                            key: "listenClick",
                            value: function(trigger) {
                                var _this2 = this;
                                this.listener = (0, _goodListener2.
                                    default)(trigger, "click", function(e) {
                                    return _this2.onClick(e)
                                })
                            }
                        }, {
                            key: "onClick",
                            value: function(e) {
                                var trigger = e.delegateTarget || e.currentTarget;
                                this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new _clipboardAction2.
                                default ({
                                    action: this.action(trigger),
                                    target: this.target(trigger),
                                    text: this.text(trigger),
                                    trigger: trigger,
                                    emitter: this
                                })
                            }
                        }, {
                            key: "defaultAction",
                            value: function(trigger) {
                                return getAttributeValue("action", trigger)
                            }
                        }, {
                            key: "defaultTarget",
                            value: function(trigger) {
                                var selector = getAttributeValue("target", trigger);
                                if (selector) return document.querySelector(selector)
                            }
                        }, {
                            key: "defaultText",
                            value: function(trigger) {
                                return getAttributeValue("text", trigger)
                            }
                        }, {
                            key: "destroy",
                            value: function() {
                                this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), this.clipboardAction = null)
                            }
                        }]), Clipboard
                    }(_tinyEmitter2.
                        default);
                module.exports = Clipboard
            })
        }, {
            "./clipboard-action": 10,
            "good-listener": 32,
            "tiny-emitter": 47
        }
    ],
    12: [
        function(require, module, exports) {
            "use strict";
            var keys = require("object-keys"),
                foreach = require("foreach"),
                hasSymbols = "function" == typeof Symbol && "symbol" == typeof Symbol(),
                toStr = Object.prototype.toString,
                isFunction = function(fn) {
                    return "function" == typeof fn && "[object Function]" === toStr.call(fn)
                }, arePropertyDescriptorsSupported = function() {
                    var obj = {};
                    try {
                        Object.defineProperty(obj, "x", {
                            enumerable: !1,
                            value: obj
                        });
                        for (var _ in obj) return !1;
                        return obj.x === obj
                    } catch (e) {
                        return !1
                    }
                }, supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported(),
                defineProperty = function(object, name, value, predicate) {
                    (!(name in object) || isFunction(predicate) && predicate()) && (supportsDescriptors ? Object.defineProperty(object, name, {
                        configurable: !0,
                        enumerable: !1,
                        value: value,
                        writable: !0
                    }) : object[name] = value)
                }, defineProperties = function(object, map) {
                    var predicates = arguments.length > 2 ? arguments[2] : {}, props = keys(map);
                    hasSymbols && (props = props.concat(Object.getOwnPropertySymbols(map))), foreach(props, function(name) {
                        defineProperty(object, name, map[name], predicates[name])
                    })
                };
            defineProperties.supportsDescriptors = !! supportsDescriptors, module.exports = defineProperties
        }, {
            foreach: 28,
            "object-keys": 13
        }
    ],
    13: [
        function(require, module, exports) {
            "use strict";
            var has = Object.prototype.hasOwnProperty,
                toStr = Object.prototype.toString,
                slice = Array.prototype.slice,
                isArgs = require("./isArguments"),
                isEnumerable = Object.prototype.propertyIsEnumerable,
                hasDontEnumBug = !isEnumerable.call({
                    toString: null
                }, "toString"),
                hasProtoEnumBug = isEnumerable.call(function() {}, "prototype"),
                dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
                equalsConstructorPrototype = function(o) {
                    var ctor = o.constructor;
                    return ctor && ctor.prototype === o
                }, excludedKeys = {
                    $console: !0,
                    $external: !0,
                    $frame: !0,
                    $frameElement: !0,
                    $frames: !0,
                    $innerHeight: !0,
                    $innerWidth: !0,
                    $outerHeight: !0,
                    $outerWidth: !0,
                    $pageXOffset: !0,
                    $pageYOffset: !0,
                    $parent: !0,
                    $scrollLeft: !0,
                    $scrollTop: !0,
                    $scrollX: !0,
                    $scrollY: !0,
                    $self: !0,
                    $webkitIndexedDB: !0,
                    $webkitStorageInfo: !0,
                    $window: !0
                }, hasAutomationEqualityBug = function() {
                    if ("undefined" == typeof window) return !1;
                    for (var k in window) try {
                        if (!excludedKeys["$" + k] && has.call(window, k) && null !== window[k] && "object" == typeof window[k]) try {
                            equalsConstructorPrototype(window[k])
                        } catch (e) {
                            return !0
                        }
                    } catch (e) {
                        return !0
                    }
                    return !1
                }(),
                equalsConstructorPrototypeIfNotBuggy = function(o) {
                    if ("undefined" == typeof window || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
                    try {
                        return equalsConstructorPrototype(o)
                    } catch (e) {
                        return !1
                    }
                }, keysShim = function(object) {
                    var isObject = null !== object && "object" == typeof object,
                        isFunction = "[object Function]" === toStr.call(object),
                        isArguments = isArgs(object),
                        isString = isObject && "[object String]" === toStr.call(object),
                        theKeys = [];
                    if (!isObject && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
                    var skipProto = hasProtoEnumBug && isFunction;
                    if (isString && object.length > 0 && !has.call(object, 0))
                        for (var i = 0; i < object.length; ++i) theKeys.push(String(i));
                    if (isArguments && object.length > 0)
                        for (var j = 0; j < object.length; ++j) theKeys.push(String(j));
                    else
                        for (var name in object) skipProto && "prototype" === name || !has.call(object, name) || theKeys.push(String(name)); if (hasDontEnumBug)
                        for (var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object), k = 0; k < dontEnums.length; ++k) skipConstructor && "constructor" === dontEnums[k] || !has.call(object, dontEnums[k]) || theKeys.push(dontEnums[k]);
                    return theKeys
                };
            keysShim.shim = function() {
                if (Object.keys) {
                    var keysWorksWithArguments = function() {
                        return 2 === (Object.keys(arguments) || "").length
                    }(1, 2);
                    if (!keysWorksWithArguments) {
                        var originalKeys = Object.keys;
                        Object.keys = function(object) {
                            return originalKeys(isArgs(object) ? slice.call(object) : object)
                        }
                    }
                } else Object.keys = keysShim;
                return Object.keys || keysShim
            }, module.exports = keysShim
        }, {
            "./isArguments": 14
        }
    ],
    14: [
        function(require, module, exports) {
            "use strict";
            var toStr = Object.prototype.toString;
            module.exports = function(value) {
                var str = toStr.call(value),
                    isArgs = "[object Arguments]" === str;
                return isArgs || (isArgs = "[object Array]" !== str && null !== value && "object" == typeof value && "number" == typeof value.length && value.length >= 0 && "[object Function]" === toStr.call(value.callee)), isArgs
            }
        }, {}
    ],
    15: [
        function(require, module, exports) {
            function closest(element, selector) {
                for (; element && element.nodeType !== DOCUMENT_NODE_TYPE;) {
                    if (element.matches(selector)) return element;
                    element = element.parentNode
                }
            }
            var DOCUMENT_NODE_TYPE = 9;
            if (Element && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector
            }
            module.exports = closest
        }, {}
    ],
    16: [
        function(require, module, exports) {
            function delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                return element.addEventListener(type, listenerFn, useCapture), {
                    destroy: function() {
                        element.removeEventListener(type, listenerFn, useCapture)
                    }
                }
            }

            function listener(element, selector, type, callback) {
                return function(e) {
                    e.delegateTarget = closest(e.target, selector), e.delegateTarget && callback.call(element, e)
                }
            }
            var closest = require("./closest");
            module.exports = delegate
        }, {
            "./closest": 15
        }
    ],
    17: [
        function(require, module, exports) {
            "use strict";
            var $isNaN = require("./helpers/isNaN"),
                $isFinite = require("./helpers/isFinite"),
                sign = require("./helpers/sign"),
                mod = require("./helpers/mod"),
                IsCallable = require("is-callable"),
                toPrimitive = require("es-to-primitive/es5"),
                ES5 = {
                    ToPrimitive: toPrimitive,
                    ToBoolean: function(value) {
                        return Boolean(value)
                    },
                    ToNumber: function(value) {
                        return Number(value)
                    },
                    ToInteger: function(value) {
                        var number = this.ToNumber(value);
                        return $isNaN(number) ? 0 : 0 !== number && $isFinite(number) ? sign(number) * Math.floor(Math.abs(number)) : number
                    },
                    ToInt32: function(x) {
                        return this.ToNumber(x) >> 0
                    },
                    ToUint32: function(x) {
                        return this.ToNumber(x) >>> 0
                    },
                    ToUint16: function(value) {
                        var number = this.ToNumber(value);
                        if ($isNaN(number) || 0 === number || !$isFinite(number)) return 0;
                        var posInt = sign(number) * Math.floor(Math.abs(number));
                        return mod(posInt, 65536)
                    },
                    ToString: function(value) {
                        return String(value)
                    },
                    ToObject: function(value) {
                        return this.CheckObjectCoercible(value), Object(value)
                    },
                    CheckObjectCoercible: function(value, optMessage) {
                        if (null == value) throw new TypeError(optMessage || "Cannot call method on " + value);
                        return value
                    },
                    IsCallable: IsCallable,
                    SameValue: function(x, y) {
                        return x === y ? 0 !== x || 1 / x === 1 / y : $isNaN(x) && $isNaN(y)
                    },
                    Type: function(x) {
                        return null === x ? "Null" : "undefined" == typeof x ? "Undefined" : "function" == typeof x || "object" == typeof x ? "Object" : "number" == typeof x ? "Number" : "boolean" == typeof x ? "Boolean" : "string" == typeof x ? "String" : void 0
                    }
                };
            module.exports = ES5
        }, {
            "./helpers/isFinite": 20,
            "./helpers/isNaN": 21,
            "./helpers/mod": 23,
            "./helpers/sign": 24,
            "es-to-primitive/es5": 25,
            "is-callable": 33
        }
    ],
    18: [
        function(require, module, exports) {
            "use strict";
            var toStr = Object.prototype.toString,
                hasSymbols = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator,
                symbolToStr = hasSymbols ? Symbol.prototype.toString : toStr,
                $isNaN = require("./helpers/isNaN"),
                $isFinite = require("./helpers/isFinite"),
                MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1,
                assign = require("./helpers/assign"),
                sign = require("./helpers/sign"),
                mod = require("./helpers/mod"),
                isPrimitive = require("./helpers/isPrimitive"),
                toPrimitive = require("es-to-primitive/es6"),
                parseInteger = parseInt,
                bind = require("function-bind"),
                strSlice = bind.call(Function.call, String.prototype.slice),
                isBinary = bind.call(Function.call, RegExp.prototype.test, /^0b[01]+$/i),
                isOctal = bind.call(Function.call, RegExp.prototype.test, /^0o[0-7]+$/i),
                nonWS = ["", "​", "￾"].join(""),
                nonWSregex = new RegExp("[" + nonWS + "]", "g"),
                hasNonWS = bind.call(Function.call, RegExp.prototype.test, nonWSregex),
                invalidHexLiteral = /^[\-\+]0x[0-9a-f]+$/i,
                isInvalidHexLiteral = bind.call(Function.call, RegExp.prototype.test, invalidHexLiteral),
                ws = ["\t\n\v\f\r   ᠎    ", "         　\u2028", "\u2029\ufeff"].join(""),
                trimRegex = new RegExp("(^[" + ws + "]+)|([" + ws + "]+$)", "g"),
                replace = bind.call(Function.call, String.prototype.replace),
                trim = function(value) {
                    return replace(value, trimRegex, "")
                }, ES5 = require("./es5"),
                hasRegExpMatcher = require("is-regex"),
                ES6 = assign(assign({}, ES5), {
                    Call: function(F, V) {
                        var args = arguments.length > 2 ? arguments[2] : [];
                        if (!this.IsCallable(F)) throw new TypeError(F + " is not a function");
                        return F.apply(V, args)
                    },
                    ToPrimitive: toPrimitive,
                    ToNumber: function(argument) {
                        var value = isPrimitive(argument) ? argument : toPrimitive(argument, "number");
                        if ("symbol" == typeof value) throw new TypeError("Cannot convert a Symbol value to a number");
                        if ("string" == typeof value) {
                            if (isBinary(value)) return this.ToNumber(parseInteger(strSlice(value, 2), 2));
                            if (isOctal(value)) return this.ToNumber(parseInteger(strSlice(value, 2), 8));
                            if (hasNonWS(value) || isInvalidHexLiteral(value)) return NaN;
                            var trimmed = trim(value);
                            if (trimmed !== value) return this.ToNumber(trimmed)
                        }
                        return Number(value)
                    },
                    ToInt16: function(argument) {
                        var int16bit = this.ToUint16(argument);
                        return int16bit >= 32768 ? int16bit - 65536 : int16bit
                    },
                    ToInt8: function(argument) {
                        var int8bit = this.ToUint8(argument);
                        return int8bit >= 128 ? int8bit - 256 : int8bit
                    },
                    ToUint8: function(argument) {
                        var number = this.ToNumber(argument);
                        if ($isNaN(number) || 0 === number || !$isFinite(number)) return 0;
                        var posInt = sign(number) * Math.floor(Math.abs(number));
                        return mod(posInt, 256)
                    },
                    ToUint8Clamp: function(argument) {
                        var number = this.ToNumber(argument);
                        if ($isNaN(number) || number <= 0) return 0;
                        if (number >= 255) return 255;
                        var f = Math.floor(argument);
                        return f + .5 < number ? f + 1 : number < f + .5 ? f : f % 2 !== 0 ? f + 1 : f
                    },
                    ToString: function(argument) {
                        if ("symbol" == typeof argument) throw new TypeError("Cannot convert a Symbol value to a string");
                        return String(argument)
                    },
                    ToObject: function(value) {
                        return this.RequireObjectCoercible(value), Object(value)
                    },
                    ToPropertyKey: function(argument) {
                        var key = this.ToPrimitive(argument, String);
                        return "symbol" == typeof key ? symbolToStr.call(key) : this.ToString(key)
                    },
                    ToLength: function(argument) {
                        var len = this.ToInteger(argument);
                        return len <= 0 ? 0 : len > MAX_SAFE_INTEGER ? MAX_SAFE_INTEGER : len
                    },
                    CanonicalNumericIndexString: function(argument) {
                        if ("[object String]" !== toStr.call(argument)) throw new TypeError("must be a string");
                        if ("-0" === argument) return -0;
                        var n = this.ToNumber(argument);
                        return this.SameValue(this.ToString(n), argument) ? n : void 0
                    },
                    RequireObjectCoercible: ES5.CheckObjectCoercible,
                    IsArray: Array.isArray || function(argument) {
                        return "[object Array]" === toStr.call(argument)
                    },
                    IsConstructor: function(argument) {
                        return "function" == typeof argument && !! argument.prototype
                    },
                    IsExtensible: function(obj) {
                        return !Object.preventExtensions || !isPrimitive(obj) && Object.isExtensible(obj)
                    },
                    IsInteger: function(argument) {
                        if ("number" != typeof argument || $isNaN(argument) || !$isFinite(argument)) return !1;
                        var abs = Math.abs(argument);
                        return Math.floor(abs) === abs
                    },
                    IsPropertyKey: function(argument) {
                        return "string" == typeof argument || "symbol" == typeof argument
                    },
                    IsRegExp: function(argument) {
                        if (!argument || "object" != typeof argument) return !1;
                        if (hasSymbols) {
                            var isRegExp = argument[Symbol.match];
                            if ("undefined" != typeof isRegExp) return ES5.ToBoolean(isRegExp);
                        }
                        return hasRegExpMatcher(argument)
                    },
                    SameValueZero: function(x, y) {
                        return x === y || $isNaN(x) && $isNaN(y)
                    },
                    Type: function(x) {
                        return "symbol" == typeof x ? "Symbol" : ES5.Type(x)
                    },
                    SpeciesConstructor: function(O, defaultConstructor) {
                        if ("Object" !== this.Type(O)) throw new TypeError("Assertion failed: Type(O) is not Object");
                        var C = O.constructor;
                        if ("undefined" == typeof C) return defaultConstructor;
                        if ("Object" !== this.Type(C)) throw new TypeError("O.constructor is not an Object");
                        var S = hasSymbols && Symbol.species ? C[Symbol.species] : void 0;
                        if (null == S) return defaultConstructor;
                        if (this.IsConstructor(S)) return S;
                        throw new TypeError("no constructor found")
                    }
                });
            delete ES6.CheckObjectCoercible, module.exports = ES6
        }, {
            "./es5": 17,
            "./helpers/assign": 19,
            "./helpers/isFinite": 20,
            "./helpers/isNaN": 21,
            "./helpers/isPrimitive": 22,
            "./helpers/mod": 23,
            "./helpers/sign": 24,
            "es-to-primitive/es6": 26,
            "function-bind": 30,
            "is-regex": 35
        }
    ],
    19: [
        function(require, module, exports) {
            var has = Object.prototype.hasOwnProperty;
            module.exports = Object.assign || function(target, source) {
                for (var key in source) has.call(source, key) && (target[key] = source[key]);
                return target
            }
        }, {}
    ],
    20: [
        function(require, module, exports) {
            var $isNaN = Number.isNaN || function(a) {
                    return a !== a
                };
            module.exports = Number.isFinite || function(x) {
                return "number" == typeof x && !$isNaN(x) && x !== 1 / 0 && x !== -(1 / 0)
            }
        }, {}
    ],
    21: [
        function(require, module, exports) {
            module.exports = Number.isNaN || function(a) {
                return a !== a
            }
        }, {}
    ],
    22: [
        function(require, module, exports) {
            module.exports = function(value) {
                return null === value || "function" != typeof value && "object" != typeof value
            }
        }, {}
    ],
    23: [
        function(require, module, exports) {
            module.exports = function(number, modulo) {
                var remain = number % modulo;
                return Math.floor(remain >= 0 ? remain : remain + modulo)
            }
        }, {}
    ],
    24: [
        function(require, module, exports) {
            module.exports = function(number) {
                return number >= 0 ? 1 : -1
            }
        }, {}
    ],
    25: [
        function(require, module, exports) {
            "use strict";
            var toStr = Object.prototype.toString,
                isPrimitive = require("./helpers/isPrimitive"),
                isCallable = require("is-callable"),
                ES5internalSlots = {
                    "[[DefaultValue]]": function(O, hint) {
                        var actualHint = hint || ("[object Date]" === toStr.call(O) ? String : Number);
                        if (actualHint === String || actualHint === Number) {
                            var value, i, methods = actualHint === String ? ["toString", "valueOf"] : ["valueOf", "toString"];
                            for (i = 0; i < methods.length; ++i)
                                if (isCallable(O[methods[i]]) && (value = O[methods[i]](), isPrimitive(value))) return value;
                            throw new TypeError("No default value")
                        }
                        throw new TypeError("invalid [[DefaultValue]] hint supplied")
                    }
                };
            module.exports = function(input, PreferredType) {
                return isPrimitive(input) ? input : ES5internalSlots["[[DefaultValue]]"](input, PreferredType)
            }
        }, {
            "./helpers/isPrimitive": 27,
            "is-callable": 33
        }
    ],
    26: [
        function(require, module, exports) {
            "use strict";
            var hasSymbols = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator,
                isPrimitive = require("./helpers/isPrimitive"),
                isCallable = require("is-callable"),
                isDate = require("is-date-object"),
                isSymbol = require("is-symbol"),
                ordinaryToPrimitive = function(O, hint) {
                    if ("undefined" == typeof O || null === O) throw new TypeError("Cannot call method on " + O);
                    if ("string" != typeof hint || "number" !== hint && "string" !== hint) throw new TypeError('hint must be "string" or "number"');
                    var method, result, i, methodNames = "string" === hint ? ["toString", "valueOf"] : ["valueOf", "toString"];
                    for (i = 0; i < methodNames.length; ++i)
                        if (method = O[methodNames[i]], isCallable(method) && (result = method.call(O), isPrimitive(result))) return result;
                    throw new TypeError("No default value")
                }, GetMethod = function(O, P) {
                    var func = O[P];
                    if (null !== func && "undefined" != typeof func) {
                        if (!isCallable(func)) throw new TypeError(func + " returned for property " + P + " of object " + O + " is not a function");
                        return func
                    }
                };
            module.exports = function(input, PreferredType) {
                if (isPrimitive(input)) return input;
                var hint = "default";
                arguments.length > 1 && (PreferredType === String ? hint = "string" : PreferredType === Number && (hint = "number"));
                var exoticToPrim;
                if (hasSymbols && (Symbol.toPrimitive ? exoticToPrim = GetMethod(input, Symbol.toPrimitive) : isSymbol(input) && (exoticToPrim = Symbol.prototype.valueOf)), "undefined" != typeof exoticToPrim) {
                    var result = exoticToPrim.call(input, hint);
                    if (isPrimitive(result)) return result;
                    throw new TypeError("unable to convert exotic object to primitive")
                }
                return "default" === hint && (isDate(input) || isSymbol(input)) && (hint = "string"), ordinaryToPrimitive(input, "default" === hint ? "number" : hint)
            }
        }, {
            "./helpers/isPrimitive": 27,
            "is-callable": 33,
            "is-date-object": 34,
            "is-symbol": 36
        }
    ],
    27: [
        function(require, module, exports) {
            arguments[4][22][0].apply(exports, arguments)
        }, {
            dup: 22
        }
    ],
    28: [
        function(require, module, exports) {
            var hasOwn = Object.prototype.hasOwnProperty,
                toString = Object.prototype.toString;
            module.exports = function(obj, fn, ctx) {
                if ("[object Function]" !== toString.call(fn)) throw new TypeError("iterator must be a function");
                var l = obj.length;
                if (l === +l)
                    for (var i = 0; i < l; i++) fn.call(ctx, obj[i], i, obj);
                else
                    for (var k in obj) hasOwn.call(obj, k) && fn.call(ctx, obj[k], k, obj)
            }
        }, {}
    ],
    29: [
        function(require, module, exports) {
            var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ",
                slice = Array.prototype.slice,
                toStr = Object.prototype.toString,
                funcType = "[object Function]";
            module.exports = function(that) {
                var target = this;
                if ("function" != typeof target || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
                for (var bound, args = slice.call(arguments, 1), binder = function() {
                        if (this instanceof bound) {
                            var result = target.apply(this, args.concat(slice.call(arguments)));
                            return Object(result) === result ? result : this
                        }
                        return target.apply(that, args.concat(slice.call(arguments)))
                    }, boundLength = Math.max(0, target.length - args.length), boundArgs = [], i = 0; i < boundLength; i++) boundArgs.push("$" + i);
                if (bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder), target.prototype) {
                    var Empty = function() {};
                    Empty.prototype = target.prototype, bound.prototype = new Empty, Empty.prototype = null
                }
                return bound
            }
        }, {}
    ],
    30: [
        function(require, module, exports) {
            var implementation = require("./implementation");
            module.exports = Function.prototype.bind || implementation
        }, {
            "./implementation": 29
        }
    ],
    31: [
        function(require, module, exports) {
            exports.node = function(value) {
                return void 0 !== value && value instanceof HTMLElement && 1 === value.nodeType
            }, exports.nodeList = function(value) {
                var type = Object.prototype.toString.call(value);
                return void 0 !== value && ("[object NodeList]" === type || "[object HTMLCollection]" === type) && "length" in value && (0 === value.length || exports.node(value[0]))
            }, exports.string = function(value) {
                return "string" == typeof value || value instanceof String
            }, exports.fn = function(value) {
                var type = Object.prototype.toString.call(value);
                return "[object Function]" === type
            }
        }, {}
    ],
    32: [
        function(require, module, exports) {
            function listen(target, type, callback) {
                if (!target && !type && !callback) throw new Error("Missing required arguments");
                if (!is.string(type)) throw new TypeError("Second argument must be a String");
                if (!is.fn(callback)) throw new TypeError("Third argument must be a Function");
                if (is.node(target)) return listenNode(target, type, callback);
                if (is.nodeList(target)) return listenNodeList(target, type, callback);
                if (is.string(target)) return listenSelector(target, type, callback);
                throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")
            }

            function listenNode(node, type, callback) {
                return node.addEventListener(type, callback), {
                    destroy: function() {
                        node.removeEventListener(type, callback)
                    }
                }
            }

            function listenNodeList(nodeList, type, callback) {
                return Array.prototype.forEach.call(nodeList, function(node) {
                    node.addEventListener(type, callback)
                }), {
                    destroy: function() {
                        Array.prototype.forEach.call(nodeList, function(node) {
                            node.removeEventListener(type, callback)
                        })
                    }
                }
            }

            function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback)
            }
            var is = require("./is"),
                delegate = require("delegate");
            module.exports = listen
        }, {
            "./is": 31,
            delegate: 16
        }
    ],
    33: [
        function(require, module, exports) {
            "use strict";
            var fnToStr = Function.prototype.toString,
                constructorRegex = /^\s*class /,
                isES6ClassFn = function(value) {
                    try {
                        var fnStr = fnToStr.call(value),
                            singleStripped = fnStr.replace(/\/\/.*\n/g, ""),
                            multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ""),
                            spaceStripped = multiStripped.replace(/\n/gm, " ").replace(/ {2}/g, " ");
                        return constructorRegex.test(spaceStripped)
                    } catch (e) {
                        return !1
                    }
                }, tryFunctionObject = function(value) {
                    try {
                        return !isES6ClassFn(value) && (fnToStr.call(value), !0)
                    } catch (e) {
                        return !1
                    }
                }, toStr = Object.prototype.toString,
                fnClass = "[object Function]",
                genClass = "[object GeneratorFunction]",
                hasToStringTag = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
            module.exports = function(value) {
                if (!value) return !1;
                if ("function" != typeof value && "object" != typeof value) return !1;
                if (hasToStringTag) return tryFunctionObject(value);
                if (isES6ClassFn(value)) return !1;
                var strClass = toStr.call(value);
                return strClass === fnClass || strClass === genClass
            }
        }, {}
    ],
    34: [
        function(require, module, exports) {
            "use strict";
            var getDay = Date.prototype.getDay,
                tryDateObject = function(value) {
                    try {
                        return getDay.call(value), !0
                    } catch (e) {
                        return !1
                    }
                }, toStr = Object.prototype.toString,
                dateClass = "[object Date]",
                hasToStringTag = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
            module.exports = function(value) {
                return "object" == typeof value && null !== value && (hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass)
            }
        }, {}
    ],
    35: [
        function(require, module, exports) {
            "use strict";
            var regexExec = RegExp.prototype.exec,
                tryRegexExec = function(value) {
                    try {
                        return regexExec.call(value), !0
                    } catch (e) {
                        return !1
                    }
                }, toStr = Object.prototype.toString,
                regexClass = "[object RegExp]",
                hasToStringTag = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
            module.exports = function(value) {
                return "object" == typeof value && (hasToStringTag ? tryRegexExec(value) : toStr.call(value) === regexClass)
            }
        }, {}
    ],
    36: [
        function(require, module, exports) {
            "use strict";
            var toStr = Object.prototype.toString,
                hasSymbols = "function" == typeof Symbol && "symbol" == typeof Symbol();
            if (hasSymbols) {
                var symToStr = Symbol.prototype.toString,
                    symStringRegex = /^Symbol\(.*\)$/,
                    isSymbolObject = function(value) {
                        return "symbol" == typeof value.valueOf() && symStringRegex.test(symToStr.call(value))
                    };
                module.exports = function(value) {
                    if ("symbol" == typeof value) return !0;
                    if ("[object Symbol]" !== toStr.call(value)) return !1;
                    try {
                        return isSymbolObject(value)
                    } catch (e) {
                        return !1
                    }
                }
            } else module.exports = function(value) {
                return !1
            }
        }, {}
    ],
    37: [
        function(require, module, exports) {
            ! function(factory) {
                var registeredInModuleLoader = !1;
                if ("function" == typeof define && define.amd && (define(factory), registeredInModuleLoader = !0), "object" == typeof exports && (module.exports = factory(), registeredInModuleLoader = !0), !registeredInModuleLoader) {
                    var OldCookies = window.Cookies,
                        api = window.Cookies = factory();
                    api.noConflict = function() {
                        return window.Cookies = OldCookies, api
                    }
                }
            }(function() {
                function extend() {
                    for (var i = 0, result = {}; i < arguments.length; i++) {
                        var attributes = arguments[i];
                        for (var key in attributes) result[key] = attributes[key]
                    }
                    return result
                }

                function init(converter) {
                    function api(key, value, attributes) {
                        var result;
                        if ("undefined" != typeof document) {
                            if (arguments.length > 1) {
                                if (attributes = extend({
                                    path: "/"
                                }, api.defaults, attributes), "number" == typeof attributes.expires) {
                                    var expires = new Date;
                                    expires.setMilliseconds(expires.getMilliseconds() + 864e5 * attributes.expires), attributes.expires = expires
                                }
                                try {
                                    result = JSON.stringify(value), /^[\{\[]/.test(result) && (value = result)
                                } catch (e) {}
                                return value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), key = encodeURIComponent(String(key)), key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent), key = key.replace(/[\(\)]/g, escape), document.cookie = [key, "=", value, attributes.expires ? "; expires=" + attributes.expires.toUTCString() : "", attributes.path ? "; path=" + attributes.path : "", attributes.domain ? "; domain=" + attributes.domain : "", attributes.secure ? "; secure" : ""].join("")
                            }
                            key || (result = {});
                            for (var cookies = document.cookie ? document.cookie.split("; ") : [], rdecode = /(%[0-9A-Z]{2})+/g, i = 0; i < cookies.length; i++) {
                                var parts = cookies[i].split("="),
                                    cookie = parts.slice(1).join("=");
                                '"' === cookie.charAt(0) && (cookie = cookie.slice(1, -1));
                                try {
                                    var name = parts[0].replace(rdecode, decodeURIComponent);
                                    if (cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent), this.json) try {
                                        cookie = JSON.parse(cookie)
                                    } catch (e) {}
                                    if (key === name) {
                                        result = cookie;
                                        break
                                    }
                                    key || (result[name] = cookie)
                                } catch (e) {}
                            }
                            return result
                        }
                    }
                    return api.set = api, api.get = function(key) {
                        return api.call(api, key)
                    }, api.getJSON = function() {
                        return api.apply({
                            json: !0
                        }, [].slice.call(arguments))
                    }, api.defaults = {}, api.remove = function(key, attributes) {
                        api(key, "", extend(attributes, {
                            expires: -1
                        }))
                    }, api.withConverter = init, api
                }
                return init(function() {})
            })
        }, {}
    ],
    38: [
        function(require, module, exports) {
            ! function() {
                "use strict";
                var localeCompareSupport = "ø".localeCompare("p", "da-DK") > 0;
                if (!localeCompareSupport) {
                    var characterMaps = {
                        da: "­  _-,;:!¡?¿.·'\"«»()[]{}§¶@*/&#%`´^¯¨¸°©®+±÷×<=>¬|¦~¤¢$£¥01¹½¼2²3³¾456789AaªÁáÀàÂâÃãBbCcÇçDdÐðEeÉéÈèÊêËëFfGgHhIiÍíÌìÎîÏïJjKkLlMmNnÑñOoºÓóÒòÔôÕõPpQqRrSsßTtÞþUuÚúÙùÛûVvWwXxYyÝýÿÜüZzÆæÄäØøÖöÅåµ",
                        nb: "­  _-,;:!¡?¿.·'\"«»()[]{}§¶@*/&#%`´^¯¨¸°©®+±÷×<=>¬|¦~¤¢$£¥01¹½¼2²3³¾456789aAªáÁàÀâÂãÃbBcCçÇdDðÐeEéÉèÈêÊëËfFgGhHiIíÍìÌîÎïÏjJkKlLmMnNñÑoOºóÓòÒôÔõÕpPqQrRsSßtTþÞuUúÚùÙûÛvVwWxXyYýÝÿüÜzZæÆäÄøØöÖåÅµ",
                        se: "­  _-,;:!¡?¿.·'\"«»()[]{}§¶@*/&#%`´^¯¨¸°©®+±÷×<=>¬|¦~¤¢$£¥01¹½¼2²3³¾456789aAªáÁàÀâÂåÅäÄãÃæÆbBcCçÇdDðÐeEéÉèÈêÊëËfFgGhHiIíÍìÌîÎïÏjJkKlLmMnNñÑoOºóÓòÒôÔöÖõÕøØpPqQrRsSßtTuUúÚùÙûÛüÜvVwWxXyYýÝÿzZþÞµ",
                        fi: "­  _-,;:!¡?¿.·'\"«»()[]{}§¶@*/&#%`´^¯¨¸°©®+±÷×<=>¬|¦~¤¢$£¥01¹½¼2²3³¾456789aAªáÁàÀâÂãÃbBcCçÇdDðÐeEéÉèÈêÊëËfFgGhHiIíÍìÌîÎïÏjJkKlLmMnNñÑoOºóÓòÒôÔõÕpPqQrRsSßtTuUúÚùÙûÛvVwWxXyYýÝÿüÜzZþÞåÅäÄæÆöÖøØµ",
                        de: "­  _-,;:!¡?¿.·'\"«»()[]{}§¶@*/&#%`´^¯¨¸°©®+±÷×<=>¬|¦~¤¢$£¥01¹½¼2²3³¾456789aAªáÁàÀâÂåÅäÄãÃæÆbBcCçÇdDðÐeEéÉèÈêÊëËfFgGhHiIíÍìÌîÎïÏjJkKlLmMnNñÑoOºóÓòÒôÔöÖõÕøØpPqQrRsSßtTuUúÚùÙûÛüÜvVwWxXyYýÝÿzZþÞµ",
                        en: " _-,;:!?.'\"()[]{}@*/&#%`^+<=>|~$0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"
                    }, original = String.prototype.localeCompare;
                    String.prototype.localeCompare = function(other, locale) {
                        if (!locale) return original.apply(this, arguments);
                        for (var lang = locale.split("-")[0], map = characterMaps[lang], charA = null, charB = null, index = 0; charA === charB && index < 100;) charA = this.toString()[index], charB = other[index], index++;
                        return Math.max(-1, Math.min(1, map.indexOf(charA) - map.indexOf(charB)))
                    }
                }
            }()
        }, {}
    ],
    39: [
        function(require, module, exports) {
            (function(global) {
                function basePropertyOf(object) {
                    return function(key) {
                        return null == object ? void 0 : object[key]
                    }
                }

                function baseToString(value) {
                    if ("string" == typeof value) return value;
                    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
                    var result = value + "";
                    return "0" == result && 1 / value == -INFINITY ? "-0" : result
                }

                function isObjectLike(value) {
                    return !!value && "object" == typeof value
                }

                function isSymbol(value) {
                    return "symbol" == typeof value || isObjectLike(value) && objectToString.call(value) == symbolTag
                }

                function toString(value) {
                    return null == value ? "" : baseToString(value)
                }

                function escape(string) {
                    return string = toString(string), string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string
                }
                var INFINITY = 1 / 0,
                    symbolTag = "[object Symbol]",
                    reUnescapedHtml = /[&<>"'`]/g,
                    reHasUnescapedHtml = RegExp(reUnescapedHtml.source),
                    htmlEscapes = {
                        "&": "&amp;",
                        "<": "&lt;",
                        ">": "&gt;",
                        '"': "&quot;",
                        "'": "&#39;",
                        "`": "&#96;"
                    }, freeGlobal = "object" == typeof global && global && global.Object === Object && global,
                    freeSelf = "object" == typeof self && self && self.Object === Object && self,
                    root = freeGlobal || freeSelf || Function("return this")(),
                    escapeHtmlChar = basePropertyOf(htmlEscapes),
                    objectProto = Object.prototype,
                    objectToString = objectProto.toString,
                    Symbol = root.Symbol,
                    symbolProto = Symbol ? Symbol.prototype : void 0,
                    symbolToString = symbolProto ? symbolProto.toString : void 0;
                module.exports = escape
            }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
        }, {}
    ],
    40: [
        function(require, module, exports) {
            function baseRange(start, end, step, fromRight) {
                for (var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length); length--;) result[fromRight ? length : ++index] = start, start += step;
                return result
            }

            function createRange(fromRight) {
                return function(start, end, step) {
                    return step && "number" != typeof step && isIterateeCall(start, end, step) && (end = step = void 0), start = toFinite(start), void 0 === end ? (end = start, start = 0) : end = toFinite(end), step = void 0 === step ? start < end ? 1 : -1 : toFinite(step), baseRange(start, end, step, fromRight)
                }
            }

            function isIndex(value, length) {
                return length = null == length ? MAX_SAFE_INTEGER : length, !! length && ("number" == typeof value || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length
            }

            function isIterateeCall(value, index, object) {
                if (!isObject(object)) return !1;
                var type = typeof index;
                return !!("number" == type ? isArrayLike(object) && isIndex(index, object.length) : "string" == type && index in object) && eq(object[index], value)
            }

            function eq(value, other) {
                return value === other || value !== value && other !== other
            }

            function isArrayLike(value) {
                return null != value && isLength(value.length) && !isFunction(value)
            }

            function isFunction(value) {
                var tag = isObject(value) ? objectToString.call(value) : "";
                return tag == funcTag || tag == genTag
            }

            function isLength(value) {
                return "number" == typeof value && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER
            }

            function isObject(value) {
                var type = typeof value;
                return !!value && ("object" == type || "function" == type)
            }

            function isObjectLike(value) {
                return !!value && "object" == typeof value
            }

            function isSymbol(value) {
                return "symbol" == typeof value || isObjectLike(value) && objectToString.call(value) == symbolTag
            }

            function toFinite(value) {
                if (!value) return 0 === value ? value : 0;
                if (value = toNumber(value), value === INFINITY || value === -INFINITY) {
                    var sign = value < 0 ? -1 : 1;
                    return sign * MAX_INTEGER
                }
                return value === value ? value : 0
            }

            function toNumber(value) {
                if ("number" == typeof value) return value;
                if (isSymbol(value)) return NAN;
                if (isObject(value)) {
                    var other = "function" == typeof value.valueOf ? value.valueOf() : value;
                    value = isObject(other) ? other + "" : other
                }
                if ("string" != typeof value) return 0 === value ? value : +value;
                value = value.replace(reTrim, "");
                var isBinary = reIsBinary.test(value);
                return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value
            }
            var INFINITY = 1 / 0,
                MAX_SAFE_INTEGER = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e308,
                NAN = NaN,
                funcTag = "[object Function]",
                genTag = "[object GeneratorFunction]",
                symbolTag = "[object Symbol]",
                reTrim = /^\s+|\s+$/g,
                reIsBadHex = /^[-+]0x[0-9a-f]+$/i,
                reIsBinary = /^0b[01]+$/i,
                reIsOctal = /^0o[0-7]+$/i,
                reIsUint = /^(?:0|[1-9]\d*)$/,
                freeParseInt = parseInt,
                objectProto = Object.prototype,
                objectToString = objectProto.toString,
                nativeCeil = Math.ceil,
                nativeMax = Math.max,
                range = createRange();
            module.exports = range
        }, {}
    ],
    41: [
        function(require, module, exports) {
            ! function() {
                "use strict";

                function toLocaleStringSupportsLocales() {
                    var number = 0;
                    try {
                        number.toLocaleString("i")
                    } catch (e) {
                        return "RangeError" === e.name
                    }
                    return !1
                }
                if (!toLocaleStringSupportsLocales()) {
                    var replaceSeparators = function(sNum, separators) {
                        var sNumParts = sNum.split(".");
                        return separators && separators.thousands && (sNumParts[0] = sNumParts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + separators.thousands)), sNum = sNumParts.join(separators.decimal)
                    }, renderFormat = function(template, props) {
                            for (var prop in props) template = template.replace("{{" + prop + "}}", props[prop]);
                            return template
                        }, mapMatch = function(map, locale) {
                            var match = locale,
                                language = locale && locale.toLowerCase().match(/^\w+/);
                            return map.hasOwnProperty(locale) || (match = map.hasOwnProperty(language) ? language : "en"), map[match]
                        }, dotThousCommaDec = function(sNum) {
                            var separators = {
                                decimal: ",",
                                thousands: "."
                            };
                            return replaceSeparators(sNum, separators)
                        }, commaThousDotDec = function(sNum) {
                            var separators = {
                                decimal: ".",
                                thousands: ","
                            };
                            return replaceSeparators(sNum, separators)
                        }, spaceThousCommaDec = function(sNum) {
                            var seperators = {
                                decimal: ",",
                                thousands: " "
                            };
                            return replaceSeparators(sNum, seperators)
                        }, apostrophThousDotDec = function(sNum) {
                            var seperators = {
                                decimal: ".",
                                thousands: "'"
                            };
                            return replaceSeparators(sNum, seperators)
                        }, transformForLocale = {
                            en: commaThousDotDec,
                            it: dotThousCommaDec,
                            fr: spaceThousCommaDec,
                            de: dotThousCommaDec,
                            "de-DE": dotThousCommaDec,
                            "de-AT": dotThousCommaDec,
                            "de-CH": apostrophThousDotDec,
                            "de-LI": apostrophThousDotDec,
                            "de-BE": dotThousCommaDec,
                            ro: dotThousCommaDec,
                            "ro-RO": dotThousCommaDec,
                            hu: spaceThousCommaDec,
                            "hu-HU": spaceThousCommaDec,
                            "da-DK": dotThousCommaDec,
                            "nb-NO": spaceThousCommaDec
                        }, currencyFormatMap = {
                            en: "pre",
                            it: "post",
                            fr: "post",
                            de: "post",
                            "de-DE": "post",
                            "de-AT": "prespace",
                            "de-CH": "prespace",
                            "de-LI": "post",
                            "de-BE": "post",
                            ro: "post",
                            "ro-RO": "post",
                            hu: "post",
                            "hu-HU": "post",
                            "da-DK": "post",
                            "nb-NO": "post"
                        }, currencySymbols = {
                            afn: "؋",
                            ars: "$",
                            awg: "ƒ",
                            aud: "$",
                            azn: "₼",
                            bsd: "$",
                            bbd: "$",
                            byr: "p.",
                            bzd: "BZ$",
                            bmd: "$",
                            bob: "Bs.",
                            bam: "KM",
                            bwp: "P",
                            bgn: "лв",
                            brl: "R$",
                            bnd: "$",
                            khr: "៛",
                            cad: "$",
                            kyd: "$",
                            clp: "$",
                            cny: "¥",
                            cop: "$",
                            crc: "₡",
                            hrk: "kn",
                            cup: "₱",
                            czk: "Kč",
                            dkk: "kr",
                            dop: "RD$",
                            xcd: "$",
                            egp: "£",
                            svc: "$",
                            eek: "kr",
                            eur: "€",
                            fkp: "£",
                            fjd: "$",
                            ghc: "¢",
                            gip: "£",
                            gtq: "Q",
                            ggp: "£",
                            gyd: "$",
                            hnl: "L",
                            hkd: "$",
                            huf: "Ft",
                            isk: "kr",
                            inr: "₹",
                            idr: "Rp",
                            irr: "﷼",
                            imp: "£",
                            ils: "₪",
                            jmd: "J$",
                            jpy: "¥",
                            jep: "£",
                            kes: "KSh",
                            kzt: "лв",
                            kpw: "₩",
                            krw: "₩",
                            kgs: "лв",
                            lak: "₭",
                            lvl: "Ls",
                            lbp: "£",
                            lrd: "$",
                            ltl: "Lt",
                            mkd: "ден",
                            myr: "RM",
                            mur: "₨",
                            mxn: "$",
                            mnt: "₮",
                            mzn: "MT",
                            nad: "$",
                            npr: "₨",
                            ang: "ƒ",
                            nzd: "$",
                            nio: "C$",
                            ngn: "₦",
                            nok: "kr",
                            omr: "﷼",
                            pkr: "₨",
                            pab: "B/.",
                            pyg: "Gs",
                            pen: "S/.",
                            php: "₱",
                            pln: "zł",
                            qar: "﷼",
                            ron: "lei",
                            rub: "₽",
                            shp: "£",
                            sar: "﷼",
                            rsd: "Дин.",
                            scr: "₨",
                            sgd: "$",
                            sbd: "$",
                            sos: "S",
                            zar: "R",
                            lkr: "₨",
                            sek: "kr",
                            chf: "CHF",
                            srd: "$",
                            syp: "£",
                            tzs: "TSh",
                            twd: "NT$",
                            thb: "฿",
                            ttd: "TT$",
                            try: "",
                            trl: "₤",
                            tvd: "$",
                            ugx: "USh",
                            uah: "₴",
                            gbp: "£",
                            usd: "$",
                            uyu: "$U",
                            uzs: "лв",
                            vef: "Bs",
                            vnd: "₫",
                            yer: "﷼",
                            zwd: "Z$"
                        }, currencyFormats = {
                            pre: "{{code}}{{num}}",
                            post: "{{num}} {{code}}",
                            prespace: "{{code}} {{num}}"
                        };
                    Number.prototype.toLocaleString = function(locale, options) {
                        if (locale && locale.length < 2) throw new RangeError("Invalid language tag: " + locale);
                        var sNum;
                        if (sNum = options && options.minimumFractionDigits ? this.toFixed(options.minimumFractionDigits) : this.toString(), sNum = mapMatch(transformForLocale, locale)(sNum, options), options && options.currency && "currency" === options.style) {
                            var format = currencyFormats[mapMatch(currencyFormatMap, locale)];
                            sNum = "code" === options.currencyDisplay ? renderFormat(format, {
                                num: sNum,
                                code: options.currency.toUpperCase()
                            }) : renderFormat(format, {
                                num: sNum,
                                code: currencySymbols[options.currency.toLowerCase()]
                            })
                        }
                        return sNum
                    }
                }
            }()
        }, {}
    ],
    42: [
        function(require, module, exports) {
            function select(element) {
                var selectedText;
                if ("SELECT" === element.nodeName) element.focus(), selectedText = element.value;
                else if ("INPUT" === element.nodeName || "TEXTAREA" === element.nodeName) element.focus(), element.setSelectionRange(0, element.value.length), selectedText = element.value;
                else {
                    element.hasAttribute("contenteditable") && element.focus();
                    var selection = window.getSelection(),
                        range = document.createRange();
                    range.selectNodeContents(element), selection.removeAllRanges(), selection.addRange(range), selectedText = selection.toString()
                }
                return selectedText
            }
            module.exports = select
        }, {}
    ],
    43: [
        function(require, module, exports) {
            function count(self, substr) {
                for (var count = 0, pos = self.indexOf(substr); pos >= 0;) count += 1, pos = self.indexOf(substr, pos + 1);
                return count
            }
            module.exports = count
        }, {}
    ],
    44: [
        function(require, module, exports) {
            function splitLeft(self, sep, maxSplit, limit) {
                if ("undefined" == typeof maxSplit) var maxSplit = -1;
                var splitResult = self.split(sep),
                    splitPart1 = splitResult.slice(0, maxSplit),
                    splitPart2 = splitResult.slice(maxSplit);
                return splitResult = 0 === splitPart2.length ? splitPart1 : splitPart1.concat(splitPart2.join(sep)), "undefined" == typeof limit ? splitResult : limit < 0 ? splitResult.slice(limit) : splitResult.slice(0, limit)
            }
            module.exports = splitLeft
        }, {}
    ],
    45: [
        function(require, module, exports) {
            function splitRight(self, sep, maxSplit, limit) {
                if ("undefined" == typeof maxSplit) var maxSplit = -1;
                if ("undefined" == typeof limit) var limit = 0;
                for (var splitResult = [self], i = self.length - 1; i >= 0; i--) 0 === splitResult[0].slice(i).indexOf(sep) && (splitResult.length <= maxSplit || maxSplit === -1) && (splitResult.splice(1, 0, splitResult[0].slice(i + sep.length)), splitResult[0] = splitResult[0].slice(0, i));
                return limit >= 0 ? splitResult.slice(-limit) : splitResult.slice(0, -limit)
            }
            module.exports = splitRight
        }, {}
    ],
    46: [
        function(require, module, exports) {
            ! function() {
                "use strict";

                function initialize(object, s) {
                    null !== s && void 0 !== s ? "string" == typeof s ? object.s = s : object.s = s.toString() : object.s = s, object.orig = s, null !== s && void 0 !== s ? object.__defineGetter__ ? object.__defineGetter__("length", function() {
                        return object.s.length
                    }) : object.length = s.length : object.length = -1
                }

                function S(s) {
                    initialize(this, s)
                }

                function extendPrototype() {
                    for (var name in __sp)! function(name) {
                        var func = __sp[name];
                        __nsp.hasOwnProperty(name) || (methodsAdded.push(name), __nsp[name] = function() {
                            return String.prototype.s = this, func.apply(this, arguments)
                        })
                    }(name)
                }

                function restorePrototype() {
                    for (var i = 0; i < methodsAdded.length; ++i) delete String.prototype[methodsAdded[i]];
                    methodsAdded.length = 0
                }

                function getNativeStringProperties() {
                    for (var names = getNativeStringPropertyNames(), retObj = {}, i = 0; i < names.length; ++i) {
                        var name = names[i];
                        if ("to" !== name && "toEnd" !== name) {
                            var func = __nsp[name];
                            try {
                                var type = typeof func.apply("teststring");
                                retObj[name] = type
                            } catch (e) {}
                        }
                    }
                    return retObj
                }

                function getNativeStringPropertyNames() {
                    var results = [];
                    if (Object.getOwnPropertyNames) return results = Object.getOwnPropertyNames(__nsp), results.splice(results.indexOf("valueOf"), 1), results.splice(results.indexOf("toString"), 1), results;
                    var stringNames = {};
                    for (var name in String.prototype) stringNames[name] = name;
                    for (var name in Object.prototype) delete stringNames[name];
                    for (var name in stringNames) results.push(name);
                    return results
                }

                function Export(str) {
                    return new S(str)
                }

                function multiArgs(args, fn) {
                    var i, result = [];
                    for (i = 0; i < args.length; i++) result.push(args[i]), fn && fn.call(args, args[i], i);
                    return result
                }

                function escapeRegExp(s) {
                    var c, i, ret = [],
                        re = /^[A-Za-z0-9]+$/;
                    for (s = ensureString(s), i = 0; i < s.length; ++i) c = s.charAt(i), re.test(c) ? ret.push(c) : "\\000" === c ? ret.push("\\000") : ret.push("\\" + c);
                    return ret.join("")
                }

                function ensureString(string) {
                    return null == string ? "" : "" + string
                }
                var VERSION = "3.3.3",
                    ENTITIES = {}, latin_map = {
                        "Á": "A",
                        "Ă": "A",
                        "Ắ": "A",
                        "Ặ": "A",
                        "Ằ": "A",
                        "Ẳ": "A",
                        "Ẵ": "A",
                        "Ǎ": "A",
                        "Â": "A",
                        "Ấ": "A",
                        "Ậ": "A",
                        "Ầ": "A",
                        "Ẩ": "A",
                        "Ẫ": "A",
                        "Ä": "A",
                        "Ǟ": "A",
                        "Ȧ": "A",
                        "Ǡ": "A",
                        "Ạ": "A",
                        "Ȁ": "A",
                        "À": "A",
                        "Ả": "A",
                        "Ȃ": "A",
                        "Ā": "A",
                        "Ą": "A",
                        "Å": "A",
                        "Ǻ": "A",
                        "Ḁ": "A",
                        "Ⱥ": "A",
                        "Ã": "A",
                        "Ꜳ": "AA",
                        "Æ": "AE",
                        "Ǽ": "AE",
                        "Ǣ": "AE",
                        "Ꜵ": "AO",
                        "Ꜷ": "AU",
                        "Ꜹ": "AV",
                        "Ꜻ": "AV",
                        "Ꜽ": "AY",
                        "Ḃ": "B",
                        "Ḅ": "B",
                        "Ɓ": "B",
                        "Ḇ": "B",
                        "Ƀ": "B",
                        "Ƃ": "B",
                        "Ć": "C",
                        "Č": "C",
                        "Ç": "C",
                        "Ḉ": "C",
                        "Ĉ": "C",
                        "Ċ": "C",
                        "Ƈ": "C",
                        "Ȼ": "C",
                        "Ď": "D",
                        "Ḑ": "D",
                        "Ḓ": "D",
                        "Ḋ": "D",
                        "Ḍ": "D",
                        "Ɗ": "D",
                        "Ḏ": "D",
                        "ǲ": "D",
                        "ǅ": "D",
                        "Đ": "D",
                        "Ƌ": "D",
                        "Ǳ": "DZ",
                        "Ǆ": "DZ",
                        "É": "E",
                        "Ĕ": "E",
                        "Ě": "E",
                        "Ȩ": "E",
                        "Ḝ": "E",
                        "Ê": "E",
                        "Ế": "E",
                        "Ệ": "E",
                        "Ề": "E",
                        "Ể": "E",
                        "Ễ": "E",
                        "Ḙ": "E",
                        "Ë": "E",
                        "Ė": "E",
                        "Ẹ": "E",
                        "Ȅ": "E",
                        "È": "E",
                        "Ẻ": "E",
                        "Ȇ": "E",
                        "Ē": "E",
                        "Ḗ": "E",
                        "Ḕ": "E",
                        "Ę": "E",
                        "Ɇ": "E",
                        "Ẽ": "E",
                        "Ḛ": "E",
                        "Ꝫ": "ET",
                        "Ḟ": "F",
                        "Ƒ": "F",
                        "Ǵ": "G",
                        "Ğ": "G",
                        "Ǧ": "G",
                        "Ģ": "G",
                        "Ĝ": "G",
                        "Ġ": "G",
                        "Ɠ": "G",
                        "Ḡ": "G",
                        "Ǥ": "G",
                        "Ḫ": "H",
                        "Ȟ": "H",
                        "Ḩ": "H",
                        "Ĥ": "H",
                        "Ⱨ": "H",
                        "Ḧ": "H",
                        "Ḣ": "H",
                        "Ḥ": "H",
                        "Ħ": "H",
                        "Í": "I",
                        "Ĭ": "I",
                        "Ǐ": "I",
                        "Î": "I",
                        "Ï": "I",
                        "Ḯ": "I",
                        "İ": "I",
                        "Ị": "I",
                        "Ȉ": "I",
                        "Ì": "I",
                        "Ỉ": "I",
                        "Ȋ": "I",
                        "Ī": "I",
                        "Į": "I",
                        "Ɨ": "I",
                        "Ĩ": "I",
                        "Ḭ": "I",
                        "Ꝺ": "D",
                        "Ꝼ": "F",
                        "Ᵹ": "G",
                        "Ꞃ": "R",
                        "Ꞅ": "S",
                        "Ꞇ": "T",
                        "Ꝭ": "IS",
                        "Ĵ": "J",
                        "Ɉ": "J",
                        "Ḱ": "K",
                        "Ǩ": "K",
                        "Ķ": "K",
                        "Ⱪ": "K",
                        "Ꝃ": "K",
                        "Ḳ": "K",
                        "Ƙ": "K",
                        "Ḵ": "K",
                        "Ꝁ": "K",
                        "Ꝅ": "K",
                        "Ĺ": "L",
                        "Ƚ": "L",
                        "Ľ": "L",
                        "Ļ": "L",
                        "Ḽ": "L",
                        "Ḷ": "L",
                        "Ḹ": "L",
                        "Ⱡ": "L",
                        "Ꝉ": "L",
                        "Ḻ": "L",
                        "Ŀ": "L",
                        "Ɫ": "L",
                        "ǈ": "L",
                        "Ł": "L",
                        "Ǉ": "LJ",
                        "Ḿ": "M",
                        "Ṁ": "M",
                        "Ṃ": "M",
                        "Ɱ": "M",
                        "Ń": "N",
                        "Ň": "N",
                        "Ņ": "N",
                        "Ṋ": "N",
                        "Ṅ": "N",
                        "Ṇ": "N",
                        "Ǹ": "N",
                        "Ɲ": "N",
                        "Ṉ": "N",
                        "Ƞ": "N",
                        "ǋ": "N",
                        "Ñ": "N",
                        "Ǌ": "NJ",
                        "Ó": "O",
                        "Ŏ": "O",
                        "Ǒ": "O",
                        "Ô": "O",
                        "Ố": "O",
                        "Ộ": "O",
                        "Ồ": "O",
                        "Ổ": "O",
                        "Ỗ": "O",
                        "Ö": "O",
                        "Ȫ": "O",
                        "Ȯ": "O",
                        "Ȱ": "O",
                        "Ọ": "O",
                        "Ő": "O",
                        "Ȍ": "O",
                        "Ò": "O",
                        "Ỏ": "O",
                        "Ơ": "O",
                        "Ớ": "O",
                        "Ợ": "O",
                        "Ờ": "O",
                        "Ở": "O",
                        "Ỡ": "O",
                        "Ȏ": "O",
                        "Ꝋ": "O",
                        "Ꝍ": "O",
                        "Ō": "O",
                        "Ṓ": "O",
                        "Ṑ": "O",
                        "Ɵ": "O",
                        "Ǫ": "O",
                        "Ǭ": "O",
                        "Ø": "O",
                        "Ǿ": "O",
                        "Õ": "O",
                        "Ṍ": "O",
                        "Ṏ": "O",
                        "Ȭ": "O",
                        "Ƣ": "OI",
                        "Ꝏ": "OO",
                        "Ɛ": "E",
                        "Ɔ": "O",
                        "Ȣ": "OU",
                        "Ṕ": "P",
                        "Ṗ": "P",
                        "Ꝓ": "P",
                        "Ƥ": "P",
                        "Ꝕ": "P",
                        "Ᵽ": "P",
                        "Ꝑ": "P",
                        "Ꝙ": "Q",
                        "Ꝗ": "Q",
                        "Ŕ": "R",
                        "Ř": "R",
                        "Ŗ": "R",
                        "Ṙ": "R",
                        "Ṛ": "R",
                        "Ṝ": "R",
                        "Ȑ": "R",
                        "Ȓ": "R",
                        "Ṟ": "R",
                        "Ɍ": "R",
                        "Ɽ": "R",
                        "Ꜿ": "C",
                        "Ǝ": "E",
                        "Ś": "S",
                        "Ṥ": "S",
                        "Š": "S",
                        "Ṧ": "S",
                        "Ş": "S",
                        "Ŝ": "S",
                        "Ș": "S",
                        "Ṡ": "S",
                        "Ṣ": "S",
                        "Ṩ": "S",
                        "ẞ": "SS",
                        "Ť": "T",
                        "Ţ": "T",
                        "Ṱ": "T",
                        "Ț": "T",
                        "Ⱦ": "T",
                        "Ṫ": "T",
                        "Ṭ": "T",
                        "Ƭ": "T",
                        "Ṯ": "T",
                        "Ʈ": "T",
                        "Ŧ": "T",
                        "Ɐ": "A",
                        "Ꞁ": "L",
                        "Ɯ": "M",
                        "Ʌ": "V",
                        "Ꜩ": "TZ",
                        "Ú": "U",
                        "Ŭ": "U",
                        "Ǔ": "U",
                        "Û": "U",
                        "Ṷ": "U",
                        "Ü": "U",
                        "Ǘ": "U",
                        "Ǚ": "U",
                        "Ǜ": "U",
                        "Ǖ": "U",
                        "Ṳ": "U",
                        "Ụ": "U",
                        "Ű": "U",
                        "Ȕ": "U",
                        "Ù": "U",
                        "Ủ": "U",
                        "Ư": "U",
                        "Ứ": "U",
                        "Ự": "U",
                        "Ừ": "U",
                        "Ử": "U",
                        "Ữ": "U",
                        "Ȗ": "U",
                        "Ū": "U",
                        "Ṻ": "U",
                        "Ų": "U",
                        "Ů": "U",
                        "Ũ": "U",
                        "Ṹ": "U",
                        "Ṵ": "U",
                        "Ꝟ": "V",
                        "Ṿ": "V",
                        "Ʋ": "V",
                        "Ṽ": "V",
                        "Ꝡ": "VY",
                        "Ẃ": "W",
                        "Ŵ": "W",
                        "Ẅ": "W",
                        "Ẇ": "W",
                        "Ẉ": "W",
                        "Ẁ": "W",
                        "Ⱳ": "W",
                        "Ẍ": "X",
                        "Ẋ": "X",
                        "Ý": "Y",
                        "Ŷ": "Y",
                        "Ÿ": "Y",
                        "Ẏ": "Y",
                        "Ỵ": "Y",
                        "Ỳ": "Y",
                        "Ƴ": "Y",
                        "Ỷ": "Y",
                        "Ỿ": "Y",
                        "Ȳ": "Y",
                        "Ɏ": "Y",
                        "Ỹ": "Y",
                        "Ź": "Z",
                        "Ž": "Z",
                        "Ẑ": "Z",
                        "Ⱬ": "Z",
                        "Ż": "Z",
                        "Ẓ": "Z",
                        "Ȥ": "Z",
                        "Ẕ": "Z",
                        "Ƶ": "Z",
                        "Ĳ": "IJ",
                        "Œ": "OE",
                        "ᴀ": "A",
                        "ᴁ": "AE",
                        "ʙ": "B",
                        "ᴃ": "B",
                        "ᴄ": "C",
                        "ᴅ": "D",
                        "ᴇ": "E",
                        "ꜰ": "F",
                        "ɢ": "G",
                        "ʛ": "G",
                        "ʜ": "H",
                        "ɪ": "I",
                        "ʁ": "R",
                        "ᴊ": "J",
                        "ᴋ": "K",
                        "ʟ": "L",
                        "ᴌ": "L",
                        "ᴍ": "M",
                        "ɴ": "N",
                        "ᴏ": "O",
                        "ɶ": "OE",
                        "ᴐ": "O",
                        "ᴕ": "OU",
                        "ᴘ": "P",
                        "ʀ": "R",
                        "ᴎ": "N",
                        "ᴙ": "R",
                        "ꜱ": "S",
                        "ᴛ": "T",
                        "ⱻ": "E",
                        "ᴚ": "R",
                        "ᴜ": "U",
                        "ᴠ": "V",
                        "ᴡ": "W",
                        "ʏ": "Y",
                        "ᴢ": "Z",
                        "á": "a",
                        "ă": "a",
                        "ắ": "a",
                        "ặ": "a",
                        "ằ": "a",
                        "ẳ": "a",
                        "ẵ": "a",
                        "ǎ": "a",
                        "â": "a",
                        "ấ": "a",
                        "ậ": "a",
                        "ầ": "a",
                        "ẩ": "a",
                        "ẫ": "a",
                        "ä": "a",
                        "ǟ": "a",
                        "ȧ": "a",
                        "ǡ": "a",
                        "ạ": "a",
                        "ȁ": "a",
                        "à": "a",
                        "ả": "a",
                        "ȃ": "a",
                        "ā": "a",
                        "ą": "a",
                        "ᶏ": "a",
                        "ẚ": "a",
                        "å": "a",
                        "ǻ": "a",
                        "ḁ": "a",
                        "ⱥ": "a",
                        "ã": "a",
                        "ꜳ": "aa",
                        "æ": "ae",
                        "ǽ": "ae",
                        "ǣ": "ae",
                        "ꜵ": "ao",
                        "ꜷ": "au",
                        "ꜹ": "av",
                        "ꜻ": "av",
                        "ꜽ": "ay",
                        "ḃ": "b",
                        "ḅ": "b",
                        "ɓ": "b",
                        "ḇ": "b",
                        "ᵬ": "b",
                        "ᶀ": "b",
                        "ƀ": "b",
                        "ƃ": "b",
                        "ɵ": "o",
                        "ć": "c",
                        "č": "c",
                        "ç": "c",
                        "ḉ": "c",
                        "ĉ": "c",
                        "ɕ": "c",
                        "ċ": "c",
                        "ƈ": "c",
                        "ȼ": "c",
                        "ď": "d",
                        "ḑ": "d",
                        "ḓ": "d",
                        "ȡ": "d",
                        "ḋ": "d",
                        "ḍ": "d",
                        "ɗ": "d",
                        "ᶑ": "d",
                        "ḏ": "d",
                        "ᵭ": "d",
                        "ᶁ": "d",
                        "đ": "d",
                        "ɖ": "d",
                        "ƌ": "d",
                        "ı": "i",
                        "ȷ": "j",
                        "ɟ": "j",
                        "ʄ": "j",
                        "ǳ": "dz",
                        "ǆ": "dz",
                        "é": "e",
                        "ĕ": "e",
                        "ě": "e",
                        "ȩ": "e",
                        "ḝ": "e",
                        "ê": "e",
                        "ế": "e",
                        "ệ": "e",
                        "ề": "e",
                        "ể": "e",
                        "ễ": "e",
                        "ḙ": "e",
                        "ë": "e",
                        "ė": "e",
                        "ẹ": "e",
                        "ȅ": "e",
                        "è": "e",
                        "ẻ": "e",
                        "ȇ": "e",
                        "ē": "e",
                        "ḗ": "e",
                        "ḕ": "e",
                        "ⱸ": "e",
                        "ę": "e",
                        "ᶒ": "e",
                        "ɇ": "e",
                        "ẽ": "e",
                        "ḛ": "e",
                        "ꝫ": "et",
                        "ḟ": "f",
                        "ƒ": "f",
                        "ᵮ": "f",
                        "ᶂ": "f",
                        "ǵ": "g",
                        "ğ": "g",
                        "ǧ": "g",
                        "ģ": "g",
                        "ĝ": "g",
                        "ġ": "g",
                        "ɠ": "g",
                        "ḡ": "g",
                        "ᶃ": "g",
                        "ǥ": "g",
                        "ḫ": "h",
                        "ȟ": "h",
                        "ḩ": "h",
                        "ĥ": "h",
                        "ⱨ": "h",
                        "ḧ": "h",
                        "ḣ": "h",
                        "ḥ": "h",
                        "ɦ": "h",
                        "ẖ": "h",
                        "ħ": "h",
                        "ƕ": "hv",
                        "í": "i",
                        "ĭ": "i",
                        "ǐ": "i",
                        "î": "i",
                        "ï": "i",
                        "ḯ": "i",
                        "ị": "i",
                        "ȉ": "i",
                        "ì": "i",
                        "ỉ": "i",
                        "ȋ": "i",
                        "ī": "i",
                        "į": "i",
                        "ᶖ": "i",
                        "ɨ": "i",
                        "ĩ": "i",
                        "ḭ": "i",
                        "ꝺ": "d",
                        "ꝼ": "f",
                        "ᵹ": "g",
                        "ꞃ": "r",
                        "ꞅ": "s",
                        "ꞇ": "t",
                        "ꝭ": "is",
                        "ǰ": "j",
                        "ĵ": "j",
                        "ʝ": "j",
                        "ɉ": "j",
                        "ḱ": "k",
                        "ǩ": "k",
                        "ķ": "k",
                        "ⱪ": "k",
                        "ꝃ": "k",
                        "ḳ": "k",
                        "ƙ": "k",
                        "ḵ": "k",
                        "ᶄ": "k",
                        "ꝁ": "k",
                        "ꝅ": "k",
                        "ĺ": "l",
                        "ƚ": "l",
                        "ɬ": "l",
                        "ľ": "l",
                        "ļ": "l",
                        "ḽ": "l",
                        "ȴ": "l",
                        "ḷ": "l",
                        "ḹ": "l",
                        "ⱡ": "l",
                        "ꝉ": "l",
                        "ḻ": "l",
                        "ŀ": "l",
                        "ɫ": "l",
                        "ᶅ": "l",
                        "ɭ": "l",
                        "ł": "l",
                        "ǉ": "lj",
                        "ſ": "s",
                        "ẜ": "s",
                        "ẛ": "s",
                        "ẝ": "s",
                        "ḿ": "m",
                        "ṁ": "m",
                        "ṃ": "m",
                        "ɱ": "m",
                        "ᵯ": "m",
                        "ᶆ": "m",
                        "ń": "n",
                        "ň": "n",
                        "ņ": "n",
                        "ṋ": "n",
                        "ȵ": "n",
                        "ṅ": "n",
                        "ṇ": "n",
                        "ǹ": "n",
                        "ɲ": "n",
                        "ṉ": "n",
                        "ƞ": "n",
                        "ᵰ": "n",
                        "ᶇ": "n",
                        "ɳ": "n",
                        "ñ": "n",
                        "ǌ": "nj",
                        "ó": "o",
                        "ŏ": "o",
                        "ǒ": "o",
                        "ô": "o",
                        "ố": "o",
                        "ộ": "o",
                        "ồ": "o",
                        "ổ": "o",
                        "ỗ": "o",
                        "ö": "o",
                        "ȫ": "o",
                        "ȯ": "o",
                        "ȱ": "o",
                        "ọ": "o",
                        "ő": "o",
                        "ȍ": "o",
                        "ò": "o",
                        "ỏ": "o",
                        "ơ": "o",
                        "ớ": "o",
                        "ợ": "o",
                        "ờ": "o",
                        "ở": "o",
                        "ỡ": "o",
                        "ȏ": "o",
                        "ꝋ": "o",
                        "ꝍ": "o",
                        "ⱺ": "o",
                        "ō": "o",
                        "ṓ": "o",
                        "ṑ": "o",
                        "ǫ": "o",
                        "ǭ": "o",
                        "ø": "o",
                        "ǿ": "o",
                        "õ": "o",
                        "ṍ": "o",
                        "ṏ": "o",
                        "ȭ": "o",
                        "ƣ": "oi",
                        "ꝏ": "oo",
                        "ɛ": "e",
                        "ᶓ": "e",
                        "ɔ": "o",
                        "ᶗ": "o",
                        "ȣ": "ou",
                        "ṕ": "p",
                        "ṗ": "p",
                        "ꝓ": "p",
                        "ƥ": "p",
                        "ᵱ": "p",
                        "ᶈ": "p",
                        "ꝕ": "p",
                        "ᵽ": "p",
                        "ꝑ": "p",
                        "ꝙ": "q",
                        "ʠ": "q",
                        "ɋ": "q",
                        "ꝗ": "q",
                        "ŕ": "r",
                        "ř": "r",
                        "ŗ": "r",
                        "ṙ": "r",
                        "ṛ": "r",
                        "ṝ": "r",
                        "ȑ": "r",
                        "ɾ": "r",
                        "ᵳ": "r",
                        "ȓ": "r",
                        "ṟ": "r",
                        "ɼ": "r",
                        "ᵲ": "r",
                        "ᶉ": "r",
                        "ɍ": "r",
                        "ɽ": "r",
                        "ↄ": "c",
                        "ꜿ": "c",
                        "ɘ": "e",
                        "ɿ": "r",
                        "ś": "s",
                        "ṥ": "s",
                        "š": "s",
                        "ṧ": "s",
                        "ş": "s",
                        "ŝ": "s",
                        "ș": "s",
                        "ṡ": "s",
                        "ṣ": "s",
                        "ṩ": "s",
                        "ʂ": "s",
                        "ᵴ": "s",
                        "ᶊ": "s",
                        "ȿ": "s",
                        "ɡ": "g",
                        "ß": "ss",
                        "ᴑ": "o",
                        "ᴓ": "o",
                        "ᴝ": "u",
                        "ť": "t",
                        "ţ": "t",
                        "ṱ": "t",
                        "ț": "t",
                        "ȶ": "t",
                        "ẗ": "t",
                        "ⱦ": "t",
                        "ṫ": "t",
                        "ṭ": "t",
                        "ƭ": "t",
                        "ṯ": "t",
                        "ᵵ": "t",
                        "ƫ": "t",
                        "ʈ": "t",
                        "ŧ": "t",
                        "ᵺ": "th",
                        "ɐ": "a",
                        "ᴂ": "ae",
                        "ǝ": "e",
                        "ᵷ": "g",
                        "ɥ": "h",
                        "ʮ": "h",
                        "ʯ": "h",
                        "ᴉ": "i",
                        "ʞ": "k",
                        "ꞁ": "l",
                        "ɯ": "m",
                        "ɰ": "m",
                        "ᴔ": "oe",
                        "ɹ": "r",
                        "ɻ": "r",
                        "ɺ": "r",
                        "ⱹ": "r",
                        "ʇ": "t",
                        "ʌ": "v",
                        "ʍ": "w",
                        "ʎ": "y",
                        "ꜩ": "tz",
                        "ú": "u",
                        "ŭ": "u",
                        "ǔ": "u",
                        "û": "u",
                        "ṷ": "u",
                        "ü": "u",
                        "ǘ": "u",
                        "ǚ": "u",
                        "ǜ": "u",
                        "ǖ": "u",
                        "ṳ": "u",
                        "ụ": "u",
                        "ű": "u",
                        "ȕ": "u",
                        "ù": "u",
                        "ủ": "u",
                        "ư": "u",
                        "ứ": "u",
                        "ự": "u",
                        "ừ": "u",
                        "ử": "u",
                        "ữ": "u",
                        "ȗ": "u",
                        "ū": "u",
                        "ṻ": "u",
                        "ų": "u",
                        "ᶙ": "u",
                        "ů": "u",
                        "ũ": "u",
                        "ṹ": "u",
                        "ṵ": "u",
                        "ᵫ": "ue",
                        "ꝸ": "um",
                        "ⱴ": "v",
                        "ꝟ": "v",
                        "ṿ": "v",
                        "ʋ": "v",
                        "ᶌ": "v",
                        "ⱱ": "v",
                        "ṽ": "v",
                        "ꝡ": "vy",
                        "ẃ": "w",
                        "ŵ": "w",
                        "ẅ": "w",
                        "ẇ": "w",
                        "ẉ": "w",
                        "ẁ": "w",
                        "ⱳ": "w",
                        "ẘ": "w",
                        "ẍ": "x",
                        "ẋ": "x",
                        "ᶍ": "x",
                        "ý": "y",
                        "ŷ": "y",
                        "ÿ": "y",
                        "ẏ": "y",
                        "ỵ": "y",
                        "ỳ": "y",
                        "ƴ": "y",
                        "ỷ": "y",
                        "ỿ": "y",
                        "ȳ": "y",
                        "ẙ": "y",
                        "ɏ": "y",
                        "ỹ": "y",
                        "ź": "z",
                        "ž": "z",
                        "ẑ": "z",
                        "ʑ": "z",
                        "ⱬ": "z",
                        "ż": "z",
                        "ẓ": "z",
                        "ȥ": "z",
                        "ẕ": "z",
                        "ᵶ": "z",
                        "ᶎ": "z",
                        "ʐ": "z",
                        "ƶ": "z",
                        "ɀ": "z",
                        "ﬀ": "ff",
                        "ﬃ": "ffi",
                        "ﬄ": "ffl",
                        "ﬁ": "fi",
                        "ﬂ": "fl",
                        "ĳ": "ij",
                        "œ": "oe",
                        "ﬆ": "st",
                        "ₐ": "a",
                        "ₑ": "e",
                        "ᵢ": "i",
                        "ⱼ": "j",
                        "ₒ": "o",
                        "ᵣ": "r",
                        "ᵤ": "u",
                        "ᵥ": "v",
                        "ₓ": "x"
                    }, __nsp = String.prototype,
                    __sp = S.prototype = {
                        between: function(left, right) {
                            var s = this.s,
                                startPos = s.indexOf(left),
                                endPos = s.indexOf(right, startPos + left.length);
                            return endPos == -1 && null != right ? new this.constructor("") : endPos == -1 && null == right ? new this.constructor(s.substring(startPos + left.length)) : new this.constructor(s.slice(startPos + left.length, endPos))
                        },
                        camelize: function() {
                            var s = this.trim().s.replace(/(\-|_|\s)+(.)?/g, function(mathc, sep, c) {
                                return c ? c.toUpperCase() : ""
                            });
                            return new this.constructor(s)
                        },
                        capitalize: function() {
                            return new this.constructor(this.s.substr(0, 1).toUpperCase() + this.s.substring(1).toLowerCase())
                        },
                        charAt: function(index) {
                            return this.s.charAt(index)
                        },
                        chompLeft: function(prefix) {
                            var s = this.s;
                            return 0 === s.indexOf(prefix) ? (s = s.slice(prefix.length), new this.constructor(s)) : this
                        },
                        chompRight: function(suffix) {
                            if (this.endsWith(suffix)) {
                                var s = this.s;
                                return s = s.slice(0, s.length - suffix.length), new this.constructor(s)
                            }
                            return this
                        },
                        collapseWhitespace: function() {
                            var s = this.s.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
                            return new this.constructor(s)
                        },
                        contains: function(ss) {
                            return this.s.indexOf(ss) >= 0
                        },
                        count: function(ss) {
                            return require("./_count")(this.s, ss)
                        },
                        dasherize: function() {
                            var s = this.trim().s.replace(/[_\s]+/g, "-").replace(/([A-Z])/g, "-$1").replace(/-+/g, "-").toLowerCase();
                            return new this.constructor(s)
                        },
                        equalsIgnoreCase: function(prefix) {
                            var s = this.s;
                            return s.toLowerCase() == prefix.toLowerCase()
                        },
                        latinise: function() {
                            var s = this.replace(/[^A-Za-z0-9\[\] ]/g, function(x) {
                                return latin_map[x] || x
                            });
                            return new this.constructor(s)
                        },
                        decodeHtmlEntities: function() {
                            var s = this.s;
                            return s = s.replace(/&#(\d+);?/g, function(_, code) {
                                return String.fromCharCode(code)
                            }).replace(/&#[xX]([A-Fa-f0-9]+);?/g, function(_, hex) {
                                return String.fromCharCode(parseInt(hex, 16))
                            }).replace(/&([^;\W]+;?)/g, function(m, e) {
                                var ee = e.replace(/;$/, ""),
                                    target = ENTITIES[e] || e.match(/;$/) && ENTITIES[ee];
                                return "number" == typeof target ? String.fromCharCode(target) : "string" == typeof target ? target : m
                            }), new this.constructor(s)
                        },
                        endsWith: function() {
                            for (var suffixes = Array.prototype.slice.call(arguments, 0), i = 0; i < suffixes.length; ++i) {
                                var l = this.s.length - suffixes[i].length;
                                if (l >= 0 && this.s.indexOf(suffixes[i], l) === l) return !0
                            }
                            return !1
                        },
                        escapeHTML: function() {
                            return new this.constructor(this.s.replace(/[&<>"']/g, function(m) {
                                return "&" + reversedEscapeChars[m] + ";"
                            }))
                        },
                        ensureLeft: function(prefix) {
                            var s = this.s;
                            return 0 === s.indexOf(prefix) ? this : new this.constructor(prefix + s)
                        },
                        ensureRight: function(suffix) {
                            var s = this.s;
                            return this.endsWith(suffix) ? this : new this.constructor(s + suffix)
                        },
                        humanize: function() {
                            if (null === this.s || void 0 === this.s) return new this.constructor("");
                            var s = this.underscore().replace(/_id$/, "").replace(/_/g, " ").trim().capitalize();
                            return new this.constructor(s)
                        },
                        isAlpha: function() {
                            return !/[^a-z\xDF-\xFF]|^$/.test(this.s.toLowerCase())
                        },
                        isAlphaNumeric: function() {
                            return !/[^0-9a-z\xDF-\xFF]/.test(this.s.toLowerCase())
                        },
                        isEmpty: function() {
                            return null === this.s || void 0 === this.s || /^[\s\xa0]*$/.test(this.s)
                        },
                        isLower: function() {
                            return this.isAlpha() && this.s.toLowerCase() === this.s
                        },
                        isNumeric: function() {
                            return !/[^0-9]/.test(this.s)
                        },
                        isUpper: function() {
                            return this.isAlpha() && this.s.toUpperCase() === this.s
                        },
                        left: function(N) {
                            if (N >= 0) {
                                var s = this.s.substr(0, N);
                                return new this.constructor(s)
                            }
                            return this.right(-N)
                        },
                        lines: function() {
                            return this.replaceAll("\r\n", "\n").s.split("\n")
                        },
                        pad: function(len, ch) {
                            if (null == ch && (ch = " "), this.s.length >= len) return new this.constructor(this.s);
                            len -= this.s.length;
                            var left = Array(Math.ceil(len / 2) + 1).join(ch),
                                right = Array(Math.floor(len / 2) + 1).join(ch);
                            return new this.constructor(left + this.s + right)
                        },
                        padLeft: function(len, ch) {
                            return null == ch && (ch = " "), this.s.length >= len ? new this.constructor(this.s) : new this.constructor(Array(len - this.s.length + 1).join(ch) + this.s)
                        },
                        padRight: function(len, ch) {
                            return null == ch && (ch = " "), this.s.length >= len ? new this.constructor(this.s) : new this.constructor(this.s + Array(len - this.s.length + 1).join(ch))
                        },
                        parseCSV: function(delimiter, qualifier, escape, lineDelimiter) {
                            delimiter = delimiter || ",", escape = escape || "\\", "undefined" == typeof qualifier && (qualifier = '"');
                            var i = 0,
                                fieldBuffer = [],
                                fields = [],
                                len = this.s.length,
                                inField = !1,
                                inUnqualifiedString = !1,
                                self = this,
                                ca = function(i) {
                                    return self.s.charAt(i)
                                };
                            if ("undefined" != typeof lineDelimiter) var rows = [];
                            for (qualifier || (inField = !0); i < len;) {
                                var current = ca(i);
                                switch (current) {
                                    case escape:
                                        if (inField && (escape !== qualifier || ca(i + 1) === qualifier)) {
                                            i += 1, fieldBuffer.push(ca(i));
                                            break
                                        }
                                        if (escape !== qualifier) break;
                                    case qualifier:
                                        inField = !inField;
                                        break;
                                    case delimiter:
                                        inUnqualifiedString && (inField = !1, inUnqualifiedString = !1), inField && qualifier ? fieldBuffer.push(current) : (fields.push(fieldBuffer.join("")), fieldBuffer.length = 0);
                                        break;
                                    case lineDelimiter:
                                        inUnqualifiedString ? (inField = !1, inUnqualifiedString = !1, fields.push(fieldBuffer.join("")), rows.push(fields), fields = [], fieldBuffer.length = 0) : inField ? fieldBuffer.push(current) : rows && (fields.push(fieldBuffer.join("")), rows.push(fields), fields = [], fieldBuffer.length = 0);
                                        break;
                                    case " ":
                                        inField && fieldBuffer.push(current);
                                        break;
                                    default:
                                        inField ? fieldBuffer.push(current) : current !== qualifier && (fieldBuffer.push(current), inField = !0, inUnqualifiedString = !0)
                                }
                                i += 1
                            }
                            return fields.push(fieldBuffer.join("")), rows ? (rows.push(fields), rows) : fields
                        },
                        replaceAll: function(ss, r) {
                            var s = this.s.split(ss).join(r);
                            return new this.constructor(s)
                        },
                        splitLeft: function(sep, maxSplit, limit) {
                            return require("./_splitLeft")(this.s, sep, maxSplit, limit)
                        },
                        splitRight: function(sep, maxSplit, limit) {
                            return require("./_splitRight")(this.s, sep, maxSplit, limit)
                        },
                        strip: function() {
                            for (var ss = this.s, i = 0, n = arguments.length; i < n; i++) ss = ss.split(arguments[i]).join("");
                            return new this.constructor(ss)
                        },
                        stripLeft: function(chars) {
                            var regex, pattern, ss = ensureString(this.s);
                            return void 0 === chars ? pattern = /^\s+/g : (regex = escapeRegExp(chars), pattern = new RegExp("^[" + regex + "]+", "g")), new this.constructor(ss.replace(pattern, ""))
                        },
                        stripRight: function(chars) {
                            var regex, pattern, ss = ensureString(this.s);
                            return void 0 === chars ? pattern = /\s+$/g : (regex = escapeRegExp(chars), pattern = new RegExp("[" + regex + "]+$", "g")), new this.constructor(ss.replace(pattern, ""))
                        },
                        right: function(N) {
                            if (N >= 0) {
                                var s = this.s.substr(this.s.length - N, N);
                                return new this.constructor(s)
                            }
                            return this.left(-N)
                        },
                        setValue: function(s) {
                            return initialize(this, s), this
                        },
                        slugify: function() {
                            var sl = new S(new S(this.s).latinise().s.replace(/[^\w\s-]/g, "").toLowerCase()).dasherize().s;
                            return "-" === sl.charAt(0) && (sl = sl.substr(1)), new this.constructor(sl)
                        },
                        startsWith: function() {
                            for (var prefixes = Array.prototype.slice.call(arguments, 0), i = 0; i < prefixes.length; ++i)
                                if (0 === this.s.lastIndexOf(prefixes[i], 0)) return !0;
                            return !1
                        },
                        stripPunctuation: function() {
                            return new this.constructor(this.s.replace(/[^\w\s]|_/g, "").replace(/\s+/g, " "))
                        },
                        stripTags: function() {
                            var s = this.s,
                                args = arguments.length > 0 ? arguments : [""];
                            return multiArgs(args, function(tag) {
                                s = s.replace(RegExp("</?" + tag + "[^<>]*>", "gi"), "")
                            }), new this.constructor(s)
                        },
                        template: function(values, opening, closing) {
                            var s = this.s,
                                opening = opening || Export.TMPL_OPEN,
                                closing = closing || Export.TMPL_CLOSE,
                                open = opening.replace(/[-[\]()*\s]/g, "\\$&").replace(/\$/g, "\\$"),
                                close = closing.replace(/[-[\]()*\s]/g, "\\$&").replace(/\$/g, "\\$"),
                                r = new RegExp(open + "(.+?)" + close, "g"),
                                matches = s.match(r) || [];
                            return matches.forEach(function(match) {
                                var key = match.substring(opening.length, match.length - closing.length).trim(),
                                    value = "undefined" == typeof values[key] ? "" : values[key];
                                s = s.replace(match, value)
                            }), new this.constructor(s)
                        },
                        times: function(n) {
                            return new this.constructor(new Array(n + 1).join(this.s))
                        },
                        titleCase: function() {
                            var s = this.s;
                            return s && (s = s.replace(/(^[a-z]| [a-z]|-[a-z]|_[a-z])/g, function($1) {
                                return $1.toUpperCase()
                            })), new this.constructor(s)
                        },
                        toBoolean: function() {
                            if ("string" == typeof this.orig) {
                                var s = this.s.toLowerCase();
                                return "true" === s || "yes" === s || "on" === s || "1" === s
                            }
                            return this.orig === !0 || 1 === this.orig
                        },
                        toFloat: function(precision) {
                            var num = parseFloat(this.s);
                            return precision ? parseFloat(num.toFixed(precision)) : num
                        },
                        toInt: function() {
                            return /^\s*-?0x/i.test(this.s) ? parseInt(this.s, 16) : parseInt(this.s, 10)
                        },
                        trim: function() {
                            var s;
                            return s = "undefined" == typeof __nsp.trim ? this.s.replace(/(^\s*|\s*$)/g, "") : this.s.trim(), new this.constructor(s)
                        },
                        trimLeft: function() {
                            var s;
                            return s = __nsp.trimLeft ? this.s.trimLeft() : this.s.replace(/(^\s*)/g, ""), new this.constructor(s)
                        },
                        trimRight: function() {
                            var s;
                            return s = __nsp.trimRight ? this.s.trimRight() : this.s.replace(/\s+$/, ""), new this.constructor(s)
                        },
                        truncate: function(length, pruneStr) {
                            var str = this.s;
                            if (length = ~~length, pruneStr = pruneStr || "...", str.length <= length) return new this.constructor(str);
                            var tmpl = function(c) {
                                return c.toUpperCase() !== c.toLowerCase() ? "A" : " "
                            }, template = str.slice(0, length + 1).replace(/.(?=\W*\w*$)/g, tmpl);
                            return template = template.slice(template.length - 2).match(/\w\w/) ? template.replace(/\s*\S+$/, "") : new S(template.slice(0, template.length - 1)).trimRight().s, new S((template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr)
                        },
                        toCSV: function() {
                            function hasVal(it) {
                                return null !== it && "" !== it
                            }
                            var delim = ",",
                                qualifier = '"',
                                escape = "\\",
                                encloseNumbers = !0,
                                keys = !1,
                                dataArray = [];
                            if ("object" == typeof arguments[0] ? (delim = arguments[0].delimiter || delim, delim = arguments[0].separator || delim, qualifier = arguments[0].qualifier || qualifier, encloseNumbers = !! arguments[0].encloseNumbers, escape = arguments[0].escape || escape, keys = !! arguments[0].keys) : "string" == typeof arguments[0] && (delim = arguments[0]), "string" == typeof arguments[1] && (qualifier = arguments[1]), null === arguments[1] && (qualifier = null), this.orig instanceof Array) dataArray = this.orig;
                            else
                                for (var key in this.orig) this.orig.hasOwnProperty(key) && (keys ? dataArray.push(key) : dataArray.push(this.orig[key]));
                            for (var rep = escape + qualifier, buildString = [], i = 0; i < dataArray.length; ++i) {
                                var shouldQualify = hasVal(qualifier);
                                if ("number" == typeof dataArray[i] && (shouldQualify &= encloseNumbers), shouldQualify && buildString.push(qualifier), null !== dataArray[i] && void 0 !== dataArray[i]) {
                                    var d = new S(dataArray[i]).replaceAll(qualifier, rep).s;
                                    buildString.push(d)
                                } else buildString.push("");
                                shouldQualify && buildString.push(qualifier), delim && buildString.push(delim)
                            }
                            return buildString.length = buildString.length - 1, new this.constructor(buildString.join(""))
                        },
                        toString: function() {
                            return this.s
                        },
                        underscore: function() {
                            var s = this.trim().s.replace(/([a-z\d])([A-Z]+)/g, "$1_$2").replace(/([A-Z\d]+)([A-Z][a-z])/g, "$1_$2").replace(/[-\s]+/g, "_").toLowerCase();
                            return new this.constructor(s)
                        },
                        unescapeHTML: function() {
                            return new this.constructor(this.s.replace(/\&([^;]+);/g, function(entity, entityCode) {
                                var match;
                                return entityCode in escapeChars ? escapeChars[entityCode] : (match = entityCode.match(/^#x([\da-fA-F]+)$/)) ? String.fromCharCode(parseInt(match[1], 16)) : (match = entityCode.match(/^#(\d+)$/)) ? String.fromCharCode(~~match[1]) : entity
                            }))
                        },
                        valueOf: function() {
                            return this.s.valueOf()
                        },
                        wrapHTML: function(tagName, tagAttrs) {
                            var s = this.s,
                                el = null == tagName ? "span" : tagName,
                                elAttr = "",
                                wrapped = "";
                            if ("object" == typeof tagAttrs)
                                for (var prop in tagAttrs) elAttr += " " + prop + '="' + new this.constructor(tagAttrs[prop]).escapeHTML() + '"';
                            return s = wrapped.concat("<", el, elAttr, ">", this, "</", el, ">"), new this.constructor(s)
                        }
                    }, methodsAdded = [],
                    nativeProperties = getNativeStringProperties();
                for (var name in nativeProperties)! function(name) {
                    var stringProp = __nsp[name];
                    "function" == typeof stringProp && (__sp[name] || ("string" === nativeProperties[name] ? __sp[name] = function() {
                        return new this.constructor(stringProp.apply(this, arguments))
                    } : __sp[name] = stringProp))
                }(name);
                __sp.repeat = __sp.times, __sp.include = __sp.contains, __sp.toInteger = __sp.toInt, __sp.toBool = __sp.toBoolean, __sp.decodeHTMLEntities = __sp.decodeHtmlEntities, __sp.constructor = S, Export.extendPrototype = extendPrototype, Export.restorePrototype = restorePrototype, Export.VERSION = VERSION, Export.TMPL_OPEN = "{{", Export.TMPL_CLOSE = "}}", Export.ENTITIES = ENTITIES, "undefined" != typeof module && "undefined" != typeof module.exports ? module.exports = Export : "function" == typeof define && define.amd ? define([], function() {
                    return Export
                }) : window.S = Export;
                var escapeChars = {
                    lt: "<",
                    gt: ">",
                    quot: '"',
                    apos: "'",
                    amp: "&"
                }, reversedEscapeChars = {};
                for (var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;
                ENTITIES = {
                    amp: "&",
                    gt: ">",
                    lt: "<",
                    quot: '"',
                    apos: "'",
                    AElig: 198,
                    Aacute: 193,
                    Acirc: 194,
                    Agrave: 192,
                    Aring: 197,
                    Atilde: 195,
                    Auml: 196,
                    Ccedil: 199,
                    ETH: 208,
                    Eacute: 201,
                    Ecirc: 202,
                    Egrave: 200,
                    Euml: 203,
                    Iacute: 205,
                    Icirc: 206,
                    Igrave: 204,
                    Iuml: 207,
                    Ntilde: 209,
                    Oacute: 211,
                    Ocirc: 212,
                    Ograve: 210,
                    Oslash: 216,
                    Otilde: 213,
                    Ouml: 214,
                    THORN: 222,
                    Uacute: 218,
                    Ucirc: 219,
                    Ugrave: 217,
                    Uuml: 220,
                    Yacute: 221,
                    aacute: 225,
                    acirc: 226,
                    aelig: 230,
                    agrave: 224,
                    aring: 229,
                    atilde: 227,
                    auml: 228,
                    ccedil: 231,
                    eacute: 233,
                    ecirc: 234,
                    egrave: 232,
                    eth: 240,
                    euml: 235,
                    iacute: 237,
                    icirc: 238,
                    igrave: 236,
                    iuml: 239,
                    ntilde: 241,
                    oacute: 243,
                    ocirc: 244,
                    ograve: 242,
                    oslash: 248,
                    otilde: 245,
                    ouml: 246,
                    szlig: 223,
                    thorn: 254,
                    uacute: 250,
                    ucirc: 251,
                    ugrave: 249,
                    uuml: 252,
                    yacute: 253,
                    yuml: 255,
                    copy: 169,
                    reg: 174,
                    nbsp: 160,
                    iexcl: 161,
                    cent: 162,
                    pound: 163,
                    curren: 164,
                    yen: 165,
                    brvbar: 166,
                    sect: 167,
                    uml: 168,
                    ordf: 170,
                    laquo: 171,
                    not: 172,
                    shy: 173,
                    macr: 175,
                    deg: 176,
                    plusmn: 177,
                    sup1: 185,
                    sup2: 178,
                    sup3: 179,
                    acute: 180,
                    micro: 181,
                    para: 182,
                    middot: 183,
                    cedil: 184,
                    ordm: 186,
                    raquo: 187,
                    frac14: 188,
                    frac12: 189,
                    frac34: 190,
                    iquest: 191,
                    times: 215,
                    divide: 247,
                    "OElig;": 338,
                    "oelig;": 339,
                    "Scaron;": 352,
                    "scaron;": 353,
                    "Yuml;": 376,
                    "fnof;": 402,
                    "circ;": 710,
                    "tilde;": 732,
                    "Alpha;": 913,
                    "Beta;": 914,
                    "Gamma;": 915,
                    "Delta;": 916,
                    "Epsilon;": 917,
                    "Zeta;": 918,
                    "Eta;": 919,
                    "Theta;": 920,
                    "Iota;": 921,
                    "Kappa;": 922,
                    "Lambda;": 923,
                    "Mu;": 924,
                    "Nu;": 925,
                    "Xi;": 926,
                    "Omicron;": 927,
                    "Pi;": 928,
                    "Rho;": 929,
                    "Sigma;": 931,
                    "Tau;": 932,
                    "Upsilon;": 933,
                    "Phi;": 934,
                    "Chi;": 935,
                    "Psi;": 936,
                    "Omega;": 937,
                    "alpha;": 945,
                    "beta;": 946,
                    "gamma;": 947,
                    "delta;": 948,
                    "epsilon;": 949,
                    "zeta;": 950,
                    "eta;": 951,
                    "theta;": 952,
                    "iota;": 953,
                    "kappa;": 954,
                    "lambda;": 955,
                    "mu;": 956,
                    "nu;": 957,
                    "xi;": 958,
                    "omicron;": 959,
                    "pi;": 960,
                    "rho;": 961,
                    "sigmaf;": 962,
                    "sigma;": 963,
                    "tau;": 964,
                    "upsilon;": 965,
                    "phi;": 966,
                    "chi;": 967,
                    "psi;": 968,
                    "omega;": 969,
                    "thetasym;": 977,
                    "upsih;": 978,
                    "piv;": 982,
                    "ensp;": 8194,
                    "emsp;": 8195,
                    "thinsp;": 8201,
                    "zwnj;": 8204,
                    "zwj;": 8205,
                    "lrm;": 8206,
                    "rlm;": 8207,
                    "ndash;": 8211,
                    "mdash;": 8212,
                    "lsquo;": 8216,
                    "rsquo;": 8217,
                    "sbquo;": 8218,
                    "ldquo;": 8220,
                    "rdquo;": 8221,
                    "bdquo;": 8222,
                    "dagger;": 8224,
                    "Dagger;": 8225,
                    "bull;": 8226,
                    "hellip;": 8230,
                    "permil;": 8240,
                    "prime;": 8242,
                    "Prime;": 8243,
                    "lsaquo;": 8249,
                    "rsaquo;": 8250,
                    "oline;": 8254,
                    "frasl;": 8260,
                    "euro;": 8364,
                    "image;": 8465,
                    "weierp;": 8472,
                    "real;": 8476,
                    "trade;": 8482,
                    "alefsym;": 8501,
                    "larr;": 8592,
                    "uarr;": 8593,
                    "rarr;": 8594,
                    "darr;": 8595,
                    "harr;": 8596,
                    "crarr;": 8629,
                    "lArr;": 8656,
                    "uArr;": 8657,
                    "rArr;": 8658,
                    "dArr;": 8659,
                    "hArr;": 8660,
                    "forall;": 8704,
                    "part;": 8706,
                    "exist;": 8707,
                    "empty;": 8709,
                    "nabla;": 8711,
                    "isin;": 8712,
                    "notin;": 8713,
                    "ni;": 8715,
                    "prod;": 8719,
                    "sum;": 8721,
                    "minus;": 8722,
                    "lowast;": 8727,
                    "radic;": 8730,
                    "prop;": 8733,
                    "infin;": 8734,
                    "ang;": 8736,
                    "and;": 8743,
                    "or;": 8744,
                    "cap;": 8745,
                    "cup;": 8746,
                    "int;": 8747,
                    "there4;": 8756,
                    "sim;": 8764,
                    "cong;": 8773,
                    "asymp;": 8776,
                    "ne;": 8800,
                    "equiv;": 8801,
                    "le;": 8804,
                    "ge;": 8805,
                    "sub;": 8834,
                    "sup;": 8835,
                    "nsub;": 8836,
                    "sube;": 8838,
                    "supe;": 8839,
                    "oplus;": 8853,
                    "otimes;": 8855,
                    "perp;": 8869,
                    "sdot;": 8901,
                    "lceil;": 8968,
                    "rceil;": 8969,
                    "lfloor;": 8970,
                    "rfloor;": 8971,
                    "lang;": 9001,
                    "rang;": 9002,
                    "loz;": 9674,
                    "spades;": 9824,
                    "clubs;": 9827,
                    "hearts;": 9829,
                    "diams;": 9830
                }
            }.call(this)
        }, {
            "./_count": 43,
            "./_splitLeft": 44,
            "./_splitRight": 45
        }
    ],
    47: [
        function(require, module, exports) {
            function E() {}
            E.prototype = {
                on: function(name, callback, ctx) {
                    var e = this.e || (this.e = {});
                    return (e[name] || (e[name] = [])).push({
                        fn: callback,
                        ctx: ctx
                    }), this
                },
                once: function(name, callback, ctx) {
                    function listener() {
                        self.off(name, listener), callback.apply(ctx, arguments)
                    }
                    var self = this;
                    return listener._ = callback, this.on(name, listener, ctx)
                },
                emit: function(name) {
                    var data = [].slice.call(arguments, 1),
                        evtArr = ((this.e || (this.e = {}))[name] || []).slice(),
                        i = 0,
                        len = evtArr.length;
                    for (i; i < len; i++) evtArr[i].fn.apply(evtArr[i].ctx, data);
                    return this
                },
                off: function(name, callback) {
                    var e = this.e || (this.e = {}),
                        evts = e[name],
                        liveEvents = [];
                    if (evts && callback)
                        for (var i = 0, len = evts.length; i < len; i++) evts[i].fn !== callback && evts[i].fn._ !== callback && liveEvents.push(evts[i]);
                    return liveEvents.length ? e[name] = liveEvents : delete e[name], this
                }
            }, module.exports = E
        }, {}
    ],
    48: [
        function(require, module, exports) {
            "use strict";

            function Analytics() {
                var self = this,
                    is_started = !1,
                    loaded_func_list = [],
                    profile_id = GA_PROFILE_ID,
                    customvars = null,
                    define_map = {
                        plan: "dimension1",
                        device: "dimension2",
                        lang: "dimension3",
                        fbconnect: "dimension4",
                        gnum: "dimension5",
                        cnum: "dimension6",
                        useday: "dimension7",
                        usestorage: "dimension8",
                        tnum: "dimension9",
                        pnum: "dimension10",
                        dhash: "dimension11"
                    };
                self.start = function(cvars) {
                    if (!is_started) {
                        is_started = !0, customvars = cvars,
                        function(i, s, o, g, r) {
                            i.GoogleAnalyticsObject = r, i[r] = i[r] || function() {
                                for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i];
                                (i[r].q = i[r].q || []).push(args)
                            }, i[r].l = Number(new Date);
                            var a = s.createElement(o),
                                m = s.getElementsByTagName(o)[0];
                            a.async = 1, a.src = g, m.parentNode.insertBefore(a, m)
                        }(window, document, "script", "//www.google-analytics.com/analytics.js", "ga"), ga("create", profile_id, "auto"), ga("require", "displayfeatures"), self.trackPageView();
                        for (var i = 0, len = loaded_func_list.length; i < len; i++) loaded_func_list[i]();
                        return loaded_func_list = [], self
                    }
                }, self.trackPageView = function() {
                    if (!is_started) return loaded_func_list.push(function() {
                        self.trackPageView()
                    }), !1;
                    for (var key in define_map) define_map.hasOwnProperty(key) && "undefined" != typeof customvars[key] && ga("set", define_map[key], customvars[key]);
                    ga("send", "pageview", {
                        title: ""
                    })
                }, self.trackEvent = function(category, action, options) {
                    void 0 === options && (options = {});
                    var label = options.label || "",
                        value = options.value || "";
                    return is_started ? (ga("send", "event", {
                        eventCategory: category,
                        eventAction: action,
                        eventLabel: label,
                        eventValue: value,
                        title: ""
                    }), self.sendToTresureData(label, options), self) : (loaded_func_list.push(function() {
                        self.trackEvent(category, action, options)
                    }), !1)
                }, self.trackException = function(params) {
                    return is_started ? void ga("send", "exception", {
                        exDescription: params.name,
                        exFatal: !0,
                        exMessage: params.message
                    }) : (loaded_func_list.push(function() {
                        self.trackException(params)
                    }), !1)
                }, self.sendToTresureData = function(label, options) {
                    var time = options.time,
                        before_room_id = options.before_room_id,
                        after_room_id = options.after_room_id,
                        event = {
                            cw_event: label
                        };
                    "undefined" != typeof time && (event.cw_event_time = time), "undefined" != typeof before_room_id && (event.change_room_before_room_id = before_room_id), "undefined" != typeof after_room_id && (event.change_room_after_room_id = after_room_id), window.TDIM && label && TDIM.trackEvent(event)
                }
            }
            exports.Analytics = Analytics
        }, {}
    ],
    49: [
        function(require, module, exports) {
            "use strict";

            function LocalStorage() {
                var self = this;
                self.isEnabledCache = null
            }
            exports.LocalStorage = LocalStorage,
            function() {
                LocalStorage.prototype = {
                    isEnabled: function() {
                        if (null !== this.isEnabledCache) return this.isEnabledCache;
                        try {
                            var enabled = Boolean(window.localStorage);
                            return this.isEnabledCache = enabled, enabled
                        } catch (e) {
                            return this.isEnabledCache = !1, !1
                        }
                    },
                    setItem: function(key, value) {
                        this.isEnabled() && window.localStorage.setItem(key, value)
                    },
                    getItem: function(key) {
                        if (this.isEnabled()) return window.localStorage.getItem(key)
                    },
                    removeItem: function(key) {
                        this.isEnabled() && window.localStorage.removeItem(key)
                    }
                }
            }()
        }, {}
    ],
    50: [
        function(require, module, exports) {
            /*!
             * @preserve
             *
             * JavaScript MD5 1.0.1
             * https://github.com/blueimp/JavaScript-MD5
             *
             * Copyright 2011, Sebastian Tschan
             * https://blueimp.net
             *
             * Licensed under the MIT license:
             * http://www.opensource.org/licenses/MIT
             *
             * Based on
             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
             * Digest Algorithm, as defined in RFC 1321.
             * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             * Distributed under the BSD License
             * See http://pajhome.org.uk/crypt/md5 for more info.
             */
            "use strict";

            function escape_html(str) {
                return str && str.replace ? (str = str.replace(/&/g, "&amp;"), str = str.replace(/"/g, "&quot;"), str = str.replace(/'/g, "&#039;"), str = str.replace(/</g, "&lt;"), str = str.replace(/>/g, "&gt;")) : str
            }

            function unescape_html(str) {
                return str && str.replace ? (str = str.replace(/&quot;/g, '"'), str = str.replace(/&#039;/g, "'"), str = str.replace(/&lt;/g, "<"), str = str.replace(/&gt;/g, ">"), str = str.replace(/&amp;/g, "&")) : str
            }

            function bytename(size, decimals) {
                if (void 0 === decimals && (decimals = 2), 0 === size) return "0 B";
                var k = 1024,
                    i = Math.floor(Math.log(size) / Math.log(k)),
                    result = parseFloat((size / Math.pow(k, i)).toFixed(decimals));
                return result.toLocaleString() + " " + BYTE_SIZES[i]
            }

            function bytenameWithUnit(size, unit, decimals) {
                if (void 0 === unit && (unit = "GB"), void 0 === decimals && (decimals = 2), 0 === size) return "0 B";
                var k = 1024,
                    i = BYTE_SIZES.indexOf(unit),
                    result = parseFloat((size / Math.pow(k, i)).toFixed(decimals));
                return result.toLocaleString() + " " + unit
            }

            function strtotime_format(datestr, dateformat) {
                var match_list = dateformat.match(/(Y|m|d)/g),
                    dfreg = new RegExp(datestr.replace(/[0-9]+/g, "([0-9]+)"), "g"),
                    match = dfreg.exec(datestr),
                    parsed = {};
                return parsed[match_list[0]] = parseInt(match[1], 10), parsed[match_list[1]] = parseInt(match[2], 10), parsed[match_list[2]] = parseInt(match[3], 10), Math.floor(new Date(parsed.Y, parsed.m - 1, parsed.d).getTime() / 1e3)
            }

            function is_this_year(time) {
                var date = new Date;
                return date.setTime(1e3 * time), date.getFullYear() === (new Date).getFullYear()
            }

            function urlencode(str) {
                return encodeURIComponent(str).replace(/[!'\(\)\*]/g, function(s) {
                    return "%" + s.charCodeAt(0).toString(16).toUpperCase()
                }).replace(/%20/g, "+")
            }

            function urldecode(str) {
                return decodeURIComponent(str.replace(/\+/g, "%20"))
            }

            function time() {
                return Math.floor(Date.now() / 1e3)
            }

            function ucfirst(str) {
                return str.charAt(0).toUpperCase() + str.substr(1)
            }
            exports.escape_html = escape_html, window.escape_html = escape_html, exports.unescape_html = unescape_html;
            var BYTE_SIZES = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
            exports.bytename = bytename, exports.bytenameWithUnit = bytenameWithUnit, exports.strtotime_format = strtotime_format, exports.is_this_year = is_this_year, exports.urlencode = urlencode, exports.urldecode = urldecode, exports.time = time, exports.ucfirst = ucfirst
        }, {}
    ],
    51: [
        function(require, module, exports) {
            "use strict";

            function Account(myid) {
                var self = this;
                self.myid = parseInt(myid, 10), self.account_dat = {}, self.unknown_flag = {}, self.contact_list = [], self.contact_flag = {}, self.myrequest_dat = {}, self.request_dat = {}, self.facebook_app_id = "", self.prepare = function() {
                    boot_1.use_local_comet ? self.facebook_app_id = "194987520565581" : self.facebook_app_id = "270897682951829", self.view = new AccountView_1.AccountView(self), self.view.prepare()
                }, self.setName = function(id, name) {
                    self.setParam(id, "nm", name)
                }, self.setOrgName = function(id, name) {
                    self.setParam(id, "onm", name)
                }, self.setDepartment = function(id, department) {
                    self.setParam(id, "dp", department)
                }, self.setTitle = function(id, title) {
                    self.setParam(id, "tt", title)
                }, self.setChatWorkId = function(id, cwid) {
                    self.setParam(id, "cwid", cwid)
                }, self.setGroupId = function(id, gid) {
                    self.setParam(id, "gid", gid)
                }, self.setAvatarId = function(id, avatar_id) {
                    self.setParam(id, "av", avatar_id)
                }, self.setCoverId = function(id, cover_id) {
                    self.setParam(id, "cv", cover_id)
                }, self.setRoomId = function(id, room_id) {
                    self.setParam(id, "rid", parseInt(room_id, 10))
                }, self.setNickName = function(id, nickname) {
                    self.setParam(id, "nn", nickname)
                }, self.setMentionNum = function(id, mention_num) {
                    self.setParam(id, "mn", mention_num)
                }, self.setSkype = function(id, skype_id) {
                    self.setParam(id, "sp", skype_id)
                }, self.setTwitter = function(id, twitter_id) {
                    self.setParam(id, "tw", twitter_id)
                }, self.setFacebook = function(id, facebook) {
                    self.setParam(id, "fb", facebook)
                }, self.setUrl = function(id, url) {
                    self.setParam(id, "url", url)
                }, self.setAddress = function(id, address) {
                    self.setParam(id, "ad", address)
                }, self.setIntroduction = function(id, introduction) {
                    self.setParam(id, "intro", introduction)
                }, self.setEmail = function(id, email) {
                    self.setParam(id, "mail", email)
                }, self.setOrgTel = function(id, tel_organization) {
                    self.setParam(id, "otel", tel_organization)
                }, self.setExtensionTel = function(id, tel_extension) {
                    self.setParam(id, "etel", tel_extension)
                }, self.setMobileTel = function(id, tel_mobile) {
                    self.setParam(id, "mtel", tel_mobile)
                }, self.setUndisclosed = function(id, is_undisclosed) {
                    self.setParam(id, "ud", is_undisclosed)
                }, self.setRequestMessage = function(id, message) {
                    self.setParam(id, "requestMessage", message)
                }, self.setDeleted = function(id, is_deleted) {
                    self.setParam(id, "is_deleted", is_deleted)
                }, self.setParam = function(id, key, val) {
                    id = parseInt(id, 10), void 0 == self.account_dat[id] ? (self.account_dat[id] = {}, self.account_dat[id][key] = val) : self.account_dat[id][key] = val
                }, self.getName = function(id) {
                    var name = self.getParam(id, "nm", !1);
                    if (name === !1) self.unknown_flag[id] = !0, name = "Loading... ";
                    else if ("" == name) return L.deleted_user;
                    return name
                }, self.getOrgName = function(id) {
                    return self.getParam(id, "onm", "")
                }, self.getDepartment = function(id) {
                    return self.getParam(id, "dp", "")
                }, self.getTitle = function(id) {
                    return self.getParam(id, "tt", "")
                }, self.getFullName = function(id) {
                    var orgname = self.getOrgName(id);
                    return orgname && (orgname += " "), orgname + self.getName(id)
                }, self.getOrgTitle = function(id) {
                    var orgname = self.getOrgName(id);
                    return orgname && (orgname += " "), orgname + self.getDepartment(id)
                }, self.getChatWorkId = function(id) {
                    return self.getParam(id, "cwid", "")
                }, self.getGroupId = function(id) {
                    return self.getParam(id, "gid", 0)
                }, self.getNickName = function(id, nickname_only) {
                    if (nickname_only) return self.getParam(id, "nn", "");
                    var nn = self.getParam(id, "nn", "");
                    return "" === nn ? L.nickname_prefix + boot_1.AC.getName(id) + L.nickname_suffix : nn
                }, self.getDefaultNickName = function(id) {
                    return L.nickname_prefix + boot_1.AC.getName(id) + L.nickname_suffix
                }, self.getMentionNum = function(id) {
                    return self.getParam(id, "mn", 0)
                };
                var avatar_default_map = ["blue", "green", "orange", "red", "violet", "yellow"];
                self.getAvatarId = function(id) {
                    var avatar_id = self.getParam(id, "av", "0/.");
                    if ("0/." == avatar_id)
                        if (self.isDeleted(id)) avatar_id = "ico_avatar_notfound.png";
                        else {
                            var idx = id % avatar_default_map.length;
                            avatar_id = "ico_default_" + avatar_default_map[idx] + ".png"
                        }
                    return avatar_id
                }, self.getCoverId = function(id) {
                    var cover_default_map = ["block_pattern", "check_blue", "flower_blue", "flower_pink", "leaf", "light", "mizutama", "party", "retro", "square", "zebra"],
                        cover_id = self.getParam(id, "cv", "0/.");
                    if ("0/." == cover_id)
                        if (self.isDeleted(id)) cover_id = "not_found.jpg";
                        else {
                            var idx = id % cover_default_map.length;
                            cover_id = cover_default_map[idx] + ".jpg"
                        }
                    return cover_id
                }, self.getSkype = function(id) {
                    return self.getParam(id, "sp", "")
                }, self.getTwitter = function(id) {
                    return self.getParam(id, "tw", "")
                }, self.getFacebook = function(id) {
                    return self.getParam(id, "fb", "")
                }, self.getUrl = function(id) {
                    return self.getParam(id, "url", "")
                }, self.getAddress = function(id) {
                    return self.getParam(id, "ad", "")
                }, self.getIntroduction = function(id) {
                    return self.getParam(id, "intro", "")
                }, self.getEmail = function(id) {
                    return self.getParam(id, "mail", "")
                }, self.getOrgTel = function(id) {
                    return self.getParam(id, "otel", "")
                }, self.getExtensionTel = function(id) {
                    return self.getParam(id, "etel", "")
                }, self.getMobileTel = function(id) {
                    return self.getParam(id, "mtel", "")
                }, self.getOrgNamePriv = function(id) {
                    return self.getParam(id, "onm_priv", "")
                }, self.getDepartmentPriv = function(id) {
                    return self.getParam(id, "dp_priv", "")
                }, self.getTitlePriv = function(id) {
                    return self.getParam(id, "tt_priv", "")
                }, self.getAvatarPriv = function(id) {
                    return self.getParam(id, "av_priv", "")
                }, self.getCoverPriv = function(id) {
                    return self.getParam(id, "cv_priv", "")
                }, self.getSkypePriv = function(id) {
                    return self.getParam(id, "sp_priv", "")
                }, self.getTwitterPriv = function(id) {
                    return self.getParam(id, "tw_priv", "")
                }, self.getFacebookPriv = function(id) {
                    return self.getParam(id, "fb_priv", "")
                }, self.getUrlPriv = function(id) {
                    return self.getParam(id, "url_priv", "")
                }, self.getAddressPriv = function(id) {
                    return self.getParam(id, "ad_priv", "")
                }, self.getIntroductionPriv = function(id) {
                    return self.getParam(id, "intro_priv", "")
                }, self.getEmailPriv = function(id) {
                    return self.getParam(id, "mail_priv", "")
                }, self.getOrgTelPriv = function(id) {
                    return self.getParam(id, "otel_priv", "")
                }, self.getExtensionTelPriv = function(id) {
                    return self.getParam(id, "etel_priv", "")
                }, self.getMobileTelPriv = function(id) {
                    return self.getParam(id, "mtel_priv", "")
                }, self.isUndisclosed = function(id) {
                    return self.getParam(id, "ud", 0)
                }, self.getParam = function(id, key, def_val) {
                    return void 0 != id && (id = parseInt(id, 10), void 0 != self.account_dat[id] && void 0 != self.account_dat[id][key] ? self.account_dat[id][key] : def_val)
                }, self.getSortedMemberList = function() {
                    var mem_list = [];
                    for (var aid in self.account_dat) 0 == aid || aid == boot_1.AC.myid || boot_1.AC.isDeleted(aid) || mem_list.push(aid);
                    return mem_list.sort(function(a, b) {
                        return self.isContact(a) ? self.isContact(b) ? boot_1.AC.getMentionNum(b) - boot_1.AC.getMentionNum(a) : -1 : self.isContact(b) ? 1 : boot_1.AC.getMentionNum(b) - boot_1.AC.getMentionNum(a)
                    }), mem_list
                }, self.isContact = function(id) {
                    return id = parseInt(id, 10), !! self.contact_flag[id]
                }, self.client_addContact = function(aid_list) {
                    for (var aid, refresh_aid_list = [], i = 0; i < aid_list.length; i++) aid = parseInt(aid_list[i], 10), refresh_aid_list.push(aid), self.account_dat[aid] = void 0, self.isContact(aid) || (self.contact_list.push(aid), self.contact_flag[aid] = !0, void 0 != self.myrequest_dat && void 0 != self.myrequest_dat[aid] && delete self.myrequest_dat[aid], void 0 != self.request_dat && void 0 != self.request_dat[aid] && delete self.request_dat[aid]);
                    refresh_aid_list.length > 0 && self.refreshAccount(refresh_aid_list, !0, function() {
                        self.buildMyContact()
                    })
                }, self.client_deleteContact = function(aid_list) {
                    for (var aid, refresh_aid_list = [], i = 0; i < aid_list.length; i++)
                        if (aid = parseInt(aid_list[i], 10), self.isContact(aid)) {
                            for (var j = 0; j < self.contact_list.length; j++)
                                if (self.contact_list[j] == aid) {
                                    self.contact_list.splice(j, 1);
                                    break
                                }
                            delete self.contact_flag[aid], self.account_dat[aid] = void 0, refresh_aid_list.push(aid)
                        }
                    refresh_aid_list.length > 0 && self.refreshAccount(refresh_aid_list, !1, function() {
                        self.buildMyContact()
                    })
                }, self.getRequestMessage = function(id) {
                    return self.getParam(id, "requestMessage", null)
                }, self.isDeleted = function(id) {
                    var is_deleted = self.getParam(id, "is_deleted", null);
                    if (null !== is_deleted) return is_deleted;
                    var legacyLogic = function() {
                        var name = self.getParam(id, "nm", !1);
                        return "" == name
                    };
                    return legacyLogic()
                }, self.getRoomId = function(id) {
                    return id = parseInt(id, 10), void 0 != self.account_dat[id] && void 0 != self.account_dat[id].rid ? self.account_dat[id].rid : 0
                }, self.hasUnknown = function() {
                    for (var aid in self.unknown_flag) {
                        if (self.isUnknown(aid)) return !0;
                        delete self.unknown_flag[aid]
                    }
                    return !1
                }, self.isUnknown = function(aid) {
                    return void 0 == self.account_dat[aid] || void 0 == self.account_dat[aid].nm
                };
                var loaded_flag = {};
                self.getUnknown = function(callback) {
                    var unknown_list = [];
                    for (var aid in self.unknown_flag) self.isUnknown(aid) ? void 0 == loaded_flag[aid] && (unknown_list.push(parseInt(aid, 10)), loaded_flag[aid] = !0) : delete self.unknown_flag[aid];
                    unknown_list.length > 0 ? self.refreshAccount(unknown_list, !1, callback) : "function" == typeof callback && callback()
                }, self.refreshAccount = function(aid_list, get_private_data, callback) {
                    if (aid_list.length > 0) {
                        get_private_data = get_private_data ? 1 : 0;
                        var result_account_dat = {}, _aid_list = Array.prototype.concat(aid_list),
                            get_account_info = function(_aid_list) {
                                var list = _aid_list.splice(0, 5e3);
                                boot_1.CW.post("gateway.php", {
                                    cmd: "get_account_info",
                                    aid: list,
                                    get_private_data: get_private_data
                                }, function(json) {
                                    for (var aid in json.account_dat) self.setAccountDat(aid, json.account_dat[aid]), result_account_dat[aid] = json.account_dat[aid];
                                    return _aid_list.length ? get_account_info(_aid_list) : (self.unknown_flag = {}, "function" == typeof callback && callback(result_account_dat), self.view.updateAvatar(aid_list), self.view.updateCover(aid_list), self.view.updateName(aid_list), void(boot_1.CW.is_business ? self.refreshInternal() : boot_1.RL.build()))
                                })
                            };
                        get_account_info(_aid_list)
                    }
                }, self.refreshAccountDetailData = function(account_id, get_priv_setting, callback) {
                    boot_1.CW.post("gateway.php", {
                        cmd: "get_detail_account_info",
                        aid: account_id,
                        get_priv_setting: get_priv_setting
                    }, function(json) {
                        json.account_dat && self.setAccountDat(account_id, json.account_dat, !0), "function" == typeof callback && callback()
                    })
                },
                function() {
                    var detail_data_flag = {}, function_map = {
                            nm: self.setName,
                            name: self.setName,
                            onm: self.setOrgName,
                            orgname: self.setOrgName,
                            dp: self.setDepartment,
                            tt: self.setTitle,
                            av: self.setAvatarId,
                            avid: self.setAvatarId,
                            cv: self.setCoverId,
                            gid: self.setGroupId,
                            rid: self.setRoomId,
                            tw: self.setTwitter,
                            fb: self.setFacebook,
                            sp: self.setSkype,
                            cwid: self.setChatWorkId,
                            ad: self.setAddress,
                            url: self.setUrl,
                            intro: self.setIntroduction,
                            mail: self.setEmail,
                            otel: self.setOrgTel,
                            etel: self.setExtensionTel,
                            mtel: self.setMobileTel,
                            ud: self.setUndisclosed,
                            mg: self.setRequestMessage,
                            is_deleted: self.setDeleted
                        };
                    self.setAccountDat = function(aid, account_dat, is_detail) {
                        var priv_key = "";
                        for (var key in function_map) void 0 != account_dat[key] && (function_map[key](aid, account_dat[key]), priv_key = key + "_priv", void 0 != account_dat[priv_key] && self.setParam(aid, priv_key, account_dat[priv_key]));
                        is_detail ? detail_data_flag[aid] = !0 : detail_data_flag[aid] = !1
                    }, self.hasDetailData = function(aid) {
                        return !!detail_data_flag[aid]
                    }
                }(), self.refreshMentionInfo = function(aid_list) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_mention_info",
                        a: aid_list
                    }, function(json) {
                        for (var aid in json.mention_dat) self.setNickName(aid, json.mention_dat[aid].nn), self.setMentionNum(aid, json.mention_dat[aid].mn);
                        for (var room_id in boot_1.RL.rooms) {
                            var room = boot_1.RL.rooms[room_id];
                            null != room.sorted_member_list && (room.sorted_member_list = null)
                        }
                    })
                }, self.refreshContactList = function() {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_contact_list"
                    }, function(json) {
                        self.updateContactList(json.contact_dat, json.mention_dat, json.myrequest_dat, json.request_dat)
                    })
                }, self.updateContactList = function(contact_dat, mention_dat, myrequest_dat, request_dat) {
                    for (var deleted_contact_flag = {}, current_contact_flag = {}, added_contact_list = [], i = 0; i < self.contact_list.length; i++) deleted_contact_flag[self.contact_list[i]] = !0, current_contact_flag[self.contact_list[i]] = !0;
                    self.contact_list = [], self.contact_flag = {}, self.setName(0, "ChatWork");
                    var aid;
                    for (aid in self.account_dat) self.setRoomId(aid, 0);
                    for (aid in contact_dat) aid = parseInt(aid, 10), self.contact_flag[aid] = !0, boot_1.CW.registerAvatar(aid), self.contact_list.push(aid), self.setAccountDat(aid, contact_dat[aid]), delete deleted_contact_flag[aid], current_contact_flag[aid] || added_contact_list.push(aid);
                    added_contact_list && (self.view.updateAvatar(added_contact_list), self.view.updateName(added_contact_list));
                    for (aid in mention_dat) self.setNickName(aid, mention_dat[aid].nn), self.setMentionNum(aid, mention_dat[aid].mn);
                    for (aid in myrequest_dat) self.setAccountDat(aid, myrequest_dat[aid]);
                    self.myrequest_dat = myrequest_dat;
                    var requested_aid_list = [];
                    for (aid in request_dat) self.setAccountDat(aid, request_dat[aid]), boot_1.CW.init_loaded && !self.request_dat[aid] && requested_aid_list.push(aid);
                    if (requested_aid_list && (self.view.updateAvatar(requested_aid_list), self.view.updateName(requested_aid_list)), boot_1.CW.init_loaded) {
                        var refresh_aid_list = [];
                        for (aid in self.request_dat) request_dat[aid] || contact_dat[aid] || (self.account_dat[aid] = void 0, refresh_aid_list.push(aid));
                        for (aid in deleted_contact_flag) self.account_dat[aid] = void 0, refresh_aid_list.push(aid);
                        refresh_aid_list.length > 0 && self.refreshAccount(refresh_aid_list)
                    }
                    self.request_dat = request_dat, self.refreshInternal(), self.buildMyStatus(), self.buildMyContact()
                }, self.showChatWorkIdRequestDialog = function(account_dat) {
                    self.view.showChatWorkIdRequestDialog(account_dat)
                }, self.refreshInternal = function() {
                    if (boot_1.CW.is_business) {
                        var has_room = !1;
                        for (var room_id in boot_1.RL.rooms) has_room = !0, boot_1.RL.rooms[room_id].is_internal = -1;
                        has_room && boot_1.RL.build()
                    }
                }, self.buildMyStatus = function() {
                    self.view.buildMyStatus()
                }, self.buildMyContact = function() {
                    self.view.buildMyContact()
                }, self.isMatchedWithKeyList = function(keyword_list, aid) {
                    var name = self.getSearchKeys(aid).join(" ");
                    return boot_1.CW.isMatchedWithKeyList(keyword_list, name)
                }, self.getContactNum = function() {
                    return this.contact_list.length - 1
                }, self.getSearchKeys = function(id) {
                    return [boot_1.AC.getName(id), boot_1.AC.getNickName(id, !0), boot_1.AC.getOrgName(id), boot_1.AC.getDepartment(id), boot_1.AC.getChatWorkId(id)]
                }
            }
            var AccountView_1 = require("../../web-new/view/AccountView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.Account = Account
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/AccountView": 130
        }
    ],
    52: [
        function(require, module, exports) {
            "use strict";

            function ChatSend() {
                var self = this;
                self.prepare = function() {
                    self.view = new ChatSendView_1.ChatSendView(self), self.view.prepare()
                }, self.initChatText = function() {
                    self.view.initChatText()
                }, self.setChatEdit = function(chat_id, room) {
                    self.view.setChatEdit(chat_id, room)
                }, self.setChatEditColor = function(chat_id) {
                    self.view.setChatEditColor(chat_id)
                }, self.clearChatEdit = function(chat_id) {
                    self.view.clearChatEdit(chat_id)
                }, self.prepareUploadForm = function(room_id) {
                    self.view.prepareUploadForm(room_id)
                }, self.convertMessageIdToInt = function(chat_list) {
                    return chat_list.map(function(message) {
                        return message.id = parseInt(message.id, 10), message
                    })
                }, self.sendMessage = function(room_id, text, option, success_callback, error_callback) {
                    var read, edit_id;
                    void 0 == option && (option = {}), read = void 0 == option.read || option.read ? 1 : 0, edit_id = option.edit_id ? option.edit_id : 0, boot_1.CW.post("gateway.php", {
                        cmd: "send_chat",
                        text: text,
                        room_id: room_id,
                        read: read,
                        edit_id: edit_id
                    }, function(json) {
                        void 0 != json.storage && void 0 != json.storage_limit && boot_1.FL.updateStorageInfo(json.storage, json.storage_limit, json.storage_limit_time, json.is_storage_limit), edit_id && boot_1.CW.watch(), "function" == typeof success_callback && success_callback(json)
                    }, function(error, json) {
                        json && json.is_storage_limit ? boot_1.CW.showStorageLimitDialog("message") : (json.chat_list && (json.chat_list = self.convertMessageIdToInt(json.chat_list)), "function" == typeof error_callback && error_callback(error, json))
                    })
                }, self.sendChat = function(room_id, text, last_chat_id, option, success_callback, error_callback) {
                    return self.sendMessage(room_id, text, option, success_callback, error_callback)
                }, self.deleteChat = function(chat_id, room_id, success_callback, error_callback) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "delete_chat",
                        chat_id: chat_id,
                        room_id: room_id
                    }, function(json) {
                        "function" == typeof success_callback && success_callback(json), boot_1.CW.watch()
                    }, function(message) {
                        "function" == typeof error_callback ? error_callback(message) : boot_1.CW.alert(message)
                    })
                }, self.sendTask = function(room_id, text, task_limit, assign_list, success_callback, error_callback) {
                    task_limit ? task_limit.toString().match(/^[0-9]+$/) || (task_limit = common_1.strtotime_format(task_limit, boot_1.ST.data.dateformat)) : task_limit = 0, boot_1.CW.post("gateway.php", {
                        cmd: "add_task",
                        task: text,
                        task_limit: task_limit,
                        assign: assign_list,
                        room_id: room_id
                    }, function(json) {
                        success_callback(json), boot_1.CW.watch()
                    }, function(error) {
                        error_callback(error)
                    })
                }, self.editTask = function(task_id, assign_to, text, task_limit, success_callback, error_callback) {
                    task_limit ? task_limit.match(/^[0-9]+$/) || (task_limit = common_1.strtotime_format(task_limit, boot_1.ST.data.dateformat)) : task_limit = 0, boot_1.CW.post("gateway.php", {
                        cmd: "edit_task",
                        aid: assign_to,
                        task_id: task_id,
                        task: text,
                        task_limit: task_limit
                    }, function(json) {
                        "function" == typeof success_callback && success_callback(json), boot_1.CW.watch()
                    }, function(error) {
                        "function" == typeof error_callback && error_callback(error)
                    })
                }, self.convertToSend = function(text) {
                    return text = text.replace(new RegExp("\\[" + L.chatsend_quote + " aid=", "g"), "[qt][qtmeta aid="), text = text.replace(new RegExp("\\[/" + L.chatsend_quote + "\\]", "g"), "[/qt]"), text = text.replace(new RegExp("\\[" + L.chatsend_reply + " aid=", "g"), "[rp aid=")
                }, self.convertToEdit = function(text) {
                    text = text.replace(/\[qt\]\[qtmeta aid=/g, "[" + L.chatsend_quote + " aid="), text = text.replace(/\[\/qt\]/g, "[/" + L.chatsend_quote + "]"), text = text.replace(/\[rp aid=/g, "[" + L.chatsend_reply + " aid=");
                    var dtext_list = text.match(/\[dtext:\w+\]/g);
                    if (dtext_list)
                        for (var i = 0; i < dtext_list.length; i++) {
                            var match = dtext_list[i].match(/\[dtext:(\w+)\]/),
                                dtext_type = match[1];
                            L.hasOwnProperty(dtext_type) && "string" == typeof L[dtext_type] && (text = text.replace("[dtext:" + dtext_type + "]", L[dtext_type]))
                        }
                    return text
                }, self.setChatDraft = function(room_id, text, edit_id) {
                    var key = this.getDraftMessageKey(room_id),
                        draft = {
                            edit_id: edit_id,
                            text: text
                        };
                    boot_1.CW.localStorage.setItem(key, JSON.stringify(draft))
                }, self.setTaskDraft = function(room_id, task_name, assign_list, limit_date) {
                    var key = this.getDraftTaskKey(room_id),
                        draft = {
                            task_name: task_name,
                            assign_list: assign_list,
                            limit_date: limit_date
                        };
                    boot_1.CW.localStorage.setItem(key, JSON.stringify(draft))
                }, self.getChatDraft = function(room_id) {
                    var key = this.getDraftMessageKey(room_id),
                        draft = boot_1.CW.localStorage.getItem(key);
                    return draft ? (this.deleteChatDraft(room_id), JSON.parse(draft)) : {
                        edit_id: 0,
                        text: ""
                    }
                }, self.getTaskDraft = function(room_id) {
                    var key = this.getDraftTaskKey(room_id),
                        draft = boot_1.CW.localStorage.getItem(key);
                    return draft ? (this.deleteTaskDraft(room_id), JSON.parse(draft)) : {
                        task_name: "",
                        task_mode: "",
                        assign_list: [],
                        limit_date: ""
                    }
                }, self.deleteChatDraft = function(room_id) {
                    var key = this.getDraftMessageKey(room_id);
                    boot_1.CW.localStorage.removeItem(key)
                }, self.deleteTaskDraft = function(room_id) {
                    var key = this.getDraftTaskKey(room_id);
                    boot_1.CW.localStorage.removeItem(key)
                }, self.getDraftMessageKey = function(room_id) {
                    return "draft_message_" + boot_1.AC.myid + "_" + room_id
                }, self.getDraftTaskKey = function(room_id) {
                    return "draft_task_" + boot_1.AC.myid + "_" + room_id
                }, self.getTaskAssignList = function() {
                    return self.view.getTaskAssignList()
                }, self.setTaskAssign = function(assign_list) {
                    self.view.setTaskAssign(assign_list)
                }, self.clearTaskAssign = function() {
                    self.view.clearTaskAssign()
                }
            }
            var ChatSendView_1 = require("../../web-new/view/ChatSendView"),
                common_1 = require("../lib/common"),
                boot_1 = require("../../web-new/controller/boot");
            exports.ChatSend = ChatSend
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/ChatSendView": 131,
            "../lib/common": 50
        }
    ],
    53: [
        function(require, module, exports) {
            "use strict";

            function ChatWork(client_ver) {
                var self = this,
                    is_online = !0,
                    is_login = !0;
                self.version = client_ver, self.api_version = 5, self.announce_id = void 0, self.is_first_load = !0, self.init_loaded = !1, self.stop_watching = !1, self.watching = !1, self.watch_timer = null, self.online_status_timer = null, self.delay = 1e3, self.last_id = 0, self.enable_popup = !1, self.last_timeline_buildkey = "", self.last_tasklist_buildkey = "", self.last_filelist_buildkey = "";
                var ajax_timeout = 3e5;
                self.ajax_cmd_count = {}, self.error_count = 0, self.reg_cmp = [], self.plan = "", self.is_business = !1, self.is_admin = !1, self.is_admin_user = !1, self.is_security = !1, self.is_enterprise = !1, self.available_biwa = !1, self.switch_biwa = !1, self.first_biwa = !1, self.security_dat = {};
                var account_server_cmd = {};
                self.emoticon = [], self.secret_emoticon = [], self.prepare = function() {
                    self.emoticon = [{
                        title: L.emoticon_smile,
                        key: ":)",
                        regex: /:\)/g,
                        src: "emo_smile.gif"
                    }, {
                        title: L.emoticon_sad,
                        key: ":(",
                        regex: /:\(/g,
                        src: "emo_sad.gif"
                    }, {
                        title: L.emoticon_more_smile,
                        key: ":D",
                        regex: /:D/g,
                        src: "emo_more_smile.gif"
                    }, {
                        title: L.emoticon_lucky,
                        key: "8-)",
                        regex: /8-\)/g,
                        src: "emo_lucky.gif"
                    }, {
                        title: L.emoticon_surprise,
                        key: ":o",
                        regex: /:o/g,
                        src: "emo_surprise.gif"
                    }, {
                        title: L.emoticon_wink,
                        key: ";)",
                        regex: /;\)/g,
                        src: "emo_wink.gif"
                    }, {
                        title: L.emoticon_tears,
                        key: ";(",
                        regex: /;\(/g,
                        src: "emo_tears.gif"
                    }, {
                        title: L.emoticon_sweat,
                        key: "(sweat)",
                        regex: /\(sweat\)/g,
                        src: "emo_sweat.gif"
                    }, {
                        title: L.emoticon_mumu,
                        key: ":|",
                        regex: /:\|/g,
                        src: "emo_mumu.gif"
                    }, {
                        title: L.emoticon_kiss,
                        key: ":*",
                        regex: /:\*/g,
                        src: "emo_kiss.gif"
                    }, {
                        title: L.emoticon_tongueout,
                        key: ":p",
                        regex: /:p/g,
                        src: "emo_tongueout.gif"
                    }, {
                        title: L.emoticon_blush,
                        key: "(blush)",
                        regex: /\(blush\)/g,
                        src: "emo_blush.gif"
                    }, {
                        title: L.emoticon_wonder,
                        key: ":^)",
                        regex: /:\^\)/g,
                        src: "emo_wonder.gif"
                    }, {
                        title: L.emoticon_snooze,
                        key: "|-)",
                        regex: /\|-\)/g,
                        src: "emo_snooze.gif"
                    }, {
                        title: L.emoticon_love,
                        key: "(inlove)",
                        regex: /\(inlove\)/g,
                        src: "emo_love.gif"
                    }, {
                        title: L.emoticon_grin,
                        key: "]:)",
                        regex: /\]:\)/g,
                        src: "emo_grin.gif"
                    }, {
                        title: L.emoticon_talk,
                        key: "(talk)",
                        regex: /\(talk\)/g,
                        src: "emo_talk.gif"
                    }, {
                        title: L.emoticon_yawn,
                        key: "(yawn)",
                        regex: /\(yawn\)/g,
                        src: "emo_yawn.gif"
                    }, {
                        title: L.emoticon_puke,
                        key: "(puke)",
                        regex: /\(puke\)/g,
                        src: "emo_puke.gif"
                    }, {
                        title: L.emoticon_ikemen,
                        key: "(emo)",
                        regex: /\(emo\)/g,
                        src: "emo_ikemen.gif"
                    }, {
                        title: L.emoticon_otaku,
                        key: "8-|",
                        regex: /8\-\|/g,
                        src: "emo_otaku.gif"
                    }, {
                        title: L.emoticon_ninmari,
                        key: ":#)",
                        regex: /:#\)/g,
                        src: "emo_ninmari.gif"
                    }, {
                        title: L.emoticon_nod,
                        key: "(nod)",
                        regex: /\(nod\)/g,
                        src: "emo_nod.gif"
                    }, {
                        title: L.emoticon_shake,
                        key: "(shake)",
                        regex: /\(shake\)/g,
                        src: "emo_shake.gif"
                    }, {
                        title: L.emoticon_wry_smile,
                        key: "(^^;)",
                        regex: /\(\^\^\;\)/g,
                        src: "emo_wry_smile.gif"
                    }, {
                        title: L.emoticon_whew,
                        key: "(whew)",
                        regex: /\(whew\)/g,
                        src: "emo_whew.gif"
                    }, {
                        title: L.emoticon_clap,
                        key: "(clap)",
                        regex: /\(clap\)/g,
                        src: "emo_clap.gif"
                    }, {
                        title: L.emoticon_bow,
                        key: "(bow)",
                        regex: /\(bow\)/g,
                        src: "emo_bow.gif"
                    }, {
                        title: L.emoticon_roger,
                        key: "(roger)",
                        regex: /\(roger\)/g,
                        src: "emo_roger.gif"
                    }, {
                        title: L.emoticon_muscle,
                        key: "(flex)",
                        regex: /\(flex\)/g,
                        src: "emo_muscle.gif"
                    }, {
                        title: L.emoticon_dance,
                        key: "(dance)",
                        regex: /\(dance\)/g,
                        src: "emo_dance.gif"
                    }, {
                        title: L.emoticon_komanechi,
                        key: "(:/)",
                        regex: /\(:\/\)/g,
                        src: "emo_komanechi.gif"
                    }, {
                        title: L.emoticon_devil,
                        key: "(devil)",
                        regex: /\(devil\)/g,
                        src: "emo_devil.gif"
                    }, {
                        title: L.emoticon_star,
                        key: "(*)",
                        regex: /\(\*\)/g,
                        src: "emo_star.gif"
                    }, {
                        title: L.emoticon_heart,
                        key: "(h)",
                        regex: /\(h\)/g,
                        src: "emo_heart.gif"
                    }, {
                        title: L.emoticon_flower,
                        key: "(F)",
                        regex: /\(F\)/g,
                        src: "emo_flower.gif"
                    }, {
                        title: L.emoticon_cracker,
                        key: "(cracker)",
                        regex: /\(cracker\)/g,
                        src: "emo_cracker.gif"
                    }, {
                        title: L.emoticon_cake,
                        key: "(^)",
                        regex: /\(\^\)/g,
                        src: "emo_cake.gif"
                    }, {
                        title: L.emoticon_coffee,
                        key: "(coffee)",
                        regex: /\(coffee\)/g,
                        src: "emo_coffee.gif"
                    }, {
                        title: L.emoticon_beer,
                        key: "(beer)",
                        regex: /\(beer\)/g,
                        src: "emo_beer.gif"
                    }, {
                        title: L.emoticon_handshake,
                        key: "(handshake)",
                        regex: /\(handshake\)/g,
                        src: "emo_handshake.gif"
                    }, {
                        title: L.emoticon_yes,
                        key: "(y)",
                        regex: /\(y\)/g,
                        src: "emo_yes.gif"
                    }], self.secret_emoticon = [{
                        title: L.emoticon_ec14,
                        key: "(ec14)",
                        regex: /\(ec14\)/g,
                        src: "emo_ceo.gif"
                    }, {
                        title: L.emoticon_gogo,
                        key: "(gogo)",
                        regex: /\(gogo\)/g,
                        src: "emo_gogo.gif"
                    }], self.view = new ChatWorkView_1.ChatWorkView(self), self.request = new Request_1.Request, self.storage = new Storage_1.Storage, self.localStorage = new LocalStorage_1.LocalStorage, self.view.prepare()
                }, self.getLiveUrl = function(room_id, aid_list, type) {
                    var url = "./live.php?rid=" + room_id + "&aid=";
                    switch (!(aid_list instanceof Array), url += aid_list.join(","), type) {
                        case "voice":
                            url += "&type=voice";
                            break;
                        default:
                            url += "&type=video"
                    }
                    return url
                }, self.getLiveUrlById = function(live_id, type) {
                    var url = "./live/" + live_id;
                    switch (type) {
                        case "voice":
                            url += "?type=voice";
                            break;
                        default:
                            url += "?type=video"
                    }
                    return url
                }, self.alert = function(msg, ok_callback) {
                    "object" == typeof msg && (msg = msg.length > 0 ? msg.join("\n") : L.raise_error), msg || (msg = L.raise_error), boot_1.CW.view.alert(msg, ok_callback)
                }, self.confirm = function(msg, ok_callback, cancel_callback) {
                    boot_1.CW.view.confirm(msg, ok_callback, cancel_callback)
                }, self.showProgress = function(msg) {
                    boot_1.CW.view.showProgress(msg)
                }, self.hideProgress = function() {
                    boot_1.CW.view.hideProgress()
                };
                var read_timer = {}, default_read_time = 4e3;
                self.read = function(read_time, room_id) {
                    var room;
                    if (void 0 == read_time && (read_time = default_read_time), self.isLogin() && (room = void 0 == room_id ? boot_1.RM : boot_1.RL.rooms[room_id], room && 1 != room.read_lock)) {
                        self.cancelRead(room.id);
                        var unread_num = room.getUnreadNum();
                        if (unread_num > 0) {
                            var RM_read = boot_1.RL.rooms[room.id],
                                view_stat = RM_read.getViewStat();
                            RM_read.reading = !0, read_timer[room.id] = setTimeout(function() {
                                boot_1.RM && boot_1.RM.id == RM_read.id ? view_stat = boot_1.RM.getViewStat() : unread_num = RM_read.getUnreadNum(), unread_num >= view_stat.noview_num && boot_1.CW.get("gateway.php", {
                                    cmd: "read",
                                    room_id: RM_read.id,
                                    mid: RM_read.mid,
                                    last_chat_id: view_stat.last_read_id
                                }, function(json) {
                                    if (json.read_num) {
                                        var before_unread = RM_read.getUnreadNum();
                                        RM_read.read_num = json.read_num;
                                        var now_unread = RM_read.getUnreadNum(),
                                            before_mention = RM_read.getMentionNum();
                                        RM_read.mention_num = json.mention_num;
                                        var cur_mention = RM_read.getMentionNum();
                                        before_unread > 0 && 0 == now_unread ? boot_1.RL.unread_room_sum-- : 0 == before_unread && now_unread > 0 && boot_1.RL.unread_room_sum++, before_mention > 0 && 0 == cur_mention ? boot_1.RL.mention_room_sum-- : 0 == before_mention && cur_mention > 0 && boot_1.RL.mention_room_sum++, boot_1.RL.view.updateUnreadNum(RM_read.id), boot_1.RL.view.updateSumNumbers(), boot_1.RM.id == RM_read.id && RM_read.timeline.read(unread_num)
                                    }
                                    RM_read.reading = !1
                                }, function(error, result) {
                                    if (result && result.error && "no_member" == result.error) {
                                        var room_id = RM_read.id;
                                        boot_1.CW.post("gateway.php", {
                                            cmd: "is_room_member",
                                            rid: room_id
                                        }, function(json) {
                                            0 == json.is_room_member && (boot_1.RL.deleteRoom(room_id), boot_1.RL.build())
                                        })
                                    }
                                    RM_read.reading = !1
                                }), boot_1.RM && boot_1.RM.getUnreadNum() > 0 && boot_1.CW.read()
                            }, read_time)
                        }
                    }
                }, self.cancelRead = function(room_id) {
                    read_timer[room_id] && clearTimeout(read_timer[room_id])
                }, self.sendFeedback = function(options) {
                    options = $.extend({
                        message: "",
                        version: 1,
                        success: null,
                        error: null
                    }, options);
                    var send_dat = {
                        cmd: "send_feedback",
                        version: options.version,
                        message: options.message
                    };
                    boot_1.CW.post("gateway.php", send_dat, function() {
                        "function" == typeof options.success && options.success()
                    }, function() {
                        "function" == typeof options.error && options.error()
                    })
                }, self.popup = function(icon, title, body, room_id) {
                    return self.view.popup(icon, title, body, room_id)
                }, self.playSound = function(sound_type, sound_volume) {
                    return self.view.playSound(sound_type, sound_volume)
                }, self.stopSound = function(sound_type) {
                    return self.view.stopSound(sound_type)
                };
                var first_watch = !0,
                    update_notified = !1,
                    update_interval = 0,
                    has_watch_request_in_update_interval = !1;
                self.watch = function(is_fixed_term) {
                    if (update_interval) return void(has_watch_request_in_update_interval = !0);
                    if (update_interval = setTimeout(function() {
                        update_interval = 0, has_watch_request_in_update_interval && (has_watch_request_in_update_interval = !1, self.watch())
                    }, 1e3), !self.watching) {
                        self.watching = !0;
                        var cmd = "get_update";
                        if (self.watch_timer && clearTimeout(self.watch_timer), self.watch_timer = setTimeout(function() {
                            self.watch(!0)
                        }, 3e5), 0 == self.last_id) {
                            if (!boot_1.RL) return;
                            first_watch && (first_watch = !1, self.view.firstWatch()), boot_1.CW.get("gateway.php", {
                                cmd: "init_load",
                                rid: boot_1.RL.lazy_select,
                                type: boot_1.RL.load_type,
                                new: 1
                            }, function(json) {
                                boot_1.CW.setInitData(json)
                            })
                        } else "get_update" == cmd && boot_1.CW.get("gateway.php", {
                            cmd: cmd,
                            account_id: boot_1.AC.myid,
                            last_id: self.last_id,
                            ver: self.version,
                            new: 1
                        }, function(result) {
                            if (self.last_id != result.last_id && (self.last_id = result.last_id, set_update(result.update_info), is_fixed_term && self.comet()), self.announce_id != result.announce_id && (self.announce_id = result.announce_id, boot_1.ST.getAnnounce()), void 0 != result.update) {
                                if (!update_notified) {
                                    var version = result.update.replace("a", "");
                                    result.update.indexOf("a") == -1 && self.view.alertUpdated(version), self.view.showUpdated(version)
                                }
                                update_notified = !0
                            }
                        });
                        self.watching = !1;
                        var set_update = function(update_info) {
                            var refresh = {};
                            for (var upd_type in update_info) {
                                var upd_dat = update_info[upd_type];
                                switch (upd_type) {
                                    case "room":
                                        for (var room_id in upd_dat)
                                            if (!upd_dat[room_id].rd || (boot_1.RL.deleteRoom(room_id), upd_dat[room_id].a)) {
                                                if (upd_dat[room_id].a && boot_1.RL.isAddedRoomId(room_id) && (boot_1.RL.lazy_select = room_id, boot_1.RL.removeAddedRoomId(room_id)), void 0 != upd_dat[room_id].lt && boot_1.RL.setLastUpdateTime(room_id, upd_dat[room_id].lt), upd_dat[room_id].i && boot_1.RL.setInfoUpdate(room_id), upd_dat[room_id].p && boot_1.RL.setPersonalUpdate(room_id), upd_dat[room_id].d && boot_1.RL.setDescUpdate(room_id), upd_dat[room_id].m && boot_1.RL.setMemberUpdate(room_id), upd_dat[room_id].t && boot_1.RL.setTaskUpdate(room_id), upd_dat[room_id].cd)
                                                    for (var chat_id in upd_dat[room_id].cd) boot_1.RL.rooms[room_id].timeline && (boot_1.RL.rooms[room_id].timeline.deleteChat(chat_id), boot_1.RL.setUpdate(!0)), boot_1.RM && room_id == boot_1.RM.id && (refresh.RM = !0);
                                                if (upd_dat[room_id].ce)
                                                    for (var chat_id in upd_dat[room_id].ce) upd_dat[room_id].cd && upd_dat[room_id].cd[chat_id] || (boot_1.RL.rooms[room_id].timeline && (boot_1.RL.rooms[room_id].timeline.refreshChat(chat_id), boot_1.RL.setUpdate(!0)), boot_1.RM && room_id == boot_1.RM.id && (refresh.RM = !0));
                                                if (upd_dat[room_id].fe)
                                                    for (var file_id in upd_dat[room_id].fe) upd_dat[room_id].fd && upd_dat[room_id].fd[file_id] || boot_1.FL.refreshFile(file_id);
                                                if (upd_dat[room_id].fd)
                                                    for (var file_id in upd_dat[room_id].fd) boot_1.FL.deleteFileStat(file_id), boot_1.RM && room_id == boot_1.RM.id && (refresh.RM = !0);
                                                if (upd_dat[room_id].tc) {
                                                    for (var task_id in upd_dat[room_id].tc) upd_dat[room_id].td && upd_dat[room_id].td[task_id] || boot_1.TK.checkTask(task_id, upd_dat[room_id].tc[task_id], !0);
                                                    boot_1.TK.reflashTaskList(room_id)
                                                }
                                                if (upd_dat[room_id].te)
                                                    for (var task_id in upd_dat[room_id].te) upd_dat[room_id].td && upd_dat[room_id].td[task_id] || boot_1.TK.refreshTask(task_id);
                                                if (upd_dat[room_id].td) {
                                                    for (var task_id in upd_dat[room_id].td) boot_1.TK.deleteTaskStat(task_id);
                                                    boot_1.TK.reflashTaskList(room_id)
                                                }
                                                void 0 != upd_dat[room_id].s && (boot_1.RL.rooms[room_id].sticky = upd_dat[room_id].s, boot_1.RL.setUpdate(!0)), void 0 != upd_dat[room_id].lvc && boot_1.CW.openLiveNotification(upd_dat[room_id].lvc, room_id), void 0 != upd_dat[room_id].lvr && boot_1.CW.closeLiveNotification(upd_dat[room_id].lvr, room_id)
                                            }
                                        break;
                                    case "account":
                                        if (upd_dat.a) {
                                            var aid_list = [];
                                            for (var account_id in upd_dat.a) aid_list.push(parseInt(account_id, 10));
                                            boot_1.AC.refreshAccount(aid_list, !0)
                                        }
                                        if (upd_dat.s && boot_1.ST.getSetting(), upd_dat.r) {
                                            var old_aid = upd_dat.r;
                                            boot_1.AC.account_dat[old_aid] && boot_1.AC.refreshContactList();
                                            for (var room_id in boot_1.RL.rooms) boot_1.RL.rooms[room_id].member_dat[old_aid] && boot_1.RL.setMemberUpdate(room_id)
                                        }
                                        upd_dat.n && boot_1.ST.getAnnounce();
                                        break;
                                    case "contact":
                                        if (upd_dat.l && boot_1.AC.refreshContactList(), upd_dat.m) {
                                            var aid_list = [];
                                            for (var account_id in upd_dat.m) aid_list.push(parseInt(account_id, 10));
                                            boot_1.AC.refreshMentionInfo(aid_list)
                                        }
                                        upd_dat.a && upd_dat.a.length > 0 && boot_1.AC.client_addContact(upd_dat.a), upd_dat.d && upd_dat.d.length > 0 && boot_1.AC.client_deleteContact(upd_dat.d);
                                        break;
                                    case "category":
                                        upd_dat.l && boot_1.RL.refreshCategory()
                                }
                            }
                            refresh.RM && boot_1.RM.build(), boot_1.RL.hasUpdate() && boot_1.RL.build()
                        }
                    }
                }, self.comet = function() {
                    self.request.comet()
                }, self.postLoad = function() {
                    self.view.postLoad()
                }, self.isOnline = function() {
                    return is_online
                }, self.isLogin = function() {
                    return is_login
                }, self.setOnline = function() {
                    is_online = !0, is_login = !0, self.view.setOnline()
                }, self.setConnectionError = function(type) {
                    "NO LOGIN" == type ? (is_online = !0, is_login = !1) : "INVALID USER" == type ? (is_online = !0, is_login = !1) : "INVALID TOKEN" == type ? (is_online = !0, is_login = !1) : "NO TOKEN" == type ? (is_online = !0, is_login = !1) : "IP ERROR" == type ? (is_online = !0, is_login = !1) : (is_online = !1, is_login = !1), self.view.setConnectionError(type)
                }, self.initRoomLoad = function() {
                    self.view.initRoomLoad()
                }, self.initComplete = function() {
                    self.view.initComplete()
                }, self.post = function(url, data, success_callback, error_callback) {
                    return self.ajax({
                        type: "POST",
                        dataType: "json",
                        async: !0,
                        url: url,
                        data: data,
                        success: success_callback,
                        error: error_callback
                    })
                }, self.postSync = function(url, data, success_callback, error_callback) {
                    return self.ajax({
                        type: "POST",
                        dataType: "json",
                        async: !1,
                        url: url,
                        data: data,
                        success: success_callback,
                        error: error_callback
                    })
                }, self.get = function(url, data, success_callback, error_callback) {
                    return self.ajax({
                        type: "GET",
                        dataType: "json",
                        async: !0,
                        url: url,
                        data: data,
                        success: success_callback,
                        error: error_callback
                    })
                }, self.getSync = function(url, data, success_callback, error_callback) {
                    return self.ajax({
                        type: "GET",
                        dataType: "json",
                        async: !1,
                        url: url,
                        data: data,
                        success: success_callback,
                        error: error_callback
                    })
                }, self.ajax = function(params) {
                    if (boot_1.CW.isOnline() || boot_1.CW.checkOnline(function() {}, 1), boot_1.AC) {
                        var cmd = "";
                        if (params.data.cmd && (params.url += "?cmd=" + params.data.cmd, cmd = params.data.cmd.toString(), delete params.data.cmd), cmd && account_server_cmd[cmd] ? (params.dataType = "jsonp", params.url = ACCOUNT_SERVER_PATH + "/" + params.url) : params.url = SERVER_PATH + "/" + params.url, params.url += "&myid=" + boot_1.AC.myid + "&_v=" + self.version + "&_av=" + self.api_version + "&_t=" + ACCESS_TOKEN + "&ln=" + LANGUAGE, params.timeout = ajax_timeout, boot_1.CW.isLogin()) {
                            if ("function" != typeof params.error) params.error = function(error_message) {
                                if ("object" == typeof error_message && (error_message = void 0 != error_message.length ? error_message.join("\n") : ""), error_message) switch (error_message) {
                                    case "NO LOGIN":
                                    case "INVALID USER":
                                    case "NO TOKEN":
                                    case "INVALID TOKEN":
                                    case "BAD LOGIN INFO":
                                    case "UUID ERROR":
                                    case "IP ERROR":
                                    case "LOCK":
                                    case "OFFLINE":
                                    case "TIMEOUT":
                                        break;
                                    default:
                                        boot_1.CW.alert(error_message)
                                }
                                boot_1.CW.checkOnline()
                            };
                            else {
                                var org_error_callback = params.error;
                                params.error = function(error_message, result) {
                                    org_error_callback(error_message, result), boot_1.CW.checkOnline()
                                }
                            } if ("function" == typeof params.success) {
                                var org_success_callback = params.success;
                                params.success = function(json) {
                                    if (json && 1 == json.status.success) org_success_callback(json.result);
                                    else {
                                        var error_msg = "";
                                        json && (error_msg = json.status.message, "NO LOGIN" != error_msg && "INVALID USER" != error_msg && "NO TOKEN" != error_msg && "INVALID TOKEN" != error_msg && "IP ERROR" != error_msg || (boot_1.CW.setConnectionError(error_msg), boot_1.CW.checkOnline())), params.error(error_msg, json.result)
                                    }
                                }
                            }
                            return self.request.ajax(params)
                        }
                        "function" == typeof params.error && params.error()
                    }
                };
                var online_checking = !1,
                    online_check_timer = null,
                    recheck_timeout = 1e4;
                self.checkOnline = function(callback, force) {
                    if ("function" != typeof callback && (callback = function() {}), force && (online_check_timer && (clearTimeout(online_check_timer), online_check_timer = null), online_checking = !1), online_checking === !1) {
                        online_checking = !0;
                        var success_callback = function() {
                            online_checking = !1, boot_1.CW.setOnline(), callback()
                        }, recheck_callback = function(timeout) {
                                void 0 == timeout && (timeout = recheck_timeout), recheck_timeout *= recheck_timeout < 10 ? 3 : 1.2, online_check_timer || (online_check_timer = setTimeout(function() {
                                    online_checking = !1, online_check_timer = null, self.checkOnline(callback)
                                }, timeout))
                            };
                        setTimeout(function() {
                            self.request.checkOnline(function() {
                                success_callback(), recheck_timeout = 1e4
                            }, function(error_msg) {
                                boot_1.CW.setConnectionError(error_msg), "NO LOGIN" == error_msg || "INVALID USER" == error_msg || "NO TOKEN" == error_msg || "INVALID TOKEN" == error_msg || "BAD LOGIN INFO" == error_msg || "UUID ERROR" == error_msg || "IP ERROR" == error_msg || "LOCK" == error_msg ? boot_1.CW.view.showLoginDialog(success_callback, recheck_callback, error_msg) : "OFFLINE" == error_msg ? boot_1.CW.view.showOfflineDialog(success_callback, recheck_callback) : "TIMEOUT" == error_msg ? boot_1.CW.view.showTimeoutDialog(success_callback, recheck_callback) : recheck_callback()
                            })
                        }, 1e3)
                    }
                }, self.renderMessage = function(message, option) {
                    return message && void 0 != message.length ? (void 0 == option && (option = {}), self.view.renderMessage(message, option)) : ""
                };
                var date = new Date;
                self.getDate = function(time, format) {
                    date.setTime(1e3 * time);
                    var year = date.getFullYear(),
                        month = date.getMonth() + 1,
                        day = date.getDate(),
                        hour = date.getHours(),
                        min = date.getMinutes(),
                        sec = date.getSeconds();
                    return hour < 10 && (hour = "0" + hour), min < 10 && (min = "0" + min), sec < 10 && (sec = "0" + sec), void 0 == format && (format = boot_1.ST.data.dateformat + " H:i"), format.replace("Y", year).replace("m", month).replace("d", day).replace("H", hour).replace("i", min).replace("s", sec)
                };
                var avatar_option_default = {
                    hovertip: !0,
                    clicktip: !0,
                    small: !1,
                    ui: !1,
                    src: !1
                };
                self.getAvatarPanel = function(account_id, option) {
                    if (account_id) {
                        if (void 0 == option) option = avatar_option_default;
                        else
                            for (var okey in avatar_option_default) void 0 == option[okey] && (option[okey] = avatar_option_default[okey]);
                        return self.view.getAvatarPanel(account_id, option)
                    }
                }, self.getCoverPanel = function(account_id, option) {
                    var cover_option_default = {
                        src: !1,
                        extraclass: !1
                    };
                    if (account_id) {
                        if (void 0 == option) option = cover_option_default;
                        else
                            for (var okey in cover_option_default) void 0 == option[okey] && (option[okey] = cover_option_default[okey]);
                        return self.view.getCoverPanel(account_id, option)
                    }
                }, self.getName = function(account_id) {
                    return self.view.getName(account_id)
                }, self.getOrgName = function(account_id) {
                    return self.view.getOrgName(account_id)
                }, self.getDepartment = function(account_id) {
                    return self.view.getDepartment(account_id)
                }, self.getOrgTitle = function(account_id) {
                    return self.view.getOrgTitle(account_id)
                }, self.getFullName = function(account_id) {
                    return self.view.getFullName(account_id)
                }, self.getChatWorkId = function(account_id) {
                    return self.view.getChatWorkId(account_id)
                }, self.getChatWorkIdLink = function(account_id) {
                    return self.view.getChatWorkIdLink(account_id)
                }, self.getSkypeLink = function(account_id, add_link_text) {
                    return self.view.getSkypeLink(account_id, add_link_text)
                }, self.getTwitterLink = function(account_id, add_link_text) {
                    return self.view.getTwitterLink(account_id, add_link_text)
                }, self.getFacebookLink = function(account_id, add_link_text) {
                    return self.view.getFacebookLink(account_id, add_link_text)
                }, self.getEmailLink = function(account_id) {
                    return self.view.getEmailLink(account_id)
                }, self.getOrgTellLink = function(account_id) {
                    return self.view.getOrgTellLink(account_id)
                }, self.getExtensionTelLink = function(account_id) {
                    return self.view.getExtensionTelLink(account_id)
                }, self.getMobileTelLink = function(account_id) {
                    return self.view.getMobileTelLink(account_id)
                }, self.isEmail = function(email) {
                    return !!email.match(/^[A-Za-z0-9]+[\w-]+@[\w\.-]+\.\w{2,}$/)
                }, self.isTelNumber = function(tel_number) {
                    return !!tel_number.match(/^[0-9]+[0-9-]+[0-9]+$/)
                }, self.getRoomName = function(room_id) {
                    if (room_id) {
                        var room = boot_1.RL.rooms[room_id];
                        if (room) return "contact" == room.type ? self.getName(room.getAccountId()) : common_2.escape_html(room.getName())
                    }
                };
                var contact_option_default = {
                    chatlink: !0,
                    webservice: !0,
                    request_contact: !0
                };
                self.getContactPanel = function(account_id, option) {
                    if (account_id) {
                        if (void 0 == option) option = contact_option_default;
                        else
                            for (var okey in contact_option_default) void 0 == option[okey] && (option[okey] = contact_option_default[okey]);
                        return self.view.getContactPanel(account_id, option)
                    }
                }, self.registerAvatar = function(account_id) {
                    self.view.registerAvatar(account_id)
                };
                var file_option_default = {
                    type: "timeline"
                };
                self.getFilePanel = function(file_id, option) {
                    if (void 0 == option) option = file_option_default;
                    else
                        for (var okey in file_option_default) void 0 == option[okey] && (option[okey] = file_option_default[okey]);
                    var file_dat;
                    return file_dat = void 0 != boot_1.FL.file_id2file_dat[file_id] && boot_1.FL.file_id2file_dat[file_id], self.view.getFilePanel(file_dat, option)
                };
                var task_option_default = {
                    type: "timeline"
                };
                self.getTaskPanel = function(task_id, option) {
                    if (!task_id) return !1;
                    if (void 0 == option) option = task_option_default;
                    else
                        for (var okey in task_option_default) void 0 == option[okey] && (option[okey] = task_option_default[okey]);
                    var task_dat;
                    return task_dat = void 0 != boot_1.TK.task_id2task_dat[task_id] && boot_1.TK.task_id2task_dat[task_id], self.view.getTaskPanel(task_dat, option)
                }, self.openLiveNotification = function(live_id, room_id) {
                    self.view.openLiveNotification(live_id, room_id)
                }, self.closeLiveNotification = function(live_id, room_id) {
                    self.view.closeLiveNotification(live_id, room_id)
                }, self.buildLayout = function() {
                    self.view.buildLayout()
                }, self.resizeLayout = function() {
                    self.view.resizeLayout()
                }, self.showStorageLimitDialog = function(type) {
                    self.view.showStorageLimitDialog(type)
                }, self.setLimitDialog = function(limit_message, type) {
                    self.view.setLimitDialog(limit_message, type)
                }, self.setInitData = function(data) {
                    if (self.last_id = data.last_id, self.announce_id = data.announce_id, self.plan = data.plan, self.is_admin = data.is_admin, self.is_admin_user = data.is_admin_user, self.is_business = data.is_business, self.is_security = data.is_security, self.contact_limit_num = data.contact_limit_num, self.group_limit_num = data.group_limit_num, self.is_enterprise = data.is_enterprise, self.is_security && (self.security_dat = data.security_dat), boot_1.ST.updateSetting(data.setting_data), boot_1.AC.updateContactList(data.contact_dat, data.mention_dat, data.myrequest_dat, data.request_dat), boot_1.RL.updateCategory(data.cat_dat), boot_1.RL.updateRoomData(data.room_dat), data.announce_dat && boot_1.ST.updateAnnounce(data.announce_dat), boot_1.CW.postLoad(), boot_1.FL.updateStorageInfo(data.storage, data.storage_limit, data.storage_limit_time, data.is_storage_limit), !self.init_loaded) {
                        for (var room_list = boot_1.RL.getSortedRoomList(), unread_room_count = 0, i = 0; i < room_list.length; i++) {
                            var room_id = room_list[i];
                            if (boot_1.RL.rooms[room_id].getUnreadNum() > 0 && (unread_room_count++, boot_1.RL.setInfoUpdate(room_id)), unread_room_count > 100) break
                        }
                        boot_1.RL.build()
                    }
                    self.init_loaded = !0, self.comet()
                }, self.isMatchedWithKeyList = function(keyword_list, word) {
                    for (var iword = word.toLowerCase(), i = keyword_list.length; i--;)
                        if (iword.indexOf(keyword_list[i]) == -1) return !1;
                    return !0
                }, self.splitWithSpace = function(str) {
                    return str.split(/[ \u3000]+/)
                }, self.displayEsetLink = function() {
                    return "ja" === LANGUAGE && !boot_1.CW.is_business
                }, self.checkNotificationPermission = function() {
                    boot_1.ST.getSetting(function() {
                        if (common_1.NotificationAPI) {
                            var desktop_alert = boot_1.ST.data.desktop_alert,
                                notification_permission = common_1.NotificationAPI.checkPermission();
                            1 === desktop_alert && 1 === notification_permission && common_1.NotificationAPI.requestPermission(function(permission) {
                                0 === permission && (boot_1.CW.enable_popup = !0)
                            })
                        }
                    })
                }
            }
            var ChatWorkView_1 = require("../../web-new/view/ChatWorkView"),
                Request_1 = require("../../web-new/lib/Request"),
                Storage_1 = require("../../web-new/lib/Storage"),
                LocalStorage_1 = require("../lib/LocalStorage"),
                common_1 = require("../../web-new/lib/common"),
                common_2 = require("../lib/common"),
                boot_1 = require("../../web-new/controller/boot");
            exports.ChatWork = ChatWork
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/lib/Request": 67,
            "../../web-new/lib/Storage": 68,
            "../../web-new/lib/common": 69,
            "../../web-new/view/ChatWorkView": 132,
            "../lib/LocalStorage": 49,
            "../lib/common": 50
        }
    ],
    54: [
        function(require, module, exports) {
            "use strict";

            function CheatSheet() {
                var self = this;
                self.prepare = function() {
                    self.view = new CheatSheetView_1.CheatSheetView, self.view.prepare()
                }
            }
            var CheatSheetView_1 = require("../../web-new/view/CheatSheetView");
            exports.CheatSheet = CheatSheet
        }, {
            "../../web-new/view/CheatSheetView": 133
        }
    ],
    55: [
        function(require, module, exports) {
            "use strict";

            function File() {
                var self = this;
                self.file_id2file_dat = {}, self.unknown_flag = {}, self.storage = {
                    used: 0,
                    limit: 0,
                    available: 0
                }, self.myfile_load_flag = {
                    loading: !1,
                    loaded: !1
                }, self.prepare = function() {
                    self.view = new FileView_1.FileView(self), self.view.prepare()
                }, self.registerFile = function(file_id) {
                    void 0 == self.file_id2file_dat[file_id] && (self.unknown_flag[file_id] = !0)
                }, self.hasUnknown = function() {
                    var file_id;
                    for (file_id in self.unknown_flag) void 0 != self.file_id2file_dat[file_id] && delete self.unknown_flag[file_id];
                    for (file_id in self.unknown_flag)
                        if (void 0 == self.file_id2file_dat[file_id]) return !0;
                    return !1
                }, self.getUnknown = function(callback) {
                    var unknown_list = [];
                    for (var file_id in self.unknown_flag) void 0 == self.file_id2file_dat[file_id] ? unknown_list.push(file_id) : delete self.unknown_flag[file_id];
                    unknown_list.length && boot_1.CW.postSync("gateway.php", {
                        cmd: "get_file",
                        file_id: unknown_list
                    }, function(json) {
                        for (var file_id in json.file_dat) self.file_id2file_dat[file_id] = json.file_dat[file_id], delete self.unknown_flag[file_id];
                        "function" == typeof callback && callback(json.file_dat)
                    })
                }, self.setFile = function(file_dat) {
                    self.file_id2file_dat[file_dat.id] = file_dat
                }, self.deleteFile = function(file_id, success_callback, error_callback) {
                    var file_id_list;
                    file_id_list = file_id instanceof Array ? file_id : [file_id], boot_1.CW.get("gateway.php", {
                        cmd: "delete_file",
                        f: file_id_list
                    }, function(json) {
                        void 0 != json.storage && void 0 != json.storage_limit && self.updateStorageInfo(json.storage, json.storage_limit, json.storage_limit_time, json.is_storage_limit);
                        for (var i = 0, file_len = file_id_list.length; i < file_len; i++) self.deleteFileStat(file_id_list[i]);
                        "function" == typeof success_callback && success_callback(json)
                    }, function(json) {
                        "function" == typeof error_callback && error_callback(json)
                    })
                }, self.deleteFileStat = function(file_id) {
                    self.hasFile(file_id) && "deleted" != self.file_id2file_dat[file_id].st && (self.file_id2file_dat[file_id].st = "deleted", delete self.file_id2file_dat[file_id].fn, self.buildByFileId(file_id, !0))
                }, self.hasFile = function(file_id) {
                    return void 0 != self.file_id2file_dat[file_id]
                }, self.sortFileList = function(file_list) {
                    file_list.sort(function(a, b) {
                        return self.file_id2file_dat[b].id - self.file_id2file_dat[a].id
                    })
                }, self.getMyFileList = function() {
                    var file_list = [];
                    for (var file_id in boot_1.FL.file_id2file_dat) boot_1.FL.file_id2file_dat[file_id].aid == boot_1.AC.myid && file_list.push(file_id);
                    return file_list
                }, self.editFile = function(file_id, filename, success_callback, error_callback) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "edit_file",
                        file_id: file_id,
                        filename: filename
                    }, function(json) {
                        "function" == typeof success_callback && success_callback(json), boot_1.CW.watch()
                    }, function(json) {
                        "function" == typeof error_callback ? error_callback(json) : boot_1.CW.alert(json)
                    })
                }, self.refreshFile = function(file_id) {
                    self.hasFile(file_id) && boot_1.CW.get("gateway.php", {
                        cmd: "get_file",
                        file_id: [file_id]
                    }, function(json) {
                        for (var fid in json.file_dat) {
                            var change = !1;
                            for (var key in json.file_dat[fid]) self.file_id2file_dat[fid][key] != json.file_dat[fid][key] && (self.file_id2file_dat[fid][key] = json.file_dat[fid][key], change = !0);
                            change && self.buildByFileId(file_id)
                        }
                    })
                }, self.loadAllMyFile = function() {
                    if (!self.myfile_load_flag.loading) {
                        self.myfile_load_flag.loading = !0;
                        var file_list = self.getMyFileList(),
                            fid = "";
                        fid = file_list.length > 1e3 ? "" : file_list.join(","), boot_1.CW.post("gateway.php", {
                            cmd: "load_my_file",
                            fid: fid
                        }, function(json) {
                            if (json.file_dat) {
                                for (var file_id in json.file_dat) self.setFile(json.file_dat[file_id]);
                                self.myfile_load_flag.loading = !1, self.myfile_load_flag.loaded = common_1.time(), self.buildAllMyFile()
                            }
                        })
                    }
                }, self.buildByFileId = function(file_id) {
                    self.view.buildByFileId(file_id)
                }, self.buildAllMyFile = function() {
                    self.view.buildAllMyFile()
                }, self.getFileListRows = function(file_list) {
                    return self.view.getFileListRows(file_list)
                }, self.updateStorageInfo = function(storage, storage_limit, limit_time, is_limit) {
                    self.view.updateStorageInfo(storage, storage_limit, limit_time, is_limit), self.storage.used = storage.total, self.storage.limit = storage_limit, self.storage.available = self.storage.limit - self.storage.used
                }, self.isExecutableExtension = function(filename) {
                    var executable_extensions = ["ade", "adp", "bat", "chm", "cmd", "com", "cpl", "exe", "hta", "ins", "isp", "jse", "lib", "mde", "msc", "msp", "mst", "pif", "scr", "sct", "shb", "sys", "vb", "vbe", "vbs", "vxd", "wsc", "wsf", "wsh", "lnk"],
                        match = filename.match(/\.([^\.]+)$/);
                    return !(!match || executable_extensions.indexOf(match[1].toLowerCase()) === -1)
                }, self.containIllegalChar = function(filename) {
                    return !!filename.match(/[\\\/:\*\?"<>\|]/)
                }
            }
            var FileView_1 = require("../../web-new/view/FileView"),
                common_1 = require("../lib/common"),
                boot_1 = require("../../web-new/controller/boot");
            exports.File = File
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/FileView": 135,
            "../lib/common": 50
        }
    ],
    56: [
        function(require, module, exports) {
            "use strict";

            function FileList(room) {
                var self = this;
                self.view = new FileListView_1.FileListView(self), self.loaded = !1, self.room = room, self.file_num = void 0
            }
            var FileListView_1 = require("../../web-new/view/FileListView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.FileList = FileList, FileList.prototype = {
                getLastFileId: function() {
                    var file_list = this.getFileList();
                    if (file_list.length) {
                        for (var max_id = 0, i = 0; i < file_list.length; i++) max_id < file_list[i] && (max_id = file_list[i]);
                        return max_id
                    }
                    return 0
                },
                getFileList: function() {
                    var file_list = [];
                    for (var file_id in boot_1.FL.file_id2file_dat) boot_1.FL.file_id2file_dat[file_id].rid == this.room.id && file_list.push(file_id);
                    return file_list
                },
                setFileNum: function(file_num) {
                    this.file_num = file_num
                },
                getFileNum: function() {
                    return this.file_num
                },
                insertFile: function(file_dat) {
                    void 0 == boot_1.FL.file_id2file_dat[file_dat.id] && (boot_1.FL.file_id2file_dat[file_dat.id] = file_dat)
                },
                build: function() {
                    this.view.build()
                },
                free: function() {
                    for (var file_id in boot_1.FL.file_id2file_dat) boot_1.FL.file_id2file_dat[file_id].rid == this.room.id && delete boot_1.FL.file_id2file_dat[file_id]
                }
            }
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/FileListView": 134
        }
    ],
    57: [
        function(require, module, exports) {
            "use strict";

            function Room(room_id) {
                var self = this;
                self.view = new RoomView_1.RoomView(self), self.id = room_id, self.mid = 0, self.timeline = null, self.filelist = null, self.tasklist = null, self.read_num = 0, self.mention_num = 0, self.chat_num = 0, self.file_num = 0, self.task_num = 0, self.mytask_num = 0, self.description = !1, self.member_dat = {}, self.member_request = [], self.sorted_member_list = null, self.is_internal = -1, self.icon = "", self.icon_preset = !1, self.header = "", self.allow_see_member = 0, self.allow_upload_file = 0, self.allow_add_task = 0, self.allow_send_message = 0, self.join_need_accept = 0, self.public = 0, self.public_description = "", self.link_name = "", self.type = "", self.sending_id = 0, self.message_id2sending_id = {}, self.sticky = !1, self.reading = !1, self.rswitch = !1, self.read_lock = !1, self._name = "", self._account_id = 0, self.buildtime = 0
            }
            var RoomView_1 = require("../../web-new/view/RoomView"),
                TimeLine_1 = require("./TimeLine"),
                FileList_1 = require("./FileList"),
                TaskList_1 = require("./TaskList"),
                common_1 = require("../lib/common"),
                boot_1 = require("../../web-new/controller/boot");
            exports.Room = Room, window.Room = Room,
            function() {
                Room.prototype = {
                    getUnreadNum: function() {
                        var unread_num = parseInt(this.chat_num - this.read_num, 10);
                        if (unread_num > 0 && null !== this.timeline) {
                            var length_1 = this.timeline.chat_list.length,
                                maxIndex = this.timeline.chat_list.length - 1,
                                minIndex = unread_num < length_1 ? length_1 - unread_num : 0;
                            if (0 == boot_1.ST.data.show_delmessage)
                                for (var i = maxIndex; i >= minIndex && !("[deleted]" === this.timeline.chat_list[i].msg && (unread_num--, unread_num <= 0)); i--);
                        }
                        return unread_num < 0 && (unread_num = 0), unread_num
                    },
                    getMentionNum: function() {
                        return this.mention_num
                    },
                    getViewStat: function() {
                        return this.view.getViewStat()
                    },
                    isInternal: function() {
                        return this.is_internal == -1 && this.checkInternal(), 1 == this.is_internal
                    },
                    refreshTaskNum: function() {
                        if (this.tasklist) {
                            for (var task_list = this.tasklist.getTaskList("open"), mytask_num = 0, idx = 0, task_len = task_list.length; idx < task_len; idx++) {
                                var task_dat = boot_1.TK.task_id2task_dat[task_list[idx]];
                                task_dat.aid == boot_1.AC.myid && mytask_num++
                            }
                            this.task_num = task_list.length, this.mytask_num = mytask_num
                        }
                    },
                    getName: function(option) {
                        var aid = this.getAccountId();
                        return aid > 0 ? aid == boot_1.AC.myid ? L.mychat : void 0 != option && option.nameonly ? boot_1.AC.getName(aid) : boot_1.AC.getFullName(aid) : this._name
                    },
                    getSortedMemberList: function() {
                        if (this.sorted_member_list) return this.sorted_member_list;
                        var mem_list = [];
                        for (var aid in this.member_dat) mem_list.push(aid);
                        return this.sortMember(mem_list), this.sorted_member_list = mem_list, mem_list
                    },
                    sortMember: function(mem_list) {
                        mem_list.sort(function(a, b) {
                            return a == boot_1.AC.myid ? -1 : b == boot_1.AC.myid ? 1 : boot_1.AC.getMentionNum(b) - boot_1.AC.getMentionNum(a)
                        })
                    },
                    setName: function(name) {
                        this._name = name
                    },
                    setMember: function(member_dat) {
                        this.member_dat = member_dat, this.sorted_member_list = null, this.checkInternal(), this._account_id = 0
                    },
                    checkInternal: function() {
                        if (boot_1.CW.is_business) {
                            this.is_internal = 1;
                            var my_gid = boot_1.AC.getGroupId(boot_1.AC.myid);
                            for (var aid in this.member_dat)
                                if (boot_1.AC.getGroupId(aid) != my_gid) {
                                    this.is_internal = 0;
                                    break
                                }
                        }
                    },
                    refreshMember: function() {
                        var self = this,
                            room_id = self.id;
                        boot_1.CW.post("gateway.php", {
                            cmd: "get_room_info",
                            m: [room_id]
                        }, function(json) {
                            void 0 != json.room_dat[room_id].member_dat && (self.member_dat = json.room_dat[room_id].member_dat, self.sorted_member_list = null, self.buildMemberList())
                        })
                    },
                    getIcon: function(type, size) {
                        return void 0 == size && (size = "small"), this.view.getIcon(type, size)
                    },
                    getAccountId: function() {
                        if (0 != this._account_id) return this._account_id;
                        if ("my" == this.type) return boot_1.AC.myid;
                        if ("contact" == this.type)
                            for (var aid in this.member_dat)
                                if (boot_1.AC.myid != aid) return aid;
                        return 0
                    },
                    getJoinLink: function() {
                        return !!this.public && "./g/" + (this.link_name || this.id)
                    },
                    addSendingChat: function(text) {
                        return this.sending_id++, this.timeline.sending_chat_list.push({
                            sid: this.sending_id,
                            aid: boot_1.AC.myid,
                            mn: !1,
                            msg: text,
                            tm: common_1.time(),
                            utm: 0,
                            sent: !1
                        }), this.view.addSendingChat(this.sending_id), this.sending_id
                    },
                    setMessageIdForSendingId: function(sending_id, message_id) {
                        this.message_id2sending_id[message_id] = parseInt(sending_id, 10)
                    },
                    deleteSendingChat: function(sending_id) {
                        for (var idx = 0; idx <= this.timeline.sending_chat_list.length; idx++) {
                            var chat = this.timeline.sending_chat_list[idx];
                            if (chat && chat.sid === sending_id) {
                                this.timeline.sending_chat_list.splice(0, idx + 1);
                                break
                            }
                        }
                    },
                    deleteSendingChatFromMessageId: function(message_id) {
                        message_id = parseInt(message_id, 10);
                        var sending_id = this.message_id2sending_id[message_id];
                        sending_id && (this.deleteSendingChat(sending_id), delete this.message_id2sending_id[message_id])
                    },
                    load: function(user_option, callback) {
                        $.isNumeric(user_option) && (user_option = {
                            jumpTo: user_option
                        });
                        var option = $.extend({
                            jumpTo: 0,
                            autoBuild: !0
                        }, user_option);
                        this.prepareBuild();
                        var req = {
                            cmd: "load_chat",
                            room_id: this.id,
                            last_chat_id: this.timeline.getLastChatId(),
                            first_chat_id: this.timeline.getFirstChatId(),
                            jump_to_chat_id: option.jumpTo,
                            unread_num: this.getUnreadNum(),
                            load_file_version: "2"
                        };
                        "mobile" == boot_1.RL.load_type && (req.limit_num = 20), this.filelist.loaded || (0 == this.file_num ? this.filelist.loaded = !0 : req.file = 1), this.tasklist.loaded || (0 == this.task_num ? this.tasklist.loaded = !0 : req.task = 1), this.description === !1 && (req.desc = 1);
                        var self = this;
                        boot_1.CW.get("gateway.php", req, function(json) {
                            var i, task_id, file_len, chat_len;
                            if (json.chat_list && (json.chat_list = json.chat_list.map(function(message) {
                                return message.id = parseInt(message.id, 10), message
                            })), json.task_dat)
                                for (task_id in json.task_dat) boot_1.TK.setTask(json.task_dat[task_id]);
                            if (json.file_list)
                                for (i = 0, file_len = json.file_list.length; i < file_len; i++) self.filelist.insertFile(json.file_list[i]);
                            if (self.filelist.setFileNum(json.file_num), option.jumpTo)
                                for (i = 0, chat_len = json.chat_list.length; i < chat_len; i++) self.timeline.insertChat(json.chat_list[i]);
                            else
                                for (i = 0, chat_len = json.chat_list.length; i < chat_len; i++) self.timeline.addChat(json.chat_list[i]);
                            void 0 != json.description && (self.description = json.description), void 0 != json.public_description && (self.public_description = json.public_description), boot_1.RM && boot_1.RM.id == self.id && (self.rswitch = !0, option.autoBuild && (option.autoBuild = !1, self.build(option))), "function" == typeof callback && callback()
                        })
                    },
                    prepareBuild: function() {
                        this.timeline || (this.timeline = new TimeLine_1.TimeLine(this)), this.filelist || (this.filelist = new FileList_1.FileList(this)), this.tasklist || (this.tasklist = new TaskList_1.TaskList(this))
                    },
                    build: function(user_option) {
                        boot_1.CW.cancelRead(this.id);
                        var option = $.extend({
                            jumpTo: 0,
                            jumpToCallback: function() {},
                            smoothScroll: !1,
                            highlight: !1
                        }, user_option);
                        return option.read_lock && (option.readLock = option.read_lock), option.jump_to_chat_id && (option.jumpTo = option.jump_to_chat_id), 0 == this.id ? void this.view.buildHome() : (this.prepareBuild(), option.readLock ? this.read_lock = !0 : this.read_lock = !1, void(this.id && (option.jumpTo && this.chat_num > this.timeline.chat_list.length && !this.timeline.chat_id2chat_dat[option.jumpTo] ? this.load(option) : 0 == this.buildtime && this.load(option), this.view.build(option))))
                    },
                    buildMemberList: function() {
                        this.view.buildMemberList()
                    },
                    free: function() {
                        for (var key in this) "id" != key && "del" != key && (this[key] && "object" == typeof this[key] && "function" == typeof this[key].free && this[key].free(), delete this[key])
                    }
                }
            }()
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/RoomView": 140,
            "../lib/common": 50,
            "./FileList": 56,
            "./TaskList": 63,
            "./TimeLine": 64
        }
    ],
    58: [
        function(require, module, exports) {
            "use strict";

            function RoomDialog() {
                var self = this;
                self.prepare = function() {
                    self.view = new RoomDialogView_1.RoomDialogView(self), self.view.prepare()
                }, self.buildMember = function() {
                    self.view.buildMember()
                }
            }
            var RoomDialogView_1 = require("../../web-new/view/RoomDialogView");
            exports.RoomDialog = RoomDialog
        }, {
            "../../web-new/view/RoomDialogView": 137
        }
    ],
    59: [
        function(require, module, exports) {
            "use strict";

            function RoomList() {
                var self = this;
                self.rooms = {}, self.lazy_select = 0, self.lazy_select_chat = 0, self.added_room_ids = [], self.has_update = !0, self.rebuild_room = !1, self.update_flag = {}, self.last_update_time_dat = {}, self.category_dat = {}, self.load_type = "", self.focused_room_id = 0, self.filter_word = "", self.filter_readonly = !1, self.filter_toonly = !1, self.filter_taskonly = !1, self.filter_internalonly = !1, self.filter_remain_flag = {}, self.filter_category = "", self.category_defaults = {
                    all: !0,
                    contact: !0,
                    group: !0,
                    mytask: !0
                }, self.role_map = {
                    1: "admin",
                    2: "member",
                    3: "readonly"
                }, self.room_type_map = {
                    1: "group",
                    2: "contact",
                    3: "my"
                }, self.preset_typemap = {
                    1: "group",
                    2: "check",
                    3: "document",
                    4: "meeting",
                    5: "event",
                    6: "project",
                    7: "business",
                    8: "study",
                    9: "security",
                    10: "star",
                    11: "idea",
                    12: "heart",
                    13: "magcup",
                    14: "beer",
                    15: "music",
                    16: "sports",
                    17: "travel"
                }, self.preset_type = {};
                for (var i in self.preset_typemap) self.preset_type[self.preset_typemap[i]] = !0;
                self.filtered_room_list = [], self.unread_total = 0, self.mytask_total = 0, self.unread_room_sum = 0, self.mention_room_sum = 0, self.mytask_room_sum = 0;
                var popuped_chat_flag = {}, sound_wait = !1;
                self.prepare = function() {
                    self.view = new RoomListView_1.RoomListView(self), self.view.prepare()
                }, self.getDefaultRoom = function() {
                    var room_id = 0;
                    return self.lazy_select && self.rooms[self.lazy_select] && (room_id = self.lazy_select), room_id || (room_id = boot_1.AC.getRoomId(boot_1.AC.myid)), self.rooms[room_id]
                }, self.getSortedRoomList = function(type) {
                    var keys = Object.keys(self.rooms),
                        room_list = keys.filter(function(key) {
                            return !self.rooms[key].sticky
                        }),
                        sticky_room_list = keys.filter(function(key) {
                            return self.rooms[key].sticky
                        });
                    return "name" === type ? self.sortByName(sticky_room_list).concat(self.sortByName(room_list)) : self.sortByLastUpdateTime(sticky_room_list).concat(self.sortByLastUpdateTime(room_list))
                }, self.sortByName = function(room_id_list) {
                    return room_id_list.sort(function(a, b) {
                        return self.rooms[a].getName().localeCompare(self.rooms[b].getName())
                    }), room_id_list
                }, self.sortByLastUpdateTime = function(room_id_list) {
                    return room_id_list.sort(function(a, b) {
                        var diff = self.last_update_time_dat[b] - self.last_update_time_dat[a];
                        return diff > 0 ? 1 : 0 == diff ? a - b : -1
                    }), room_id_list
                }, self.getSortedCategoryList = function() {
                    var cat_list = [];
                    for (var cat_id in self.category_dat) cat_list.push(cat_id);
                    return cat_list.sort(function(a, b) {
                        return self.category_dat[a].name.localeCompare(self.category_dat[b].name)
                    }), cat_list
                }, self.setLastUpdateTime = function(room_id, last_update_time) {
                    (void 0 == self.last_update_time_dat[room_id] || self.last_update_time_dat[room_id] < last_update_time) && (self.last_update_time_dat[room_id] = parseInt(last_update_time, 10))
                }, self.setInfoUpdate = function(room_id) {
                    self.prepareUpdate(room_id), self.update_flag[room_id].info = !0
                }, self.setPersonalUpdate = function(room_id) {
                    self.prepareUpdate(room_id), self.update_flag[room_id].personal = !0
                }, self.setTaskUpdate = function(room_id) {
                    self.prepareUpdate(room_id), self.update_flag[room_id].task = !0
                }, self.setMemberUpdate = function(room_id) {
                    self.prepareUpdate(room_id), self.update_flag[room_id].member = !0
                }, self.setDescUpdate = function(room_id) {
                    self.prepareUpdate(room_id), self.update_flag[room_id].desc = !0
                }, self.deleteRoom = function(room_id) {
                    self.has_update = !0, boot_1.RM && boot_1.RM.id == room_id && boot_1.RMUpdate(null), void 0 != self.rooms[room_id] && (self.rooms[room_id].free(), delete self.rooms[room_id], deleteRoomIdFromCategory(room_id)), boot_1.RL.view.deleteRoom(room_id)
                };
                var deleteRoomIdFromCategory = function(del_room_id) {
                    var category_room_id, category_room_list;
                    for (var cat_id in self.category_dat) {
                        category_room_list = self.category_dat[cat_id].list;
                        for (var i = 0, len = category_room_list.length; i < len; i++)
                            if (category_room_id = category_room_list[i], category_room_id == del_room_id) {
                                category_room_list.splice(i, 1);
                                break
                            }
                    }
                };
                self.setUpdate = function(flag) {
                    self.has_update = flag
                }, self.hasUpdate = function() {
                    return self.has_update
                }, self.prepareUpdate = function(room_id) {
                    void 0 == self.rooms[room_id] && (self.rooms[room_id] = new Room_1.Room(room_id)), self.has_update = !0, void 0 == self.update_flag[room_id] && (self.update_flag[room_id] = {})
                }, self.prepareRM = function() {
                    boot_1.RM || (boot_1.RMUpdate(boot_1.RL.getDefaultRoom()), boot_1.RM && (boot_1.RM.rswitch = !0, self.rebuild_room = !0))
                }, self.selectRoom = function(room_id, chat_id, user_option) {
                    void 0 === user_option && (user_option = {});
                    var option = $.extend({
                        jumpTo: 0,
                        jumpToCallback: function() {},
                        smoothScroll: !1,
                        messageHashUpdate: !0,
                        highlight: !1
                    }, user_option);
                    if (boot_1.RL && room_id) {
                        if (!boot_1.RL.rooms[room_id]) return void boot_1.CW.alert(L.chatroom_error_no_member);
                        self.view.selectRoom(room_id), boot_1.RL.rooms[room_id].rswitch = !0, chat_id = parseInt(chat_id, 10), chat_id || (chat_id = void 0), chat_id && (option.jumpTo = chat_id,
                            option.jump_to_chat_id = chat_id, void 0 !== user_option.highlight ? option.highlight = user_option.highlight : option.highlight = !0), boot_1.RL.rooms[room_id].build(option), self.focusRoom(room_id), (self.filter_readonly || self.filter_toonly || self.filter_taskonly || self.filter_internalonly) && setTimeout(function() {
                            boot_1.RL.build()
                        })
                    }
                }, self.selectCategory = function(category_id_or_type) {
                    switch (category_id_or_type) {
                        case "all":
                        case "contact":
                        case "group":
                        case "mytask":
                            break;
                        default:
                            if (void 0 == self.category_dat[category_id_or_type]) return
                    }
                    self.filter_category = category_id_or_type, self.filter_remain_flag = {}, self.view.selectCategory(category_id_or_type)
                }, self.getCategoryName = function(category_id_or_type) {
                    switch (category_id_or_type) {
                        case "all":
                            return L.chat_category_allchat;
                        case "contact":
                            return L.directchat;
                        case "group":
                            return L.groupchat;
                        case "mytask":
                            return L.chat_category_mytaskchat;
                        default:
                            return self.category_dat[category_id_or_type].name
                    }
                }, self.setReadOnly = function(flag) {
                    self.filter_readonly = flag, self.filter_remain_flag = {}, self.view.setReadOnly()
                }, self.setToOnly = function(flag) {
                    self.filter_toonly = flag, self.filter_remain_flag = {}, self.view.setToOnly()
                }, self.setTaskOnly = function(flag) {
                    self.filter_taskonly = flag, self.filter_remain_flag = {}, self.view.setTaskOnly()
                }, self.setInternalOnly = function(flag) {
                    self.filter_internalonly = flag, self.filter_remain_flag = {}, self.view.setInternalOnly()
                }, self.stickRoom = function(room_id, stick_on, end_callback) {
                    self.rooms[room_id].sticky = stick_on, self.build(), boot_1.CW.post("gateway.php", {
                        cmd: "stick_room",
                        room_id: room_id,
                        stick: stick_on
                    }, function() {
                        "function" == typeof end_callback && end_callback()
                    })
                }, self.load = function() {
                    var info_room_id_list = [],
                        personal_room_id_list = [],
                        member_room_id_list = [],
                        desc_room_id_list = [],
                        task_room_id_dat = {}, update = !1;
                    for (var room_id in self.update_flag) boot_1.RL.rooms[room_id] && (update = !0, void 0 != self.update_flag[room_id].info && info_room_id_list.push(room_id), void 0 != self.update_flag[room_id].personal && personal_room_id_list.push(room_id), void 0 != self.update_flag[room_id].member && member_room_id_list.push(room_id), void 0 != self.update_flag[room_id].task && (boot_1.RL.rooms[room_id].tasklist ? (task_room_id_dat[room_id] = boot_1.RL.rooms[room_id].tasklist.getTaskList(), 0 == task_room_id_dat[room_id].length && (task_room_id_dat[room_id] = 1)) : task_room_id_dat[room_id] = 1), void 0 != self.update_flag[room_id].desc && desc_room_id_list.push(room_id));
                    if (boot_1.RM && void 0 != self.update_flag[boot_1.RM.id])
                        for (var upd_type in self.update_flag[boot_1.RM.id])
                            if ("personal" != upd_type) {
                                self.rebuild_room = !0;
                                break
                            }
                    if (self.has_update = !1, self.update_flag = {}, update) {
                        var last_chat_id_dat = {};
                        if (info_room_id_list.length)
                            for (var idx = 0, room_len = info_room_id_list.length; idx < room_len; idx++) {
                                var room_id = String(info_room_id_list[idx]);
                                if (last_chat_id_dat[room_id] = {}, self.rooms[room_id]) {
                                    var room = self.rooms[room_id];
                                    if (last_chat_id_dat[room_id].c = room.chat_num, last_chat_id_dat[room_id].u = room.getUnreadNum(), room.timeline ? last_chat_id_dat[room_id].l = self.rooms[room_id].timeline.getLastChatId() : last_chat_id_dat[room_id].l = 0, room.filelist) {
                                        var file_num = room.filelist.getFileNum();
                                        last_chat_id_dat[room_id].f = $.isNumeric(file_num) ? file_num : room.filelist.getFileList().length, last_chat_id_dat[room_id].lf = room.filelist.getLastFileId()
                                    }
                                } else last_chat_id_dat[room_id].c = 0, last_chat_id_dat[room_id].u = 0, last_chat_id_dat[room_id].l = 0;
                                self.last_update_time_dat[room_id] ? last_chat_id_dat[room_id].t = self.last_update_time_dat[room_id] : last_chat_id_dat[room_id].t = 0
                            }
                        boot_1.CW.post("gateway.php", {
                            cmd: "get_room_info",
                            i: last_chat_id_dat,
                            p: personal_room_id_list,
                            m: member_room_id_list,
                            d: desc_room_id_list,
                            t: task_room_id_dat,
                            rid: boot_1.RL.lazy_select,
                            type: self.load_type,
                            load_file_version: "2"
                        }, function(json) {
                            if (json.room_dat)
                                for (var room_id in json.room_dat)
                                    if (json.room_dat.hasOwnProperty(room_id)) {
                                        var room = json.room_dat[room_id];
                                        room.chat_list && (room.chat_list = room.chat_list.map(function(message) {
                                            return message.id = parseInt(message.id, 10), message
                                        }))
                                    }
                            self.updateRoomData(json.room_dat)
                        })
                    } else self.has_update = !1, self.build()
                }, self.updateRoomData = function(room_dat) {
                    var popup_data, has_new_chat = !1,
                        has_new_room_chat = !1,
                        aid_flag = {};
                    for (var room_id in room_dat) {
                        var rval = room_dat[room_id];
                        void 0 == boot_1.RL.rooms[room_id] && (boot_1.RL.rooms[room_id] = new Room_1.Room(room_id));
                        var room = boot_1.RL.rooms[room_id],
                            unread_num = room.getUnreadNum();
                        if (room.mid = rval.mid, void 0 != rval.c && (room.chat_num = parseInt(rval.c, 10), room.name = "", room.allow_see_member = 1, room.allow_upload_file = 1, room.allow_add_task = 1, room.allow_send_message = 1, room.join_need_accept = 1, room.public = 0, room.link_name = "", room.header = "", room.icon = self.preset_typemap[1], room.icon_preset = !0), void 0 != rval.f && (room.file_num = parseInt(rval.f, 10)), void 0 != rval.t && (room.task_num = parseInt(rval.t, 10)), void 0 != rval.n && room.setName(rval.n), rval.mid && (room.read_num = 0, room.mytask_num = 0, room.mention_num = 0, room.sticky = 0), void 0 != rval.r && (room.read_num = parseInt(rval.r, 10)), void 0 != rval.mt && (room.mytask_num = parseInt(rval.mt, 10)), void 0 != rval.mn && (room.mention_num = parseInt(rval.mn, 10)), void 0 != rval.s && (room.sticky = parseInt(rval.s, 10)), void 0 != rval.aml && (room.allow_see_member = parseInt(rval.aml, 10)), void 0 != rval.af && (room.allow_upload_file = parseInt(rval.af, 10)), void 0 != rval.at && (room.allow_add_task = parseInt(rval.at, 10)), void 0 != rval.am && (room.allow_send_message = parseInt(rval.am, 10)), void 0 != rval.ja && (room.join_need_accept = parseInt(rval.ja, 10)), void 0 != rval.p && (room.public = parseInt(rval.p, 10)), void 0 != rval.ic && (self.preset_typemap[rval.ic] ? (room.icon = self.preset_typemap[rval.ic], room.icon_preset = !0) : (room.icon = rval.ic, room.icon_preset = !1)), void 0 != rval.hr && (room.header = rval.hr), void 0 != rval.pd && (room.public_description = rval.pd), void 0 != rval.ln && (room.link_name = rval.ln), void 0 != rval.d && (room.description = rval.d), void 0 != rval.m) {
                            for (var aid in rval.m) rval.m[aid] = self.role_map[rval.m[aid]], aid_flag[aid] = !0;
                            room.setMember(rval.m)
                        }
                        if (void 0 != rval.mr) {
                            room.member_request = rval.mr;
                            for (var idx in room.member_request) {
                                var mem_dat = room.member_request[idx];
                                boot_1.AC.isUnknown(mem_dat.id) && boot_1.AC.setAccountDat(mem_dat.id, mem_dat)
                            }
                        }
                        if (void 0 != rval.tp && (room.type = self.room_type_map[rval.tp]), void 0 != rval.lt && boot_1.RL.setLastUpdateTime(room_id, rval.lt), !unread_num && unread_num < room.getUnreadNum() && (has_new_room_chat = !0), rval.task_dat) {
                            room.tasklist || (room.tasklist = new TaskList_1.TaskList(room));
                            var task_id_list = [];
                            for (var task_id in rval.task_dat) boot_1.TK.setTask(rval.task_dat[task_id]), task_id_list.push(task_id);
                            task_id_list.length > 0 && (boot_1.TK.buildByTaskId(task_id_list), room.tasklist.loaded = !0)
                        }
                        if (rval.file_list) {
                            room.filelist || (room.filelist = new FileList_1.FileList(room));
                            for (var idx = 0, file_len = rval.file_list.length; idx < file_len; idx++) room.filelist.insertFile(rval.file_list[idx]);
                            room.filelist.setFileNum(rval.file_num), boot_1.FL.myfile_load_flag.loaded && boot_1.FL.buildAllMyFile()
                        }
                        if (rval.chat_list && rval.chat_list.length > 0) {
                            if (room.timeline || (room.timeline = new TimeLine_1.TimeLine(room)), boot_1.CW.enable_popup && !boot_1.CW.is_first_load)
                                for (var idx = 0, chat_len = rval.chat_list; idx < chat_len; idx++) aid_flag[rval.chat_list[idx].aid] = !0;
                            for (var idx = 0, chat_length = rval.chat_list.length; idx < chat_length; idx++) {
                                has_new_chat = !0;
                                var chat_dat = rval.chat_list[idx];
                                if (room.deleteSendingChatFromMessageId(chat_dat.id), room.timeline.addChat(chat_dat), boot_1.CW.enable_popup && !boot_1.CW.is_first_load) {
                                    var chat = rval.chat_list[idx];
                                    if (void 0 == popuped_chat_flag[chat.id]) {
                                        popuped_chat_flag[chat.id] = !0;
                                        var msg = L.notifier_newmessage;
                                        "1" == boot_1.ST.data.notifier_message && (msg = boot_1.CW.renderMessage(chat.msg, {
                                            text: !0
                                        })), popup_data = msg.length > 0 && boot_1.AC.myid != chat.aid ? {
                                            id: chat.id,
                                            aid: chat.aid,
                                            room_id: room.id,
                                            msg: msg
                                        } : void 0
                                    }
                                }
                            }
                        }
                        self.updateMasterData(room_id, rval)
                    }
                    var build_func = function() {
                        !popup_data || boot_1.ST.data.notifier_onlyto && !self.rooms[popup_data.room_id].timeline.chat_id2chat_dat[popup_data.id].mn || boot_1.CW.popup(boot_1.CW.getAvatarPanel(popup_data.aid, {
                            src: !0
                        }), boot_1.RL.rooms[popup_data.room_id].getName(), boot_1.AC.getName(popup_data.aid) + ":" + popup_data.msg, popup_data.room_id), boot_1.wfocus || !has_new_chat || sound_wait || boot_1.CW.is_first_load || 1 != boot_1.ST.data.popup_sound || !boot_1.audioObjSupport || (sound_wait = !0, boot_1.ST.view.isMultiSound(boot_1.ST.data.sound_type) ? has_new_room_chat ? boot_1.CW.playSound(boot_1.ST.data.sound_type) : boot_1.CW.playSound(boot_1.ST.data.sound_type + "2") : boot_1.CW.playSound(boot_1.ST.data.sound_type), setTimeout(function() {
                            sound_wait = !1
                        }, 1e3)), boot_1.CW.is_first_load && (boot_1.CW.is_first_load = !1), self.build()
                    };
                    for (var aid in aid_flag) boot_1.AC.getName(aid);
                    boot_1.AC.hasUnknown() ? boot_1.AC.getUnknown(build_func) : build_func(), self.view.updateRoomData()
                }, self.build = function(ignore_rebuild_room) {
                    if (ignore_rebuild_room = ignore_rebuild_room || !1, self.has_update) return self.load();
                    var room_list = self.getSortedRoomList();
                    self.filtered_room_list = [];
                    var room = null,
                        filter_category_user = !1,
                        filter_category_flag = {};
                    if (self.filter_category && !self.category_defaults[self.filter_category]) {
                        filter_category_user = !0;
                        for (var i_1 = 0, cat_room_len = self.category_dat[self.filter_category].list.length; i_1 < cat_room_len; i_1++) filter_category_flag[self.category_dat[self.filter_category].list[i_1]] = !0
                    }
                    self.unread_room_sum = 0, self.mention_room_sum = 0, self.mytask_room_sum = 0, self.unread_total = 0, self.mytask_total = 0;
                    var filter_word_list = [];
                    self.filter_word && (filter_word_list = boot_1.CW.splitWithSpace(self.filter_word));
                    for (var idx = 0; idx < room_list.length; idx++)
                        if (void 0 != room_list[idx]) {
                            room = self.rooms[room_list[idx]];
                            var unread_num = room.getUnreadNum(),
                                mention_num = 0;
                            if (unread_num > 0 && (self.unread_total += unread_num, self.unread_room_sum++, mention_num = room.getMentionNum(), mention_num > 0 && self.mention_room_sum++), room.mytask_num > 0 && (self.mytask_total += room.mytask_num, self.mytask_room_sum++), filter_word_list.length > 0) {
                                var name = room.getName();
                                if (!name) continue;
                                if ("contact" == room.type) {
                                    if (!boot_1.AC.isMatchedWithKeyList(filter_word_list, room.getAccountId())) continue
                                } else if (!boot_1.CW.isMatchedWithKeyList(filter_word_list, name)) continue
                            } else if (!boot_1.RM || room.id != boot_1.RM.id || void 0 == self.filter_remain_flag[room.id]) {
                                if (filter_category_user) {
                                    if (1 != filter_category_flag[room.id]) continue
                                } else {
                                    if ("contact" == self.filter_category && "contact" != room.type) continue;
                                    if ("group" == self.filter_category && "group" != room.type) continue;
                                    if ("mytask" == self.filter_category && 0 == room.mytask_num) continue
                                } if (self.filter_readonly && 0 == unread_num) continue;
                                if (self.filter_toonly && 0 == mention_num) continue;
                                if (self.filter_taskonly && 0 == room.mytask_num) continue;
                                if (self.filter_internalonly && !room.isInternal()) continue
                            }
                            self.filter_remain_flag[room.id] = !0, self.filtered_room_list.push(room_list[idx])
                        }
                    self.view.build(self.filtered_room_list), self.view.updateSumNumbers(), self.lazy_select ? void 0 != self.rooms[self.lazy_select] ? (self.selectRoom(self.lazy_select, self.lazy_select_chat), self.lazy_select = 0, self.lazy_select_chat = 0) : boot_1.RM && (self.lazy_select = 0, self.lazy_select_chat = 0, boot_1.CW.alert(L.chatroom_error_no_member, function() {
                        self.selectRoom(boot_1.RM.id)
                    })) : !ignore_rebuild_room && self.rebuild_room && boot_1.RM && boot_1.RM.build(), ignore_rebuild_room || (self.rebuild_room = !1)
                }, self.refreshCategory = function() {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_category"
                    }, function(json) {
                        self.updateCategory(json.cat_dat)
                    })
                }, self.updateCategory = function(cat_dat) {
                    self.category_dat = {};
                    for (var cat_id in cat_dat) self.category_dat[cat_id] = cat_dat[cat_id];
                    boot_1.RL.buildCategory()
                }, self.buildCategory = function() {
                    self.filter_category && !self.category_defaults[self.filter_category] && void 0 == self.category_dat[self.filter_category] && self.selectCategory("all"), self.view.buildCategory()
                }, self.getFocusedRoomId = function() {
                    return self.focused_room_id
                }, self.focusRoom = function(room_id) {
                    self.focused_room_id = room_id, self.view.focusRoom(room_id)
                }, self.clearFocusRoom = function() {
                    self.focused_room_id = 0, self.view.clearFocusRoom()
                }, self.showJoinPublicChatDialog = function(room_id) {
                    return void 0 != self.rooms[room_id] ? void self.selectRoom(room_id) : void boot_1.CW.get("gateway.php", {
                        cmd: "get_room_public_info",
                        rid: room_id
                    }, function(json) {
                        if (json.error) {
                            switch (json.error) {
                                case "joined":
                                    self.selectRoom(room_id)
                            }
                            json.message && boot_1.CW.alert(json.message)
                        }
                        if (void 0 != json.room_dat) {
                            var room_dat = json.room_dat;
                            room_dat.id = room_id, self.view.showJoinPublicChatDialog(room_dat)
                        }
                    })
                }, self.joinPublicChat = function(room_id) {
                    return void 0 != self.rooms[room_id] ? void self.selectRoom(room_id) : void boot_1.CW.post("gateway.php", {
                        cmd: "join_public_room",
                        rid: room_id
                    }, function(json) {
                        if (json.error) {
                            switch (json.error) {
                                case "joined":
                                    return void boot_1.RL.selectRoom(room_id);
                                case "limited":
                                    return void boot_1.CW.view.showLimitErrorDialog(json.title, json.message)
                            }
                            void 0 != json.message && boot_1.CW.alert(json.message)
                        } else void 0 != json.do_request ? boot_1.CW.alert(L.joinpublicchat_request_sent) : (boot_1.RL.lazy_select = room_id, boot_1.RL.setInfoUpdate(room_id), boot_1.RL.setMemberUpdate(room_id), boot_1.RL.setDescUpdate(room_id))
                    })
                }, self.updateMasterData = function(room_id, room_data) {
                    self.view.updateMasterData(room_id, room_data)
                }, self.getGroupChatNum = function() {
                    var group_chat_num = 0,
                        rooms = this.rooms;
                    for (var room_id in rooms) "group" === rooms[room_id].type && group_chat_num++;
                    return group_chat_num
                }, self.getStickyRoomNum = function() {
                    var cnt = 0,
                        rooms = this.rooms;
                    for (var room_id in rooms) rooms[room_id].sticky && cnt++;
                    return cnt
                }, self.isAddedRoomId = function(room_id) {
                    var room_id_int = parseInt(room_id, 10);
                    return self.added_room_ids.some(function(rid) {
                        return rid === room_id_int
                    })
                }, self.removeAddedRoomId = function(remove_room_id) {
                    var remove_room_id_int = parseInt(remove_room_id, 10);
                    self.added_room_ids = self.added_room_ids.filter(function(rid) {
                        return rid !== remove_room_id_int
                    })
                }
            }
            var Room_1 = require("./Room"),
                RoomListView_1 = require("../../web-new/view/RoomListView"),
                FileList_1 = require("./FileList"),
                TimeLine_1 = require("./TimeLine"),
                TaskList_1 = require("./TaskList"),
                boot_1 = require("../../web-new/controller/boot");
            exports.RoomList = RoomList
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/RoomListView": 138,
            "./FileList": 56,
            "./Room": 57,
            "./TaskList": 63,
            "./TimeLine": 64
        }
    ],
    60: [
        function(require, module, exports) {
            "use strict";

            function Search() {
                var self = this;
                self.xhr = null, self.prepare = function() {
                    self.view = new SearchView_1.SearchView(self), self.view.prepare()
                }, self.search = function(option, success_callback, error_callback) {
                    var proxy_prefix = "r";
                    "free" === SERVICE_PLAN && (proxy_prefix = "fs"), self.xhr = boot_1.CW.get(proxy_prefix + "/gateway.php", {
                        cmd: "search_message",
                        opt: option
                    }, function(json) {
                        success_callback(json.msg_dat)
                    }, error_callback)
                }, self.cancelSearch = function() {
                    self.xhr && self.xhr.abort && (self.xhr.abort(), self.xhr = null)
                }
            }
            var SearchView_1 = require("../../web-new/view/SearchView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.Search = Search
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/SearchView": 141
        }
    ],
    61: [
        function(require, module, exports) {
            "use strict";

            function Setting() {
                var self = this;
                self.data = {}, self.notification_data = {}, self.loaded = !1, self.announce_dat = {}, self.sound_default = "mallet", self.dateformat2short = {
                    "Y年m月d日": "m月d日",
                    "m/d/Y": "m/d",
                    "d/m/Y": "d/m",
                    "Y/m/d": "m/d",
                    "m-d-Y": "m-d",
                    "d-m-Y": "d-m",
                    "Y-m-d": "m-d",
                    "m.d.Y": "m.d",
                    "d.m.Y": "d.m",
                    "Y.m.d": "m.d",
                    "m/d-Y": "m/d"
                }, self.prepare = function() {
                    self.view = new SettingView_1.SettingView(self), self.view.prepare()
                }, self.isLoaded = function() {
                    return self.loaded
                }, self.getSetting = function(callback) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_setting"
                    }, function(json) {
                        json.setting_data && self.updateSetting(json.setting_data, callback)
                    })
                }, self.updateSetting = function(setting_data, callback) {
                    var changed_flag = {};
                    for (var key in setting_data) self.data[key] != setting_data[key] && (void 0 == self.data[key] ? changed_flag[key] = 1 : changed_flag[key] = 2), self.data[key] = setting_data[key];
                    if (void 0 == self.data.enter_action && (self.data.enter_action = "br"), void 0 == self.data.desktop_alert ? self.data.desktop_alert = 0 : self.data.desktop_alert = parseInt(self.data.desktop_alert, 10), void 0 == self.data.notifier_message ? self.data.notifier_message = 1 : self.data.notifier_message = parseInt(self.data.notifier_message, 10), void 0 == self.data.popup_sound ? self.data.popup_sound = 1 : self.data.popup_sound = parseInt(self.data.popup_sound, 10), void 0 == self.data.sound_type && (self.data.sound_type = self.sound_default), void 0 == self.data.sound_volume && (self.data.sound_volume = .5), void 0 == self.data.startup_help ? self.data.startup_help = 1 : self.data.startup_help = parseInt(self.data.startup_help, 10), void 0 == self.data.notifier_duration) self.data.notifier_duration = 10;
                    else {
                        var duration = parseInt(self.data.notifier_duration, 10);
                        self.data.notifier_duration = 0 == duration || 30 == duration ? 20 : duration
                    } if (void 0 == self.data.notifier_onlyto ? self.data.notifier_onlyto = 0 : self.data.notifier_onlyto = parseInt(self.data.notifier_onlyto, 10), void 0 == self.data.allow_search ? self.data.allow_search = 1 : self.data.allow_search = parseInt(self.data.allow_search, 10), void 0 == self.data.notify_term ? self.data.notify_term = 1 : self.data.notify_term = parseInt(self.data.notify_term, 10), void 0 == self.data.faviconstat ? self.data.faviconstat = 0 : self.data.faviconstat = parseInt(self.data.faviconstat, 10), void 0 == self.data.show_delmessage ? self.data.show_delmessage = 0 : self.data.show_delmessage = parseInt(self.data.show_delmessage, 10), void 0 == self.data.show_external ? self.data.show_external = 1 : self.data.show_external = parseInt(self.data.show_external, 10), void 0 == self.data.private_nickname ? self.data.private_nickname = 1 : self.data.private_nickname = parseInt(self.data.private_nickname, 10), void 0 == self.data.shorten_url ? self.data.shorten_url = 1 : self.data.shorten_url = parseInt(self.data.shorten_url, 10), void 0 == self.data.show_stepguide ? self.data.show_stepguide = 1 : self.data.show_stepguide = parseInt(self.data.show_stepguide, 10), void 0 == self.data.welcome ? self.data.welcome = 0 : self.data.welcome = parseInt(self.data.welcome, 10), void 0 == self.data.announce ? self.data.announce = 0 : self.data.desktop_alert = parseInt(self.data.desktop_alert, 10), void 0 == self.data.dateformat && (self.data.dateformat = L.dateformat), self.data.dateformat_short = self.dateformat2short[self.data.dateformat], self.loaded = !0, 2 == changed_flag.announce && self.getAnnounce(), boot_1.CW.init_loaded) {
                        if (void 0 == changed_flag.show_delmessage && void 0 == changed_flag.shorten_url || boot_1.RM && (boot_1.CW.last_timeline_buildkey = "", boot_1.RM.build()), void 0 != changed_flag.faviconstat && boot_1.ST.data.faviconstat) {
                            var room_id = 0;
                            boot_1.RM && boot_1.RM.id && (room_id = boot_1.RM.id), boot_1.RL.view.updateTitle(room_id)
                        }
                        void 0 != changed_flag.show_external && boot_1.RL.build()
                    }
                    boot_1.ST.view.updateSetting(), "function" == typeof callback && callback()
                }, self.sendChatSetting = function(setting_data, callback) {
                    "function" != typeof callback && (callback = function() {}), boot_1.CW.post("gateway.php", {
                        cmd: "send_chat_setting",
                        data: setting_data
                    }, callback)
                }, self.getAnnounce = function() {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_announce",
                        announce: boot_1.ST.data.announce
                    }, function(json) {
                        json.announce_dat && self.updateAnnounce(json.announce_dat)
                    })
                }, self.closeAnnounce = function() {
                    void 0 != self.announce_dat.id && (self.sendChatSetting({
                        announce: self.announce_dat.id
                    }), self.announce_dat = {}, self.view.updateAnnounce())
                }, self.updateAnnounce = function(announce_dat) {
                    self.announce_dat = announce_dat, self.view.updateAnnounce()
                }
            }
            var SettingView_1 = require("../../web-new/view/SettingView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.Setting = Setting
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/SettingView": 142
        }
    ],
    62: [
        function(require, module, exports) {
            "use strict";

            function Task() {
                var self = this;
                self.task_id2task_dat = {}, self.mytask_load_flag = {
                    loading: {
                        openmy: !1,
                        openassign: !1,
                        donemy: !1,
                        doneassign: !1
                    },
                    loaded: {
                        openmy: 0,
                        openassign: 0,
                        donemy: 0,
                        doneassign: 0
                    }
                }, self.prepare = function() {
                    self.view = new TaskView_1.TaskView(self), self.view.prepare()
                }, self.checkTask = function(task_id, to, only_refresh_view) {
                    if (self.hasTask(task_id)) {
                        var status = "open";
                        parseInt(to, 10) > 0 && (status = "done"), self.task_id2task_dat[task_id].st != status && (self.task_id2task_dat[task_id].st = status, only_refresh_view ? self.buildByTaskId(task_id, !0) : self.task_id2task_dat[task_id].aid != boot_1.AC.myid && self.task_id2task_dat[task_id].bid != boot_1.AC.myid || boot_1.CW.get("gateway.php", {
                            cmd: "check_task",
                            task_id: task_id,
                            to: to
                        }, function() {
                            self.reflashTaskList(self.task_id2task_dat[task_id].rid)
                        }))
                    }
                }, self.setTask = function(task_dat) {
                    task_dat.id = parseInt(task_dat.id, 10), task_dat.aid = parseInt(task_dat.aid, 10), task_dat.bid = parseInt(task_dat.bid, 10), task_dat.rid = parseInt(task_dat.rid, 10), task_dat.cid = parseInt(task_dat.cid, 10), self.task_id2task_dat[task_dat.id] = task_dat
                }, self.hasTask = function(task_id) {
                    return void 0 != self.task_id2task_dat[task_id]
                }, self.deleteTask = function(task_id, success_callback, error_callback) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "delete_task",
                        task_id: task_id
                    }, function(json) {
                        void 0 != json.storage && void 0 != json.storage_limit && self.updateStorageInfo(json.storage, json.storage_limit, json.storage_limit_time, json.is_storage_limit), self.deleteTaskStat(task_id, !0), self.reflashTaskList(self.task_id2task_dat[task_id].rid, !0, function() {
                            self.buildByTaskId(task_id)
                        }), "function" == typeof success_callback && success_callback(json)
                    }, function(json) {
                        "function" == typeof error_callback && error_callback(json)
                    })
                }, self.deleteTaskStat = function(task_id, only_reflash_data) {
                    self.hasTask(task_id) && "deleted" != self.task_id2task_dat[task_id].st && (self.task_id2task_dat[task_id].st = "deleted", delete self.task_id2task_dat[task_id].tn, only_reflash_data || self.buildByTaskId(task_id))
                }, self.refreshTask = function(task_id) {
                    self.hasTask(task_id) && boot_1.CW.get("gateway.php", {
                        cmd: "get_task",
                        tid_list: [task_id]
                    }, function(json) {
                        for (var tid in json.task_dat) {
                            var change = !1;
                            for (var key in json.task_dat[tid]) self.task_id2task_dat[tid][key] != json.task_dat[tid][key] && (self.task_id2task_dat[tid][key] = json.task_dat[tid][key], change = !0);
                            change && self.buildByTaskId(task_id)
                        }
                    })
                }, self.buildByTaskId = function(task_id, tasknum_refresh) {
                    self.view.buildByTaskId(task_id, tasknum_refresh)
                }, self.reflashTaskList = function(room_id, only_refresh_data, callback) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "load_task",
                        room_id: room_id,
                        status: "open"
                    }, function(json) {
                        for (var task_id in json.task_dat) self.setTask(json.task_dat[task_id]);
                        boot_1.RL.rooms[room_id].refreshTaskNum(), boot_1.RL.build(!0), boot_1.RM.tasklist.build(), "function" == typeof callback && callback(json)
                    })
                }, self.getMyTaskList = function(status, type) {
                    void 0 == type && (type = "my");
                    var task_list = [];
                    for (var task_id in boot_1.TK.task_id2task_dat) {
                        var task_type_id;
                        task_type_id = "my" == type ? boot_1.TK.task_id2task_dat[task_id].aid : boot_1.TK.task_id2task_dat[task_id].bid, task_type_id == boot_1.AC.myid && boot_1.TK.task_id2task_dat[task_id].st == status && task_list.push(task_id)
                    }
                    return task_list
                }, self.sortTaskList = function(task_list) {
                    task_list.sort(function(a, b) {
                        var a_lt = 0,
                            b_lt = 0;
                        return self.task_id2task_dat[a].lt && (a_lt = parseInt(self.task_id2task_dat[a].lt, 10)), self.task_id2task_dat[b].lt && (b_lt = parseInt(self.task_id2task_dat[b].lt, 10)), a_lt > 0 && 0 == b_lt ? -1 : b_lt > 0 && 0 == a_lt ? 1 : a_lt < b_lt ? -1 : a_lt > b_lt ? 1 : self.task_id2task_dat[a].aid == boot_1.AC.myid && self.task_id2task_dat[b].aid != boot_1.AC.myid ? -1 : self.task_id2task_dat[a].aid != boot_1.AC.myid && self.task_id2task_dat[b].aid == boot_1.AC.myid ? 1 : self.task_id2task_dat[a].id - self.task_id2task_dat[b].id
                    })
                }, self.buildAllMyTask = function(status, type) {
                    self.view.buildAllMyTask(status, type)
                }, self.getTaskListRows = function(task_list, type) {
                    return self.view.getTaskListRows(task_list, type)
                }
            }
            var TaskView_1 = require("../../web-new/view/TaskView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.Task = Task
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/TaskView": 144
        }
    ],
    63: [
        function(require, module, exports) {
            "use strict";

            function TaskList(room) {
                var self = this;
                self.view = new TaskListView_1.TaskListView(self), self.alltask_status = "open", self.loaded = !1, self.room = room
            }
            var TaskListView_1 = require("../../web-new/view/TaskListView"),
                boot_1 = require("../../web-new/controller/boot");
            exports.TaskList = TaskList, TaskList.prototype = {
                getTaskList: function(status) {
                    void 0 == status && (status = "open");
                    var task_list = [];
                    for (var task_id in boot_1.TK.task_id2task_dat) boot_1.TK.task_id2task_dat[task_id].rid == this.room.id && boot_1.TK.task_id2task_dat[task_id].st == status && task_list.push(task_id);
                    return task_list
                },
                build: function() {
                    this.view.build()
                },
                free: function() {
                    for (var task_id in boot_1.TK.task_id2task_dat) boot_1.TK.task_id2task_dat[task_id].rid == this.room.id && delete boot_1.TK.task_id2task_dat[task_id]
                }
            }
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/TaskListView": 143
        }
    ],
    64: [
        function(require, module, exports) {
            "use strict";

            function TimeLine(room) {
                this.view = new TimeLineView_1.TimeLineView(this), this.room = room, this.chat_list = [], this.chat_id2chat_dat = {}, this.sending_chat_list = [], this.has_old = !1, this.has_new_message = !1, this._loading = !1
            }
            var TimeLineView_1 = require("../../web-new/view/TimeLineView"),
                common_1 = require("../lib/common"),
                boot_1 = require("../../web-new/controller/boot");
            exports.TimeLine = TimeLine, TimeLine.prototype = {
                getLastChatId: function() {
                    return this.chat_list.length ? this.chat_list[this.chat_list.length - 1].id : 0
                },
                getFirstChatId: function() {
                    return this.chat_list.length ? this.chat_list[0].id : 0
                },
                getFirstChatIdOfTimeline: function() {
                    if (!this.chat_list.length) return 0;
                    var chat_list_without_deleted = this.chat_list.filter(function(chat) {
                        return "[deleted]" !== chat.msg
                    });
                    return chat_list_without_deleted.length ? 0 === boot_1.ST.data.show_delmessage ? chat_list_without_deleted[0].id : this.chat_list[0].id : 0
                },
                getChatList: function() {
                    return this.chat_list
                },
                getChatListWithoutDeleted: function() {
                    return this.chat_list.filter(function(chat) {
                        return "[deleted]" !== chat.msg
                    })
                },
                addChat: function(chat_dat) {
                    void 0 == this.chat_id2chat_dat[chat_dat.id] && (this.chat_list.push(chat_dat), this.chat_id2chat_dat[chat_dat.id] = chat_dat, this.has_new_message = !0, this.setMention(chat_dat.id))
                },
                insertChat: function(chat_dat) {
                    void 0 == this.chat_id2chat_dat[chat_dat.id] && (this.chat_list.unshift(chat_dat), this.chat_id2chat_dat[chat_dat.id] = chat_dat, this.setMention(chat_dat.id))
                },
                deleteChat: function(chat_id) {
                    void 0 != this.chat_id2chat_dat[chat_id] && (this.chat_id2chat_dat[chat_id].msg = "[deleted]", this.chat_id2chat_dat[chat_id].mn = !1, this.chat_id2chat_dat[chat_id].utm = common_1.time())
                },
                editChat: function(chat_id, message) {
                    void 0 != this.chat_id2chat_dat[chat_id] && (this.chat_id2chat_dat[chat_id].msg = message, this.chat_id2chat_dat[chat_id].utm = common_1.time())
                },
                refreshChat: function(chat_id) {
                    var self = this;
                    void 0 != this.chat_id2chat_dat[chat_id] && boot_1.CW.get("gateway.php", {
                        cmd: "get_chat",
                        chat_id: chat_id,
                        rid: this.room.id
                    }, function(json) {
                        for (var key in json.chat_dat) self.chat_id2chat_dat[chat_id][key] = json.chat_dat[key];
                        self.setMention(chat_id), boot_1.RM && boot_1.RM.id == self.room.id && self.build()
                    })
                },
                setMention: function(chat_id) {
                    var msg_dat = this.chat_id2chat_dat[chat_id];
                    void 0 != msg_dat && (msg_dat.msg.indexOf("[To:" + boot_1.AC.myid + "]") != -1 || msg_dat.msg.indexOf("[rp aid=" + boot_1.AC.myid + " to=") != -1 ? msg_dat.mn = !0 : msg_dat.mn = !1)
                },
                read: function(before_unread_num) {
                    this.view.read(before_unread_num)
                },
                build: function(user_option, scroll_to, highlight, sending_id) {
                    if (this.room.id)
                        if (void 0 != user_option && $.isPlainObject(user_option)) {
                            var option = $.extend({
                                smoothScroll: !1,
                                scrollTo: null,
                                everScroll: !1,
                                highlight: !1,
                                sendingId: null,
                                jumpToCallback: function() {}
                            }, user_option);
                            boot_1.CW.view.is_biwa ? this.view.build(option) : this.view.build(option.smoothScroll, option.scrollTo, option.highlight, option.sendingId)
                        } else {
                            var smooth = user_option;
                            this.view.build(smooth, scroll_to, highlight, sending_id)
                        }
                },
                loadOld: function(callback) {
                    var self = this;
                    if (self._loading) return !1;
                    var first_chat_id = self.getFirstChatId(),
                        first_displayed_chat_id = self.getFirstChatIdOfTimeline();
                    return 0 != first_chat_id && ("function" != typeof callback && (callback = function() {}), self._loading = !0, void boot_1.CW.get("gateway.php", {
                        cmd: "load_old_chat",
                        room_id: self.room.id,
                        first_chat_id: first_chat_id
                    }, function(json) {
                        json.chat_list.map(function(message) {
                            return message.id = parseInt(message.id, 10), message
                        });
                        for (var scroll_to = first_displayed_chat_id, aid_flag = {}, idx = 0, chat_len = json.chat_list.length; idx < chat_len; idx++) self.insertChat(json.chat_list[idx]), aid_flag[json.chat_list[idx].aid] = !0;
                        for (var aid in aid_flag) boot_1.AC.getName(aid);
                        var build_func = function() {
                            callback(), boot_1.RM && boot_1.RM.id == self.room.id && self.build({
                                smoothScroll: !1,
                                scrollTo: scroll_to
                            }), self._loading = !1
                        };
                        boot_1.AC.hasUnknown() ? boot_1.AC.getUnknown(build_func) : build_func()
                    }))
                },
                free: function() {}
            }
        }, {
            "../../web-new/controller/boot": 66,
            "../../web-new/view/TimeLineView": 145,
            "../lib/common": 50
        }
    ],
    65: [
        function(require, module, exports) {
            "use strict";

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) return obj;
                var newObj = {};
                if (null != obj)
                    for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && (newObj[key] = obj[key]);
                return newObj.
                default = obj, newObj
            }
            require("number-to-locale-string"), require("locale-compare-polyfill");
            var _index = require("./web-new/templates/index"),
                _chatworkTokenizerJs = require("chatwork-tokenizer-js"),
                tokenizer = _interopRequireWildcard(_chatworkTokenizerJs),
                _emoticons = require("./web-new/lib/emoticon/emoticons");
            tokenizer.setEmoticons(_emoticons.emoticons.getAllEmoticons().map(function(emo) {
                return emo.tag
            })), window.tokenizer = tokenizer, require("array.prototype.find").shim(), window.L = window.L || {
                storage_cancel_send_cancel: ""
            },
            function() {
                ["_loader", "_wrapper", "_hiddenIframe", "fb-root", "_audioList"].forEach(function(id) {
                    document.body.removeChild(document.getElementById(id))
                });
                var root = document.createElement("div");
                root.setAttribute("id", "root"), root.innerHTML = _index.template, document.body.appendChild(root)
            }(), document.documentElement.classList.add("svg"), require("./web-new/lib/vendor/jquery.scrollTo-1.4.5b"), require("./web-new/lib/vendor/jquery.markText"), require("./web-new/lib/cwui/cwCore"), require("./web-new/lib/cwui/lang/en"), require("./web-new/lib/cwui/lang/es"), require("./web-new/lib/cwui/lang/ja"), require("./web-new/lib/cwui/lang/th"), require("./web-new/lib/cwui/lang/vi"), require("./web-new/lib/cwui/lang/zh-cn"), require("./web-new/lib/cwui/lang/zh-tw"), require("./web-new/lib/cwui/lang/zz"), $.cwUI.L = $.cwUI.L[LANGUAGE], require("./web-new/lib/cwui/lang/cwDatePicker/en"), require("./web-new/lib/cwui/lang/cwDatePicker/es"), require("./web-new/lib/cwui/lang/cwDatePicker/ja"), require("./web-new/lib/cwui/lang/cwDatePicker/th"), require("./web-new/lib/cwui/lang/cwDatePicker/vi"), require("./web-new/lib/cwui/lang/cwDatePicker/zh-cn"), require("./web-new/lib/cwui/lang/cwDatePicker/zh-tw"), require("./web-new/lib/cwui/lang/cwDatePicker/zz"), $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker[LANGUAGE], require("./web-new/lib/cwui/cwFloatBox"), require("./web-new/lib/cwui/cwResize"), require("./web-new/lib/cwui/cwValidate"), require("./web-new/lib/cwui/widget/cwActionBar"), require("./web-new/lib/cwui/widget/cwButton"), require("./web-new/lib/cwui/widget/cwButtonBar"), require("./web-new/lib/cwui/widget/cwCheckBox"), require("./web-new/lib/cwui/widget/cwDatePicker"), require("./web-new/lib/cwui/widget/cwDialog"), require("./web-new/lib/cwui/widget/cwDropDown"), require("./web-new/lib/cwui/widget/cwElasticTextArea"), require("./web-new/lib/cwui/widget/cwFloatWindow"), require("./web-new/lib/cwui/widget/cwListTip"), require("./web-new/lib/cwui/widget/cwMessageTip"), require("./web-new/lib/cwui/widget/cwScrollTable"), require("./web-new/lib/cwui/widget/cwSearchBox"), require("./web-new/lib/cwui/widget/cwSelectBox"), require("./web-new/lib/cwui/widget/cwTabbedBar"), require("./web-new/lib/cwui/widget/cwToolTip"), require("./web-new/controller/boot")
        }, {
            "./web-new/controller/boot": 66,
            "./web-new/lib/cwui/cwCore": 73,
            "./web-new/lib/cwui/cwFloatBox": 74,
            "./web-new/lib/cwui/cwResize": 75,
            "./web-new/lib/cwui/cwValidate": 76,
            "./web-new/lib/cwui/lang/cwDatePicker/en": 77,
            "./web-new/lib/cwui/lang/cwDatePicker/es": 78,
            "./web-new/lib/cwui/lang/cwDatePicker/ja": 79,
            "./web-new/lib/cwui/lang/cwDatePicker/th": 80,
            "./web-new/lib/cwui/lang/cwDatePicker/vi": 81,
            "./web-new/lib/cwui/lang/cwDatePicker/zh-cn": 82,
            "./web-new/lib/cwui/lang/cwDatePicker/zh-tw": 83,
            "./web-new/lib/cwui/lang/cwDatePicker/zz": 84,
            "./web-new/lib/cwui/lang/en": 85,
            "./web-new/lib/cwui/lang/es": 86,
            "./web-new/lib/cwui/lang/ja": 87,
            "./web-new/lib/cwui/lang/th": 88,
            "./web-new/lib/cwui/lang/vi": 89,
            "./web-new/lib/cwui/lang/zh-cn": 90,
            "./web-new/lib/cwui/lang/zh-tw": 91,
            "./web-new/lib/cwui/lang/zz": 92,
            "./web-new/lib/cwui/widget/cwActionBar": 93,
            "./web-new/lib/cwui/widget/cwButton": 94,
            "./web-new/lib/cwui/widget/cwButtonBar": 95,
            "./web-new/lib/cwui/widget/cwCheckBox": 96,
            "./web-new/lib/cwui/widget/cwDatePicker": 97,
            "./web-new/lib/cwui/widget/cwDialog": 98,
            "./web-new/lib/cwui/widget/cwDropDown": 99,
            "./web-new/lib/cwui/widget/cwElasticTextArea": 100,
            "./web-new/lib/cwui/widget/cwFloatWindow": 101,
            "./web-new/lib/cwui/widget/cwListTip": 102,
            "./web-new/lib/cwui/widget/cwMessageTip": 103,
            "./web-new/lib/cwui/widget/cwScrollTable": 104,
            "./web-new/lib/cwui/widget/cwSearchBox": 105,
            "./web-new/lib/cwui/widget/cwSelectBox": 106,
            "./web-new/lib/cwui/widget/cwTabbedBar": 107,
            "./web-new/lib/cwui/widget/cwToolTip": 108,
            "./web-new/lib/emoticon/emoticons": 109,
            "./web-new/lib/vendor/jquery.markText": 113,
            "./web-new/lib/vendor/jquery.scrollTo-1.4.5b": 114,
            "./web-new/templates/index": 122,
            "array.prototype.find": 2,
            "chatwork-tokenizer-js": 9,
            "locale-compare-polyfill": 38,
            "number-to-locale-string": 41
        }
    ],
    66: [
        function(require, module, exports) {
            /*!
             * @preserve ChatWork http://www.chatwork.com/
             * Copyright (c) <%YEAR%> ChatWork,Inc.
             *
             *  -- Using Libraries. thanks a lot! --
             *
             * jQuery.ScrollTo
             * Copyright (c) 2007-2012 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
             * Dual licensed under MIT and GPL.
             * Date: 12/14/2012
             *
             * --
             *
             * clipboard.js v1.5.15
             * https://zenorocha.github.io/clipboard.js
             *
             * Licensed MIT © Zeno Rocha
             *
             * --
             *
             */
            "use strict";

            function RMUpdate(newRM) {
                window.RM = exports.RM = newRM
            }
            var ChatWork_1 = require("../../core/model/ChatWork"),
                Account_1 = require("../../core/model/Account"),
                File_1 = require("../../core/model/File"),
                Task_1 = require("../../core/model/Task"),
                RoomList_1 = require("../../core/model/RoomList"),
                RoomDialog_1 = require("../../core/model/RoomDialog"),
                RoomSub_1 = require("../model/RoomSub"),
                Setting_1 = require("../../core/model/Setting"),
                ChatSend_1 = require("../../core/model/ChatSend"),
                Search_1 = require("../../core/model/Search"),
                Analytics_1 = require("../../core/lib/Analytics"),
                CheatSheet_1 = require("../../core/model/CheatSheet"),
                theme_1 = require("../lib/theme"),
                common_1 = require("../lib/common"),
                PLATFORM = "web";
            exports.CW = new ChatWork_1.ChatWork(CLIENT_VER), exports.AC = new Account_1.Account(MYID), exports.FL = new File_1.File, exports.TK = new Task_1.Task, exports.RL = new RoomList_1.RoomList, exports.RD = new RoomDialog_1.RoomDialog, exports.RS = new RoomSub_1.RoomSub, exports.ST = new Setting_1.Setting, exports.CS = new ChatSend_1.ChatSend, exports.SC = new Search_1.Search, exports.AL = new Analytics_1.Analytics, exports.RM = null, exports.TM = theme_1.THEME.blue, exports.CHEATSHEET = new CheatSheet_1.CheatSheet, window.CW = exports.CW, window.AC = exports.AC, window.FL = exports.FL, window.TK = exports.TK, window.RL = exports.RL, window.RD = exports.RD, window.RS = exports.RS, window.ST = exports.ST, window.CS = exports.CS, window.SC = exports.SC, window.AL = exports.AL, window.RM = exports.RM, window.TM = exports.TM, window.CHEATSHEET = exports.CHEATSHEET, exports.RMUpdate = RMUpdate, exports.wfocus = !0, exports.tlscroll = !1, exports.up_key = 0, exports.scroll_cancel = null, exports.use_local_comet = 0 === USE_COMET, exports.outerLayout = void 0, exports.menuLayout = void 0, exports.middleLayout = void 0, exports.subLayout = void 0, exports.innerLayout = void 0, exports.audioObjSupport = void 0, exports.basicAudioSupport = void 0, exports.canPlayOgg = void 0, exports.canPlayMp3 = void 0;
            var audio;
            try {
                audio = new Audio(""), exports.audioObjSupport = Boolean(audio.canPlayType), exports.basicAudioSupport = Boolean(!exports.audioObjSupport && audio.play)
            } catch (e) {
                exports.audioObjSupport = !1, exports.basicAudioSupport = !1
            }
            exports.audioObjSupport && (exports.canPlayOgg = "no" != audio.canPlayType("audio/ogg") && "" != audio.canPlayType("audio/ogg"), exports.canPlayMp3 = "no" != audio.canPlayType("audio/mpeg") && "" != audio.canPlayType("audio/mpeg")), $.fn.dialog = function() {
                return this
            }, $.fn.tabs = function() {
                return this
            }, $.fn.button = function() {
                return this
            }, $.fn.draggable = function() {
                return this
            }, $.fn.resizable = function() {
                return this
            }, $.fn.effect = function() {
                return this
            }, $.hashchangeHandler = function() {
                var match = location.hash.match(/#!rid(\d+)$/);
                match && exports.RL.selectRoom(match.pop())
            }, exports.DIALOG_CANCEL_BUTTON = null, exports.DIALOG_CLOSE_BUTTON = null, $(function() {
                var startTime = Date.now();
                $C.register("document", function() {
                    return $(document)
                }).register("body", function() {
                    return $(document.body)
                }).register("#cw_send_area .cw_buttons", function() {
                    return $C("#cw_send_area").find(".cw_buttons")
                }).register("#cw_room_setting_box .admin", function() {
                    return $C("#cw_room_setting_box").find(".admin")
                }).register("#cw_room_setting_box .group", function() {
                    return $C("#cw_room_setting_box").find(".group")
                }).register("#cw_room_setting_box .contact", function() {
                    return $C("#cw_room_setting_box").find(".contact")
                }).register("#cw_room_setting_box .my", function() {
                    return $C("#cw_room_setting_box").find(".my")
                }).register("#cw_room_setting_box li", function() {
                    return $C("#cw_room_setting_box").find("li")
                }), $.cwFloatWindow.setDefaultOption({
                    wrapperSelector: "#_mainContent"
                }), $.cwActionBar.setDefaultOption({
                    descriptionDelay: exports.TM.messagetip_delay
                }), $.cwButton.setDefaultOption({
                    descriptionDelay: exports.TM.messagetip_delay
                }), $.cwButtonBar.setDefaultOption({
                    descriptionDelay: exports.TM.messagetip_delay
                });
                var dialog_cancel = function() {
                    $(this).dialog("close")
                };
                exports.DIALOG_CANCEL_BUTTON = {
                    text: L.button_cancel,
                    click: dialog_cancel
                }, exports.DIALOG_CLOSE_BUTTON = {
                    text: L.button_close,
                    click: dialog_cancel
                }, exports.CW.prepare(), exports.CW.view.onEndInitLoad(function() {
                    exports.AL.sendToTresureData("init_load", {
                        time: Date.now() - startTime
                    })
                }), exports.CW.view.onPostLoad(function() {
                    var customvars = {
                        plan: exports.CW.plan || "",
                        device: PLATFORM,
                        lang: LANGUAGE,
                        gnum: exports.RL.getGroupChatNum(),
                        cnum: exports.AC.getContactNum(),
                        useday: Math.floor((Number(new Date) - Number(new Date(1e3 * Number(REG_TIME)))) / 864e5),
                        pnum: exports.RL.getStickyRoomNum(),
                        dhash: DHASH
                    };
                    exports.AL.start(customvars), common_1._is_oldmsie || window.addEventListener("message", function(e) {
                        var message;
                        try {
                            message = JSON.parse(e.data)
                        } catch (err) {
                            return
                        }
                        if ("addContactAd" === message.event) {
                            var aid = Number(message.targetAccountId);
                            if (aid) {
                                var send_contact_request = function() {
                                    exports.AC.view.requestContact([aid], null, function() {
                                        exports.CW.view.alert(L.contact_connect_from_ads_complete)
                                    })
                                };
                                exports.CW.view.confirmSending(L.contact_connect_from_ads_confirm, send_contact_request, function() {})
                            }
                        }
                    }), window.addEventListener("error", function(e) {
                        var params = {
                            name: e.name,
                            message: e.message
                        };
                        exports.AL.trackException(params)
                    }, !1), setInterval(function() {
                        exports.AL.trackEvent("session", "update")
                    }, 3e5)
                }), exports.AC.prepare(), exports.FL.prepare(), exports.TK.prepare(), exports.RL.prepare(), exports.RD.prepare(), exports.RS.prepare(), exports.ST.prepare(), exports.CS.prepare(), exports.SC.prepare(), exports.CHEATSHEET.prepare(), exports.CW.buildLayout(), exports.use_local_comet && (exports.CW.request.use_local_comet = !0), exports.CW.watch(), $.ajaxSetup({
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    cache: !1
                }), $C("document").bind("ajaxSend", function(c, xhr) {
                    $(window).bind("beforeunload", function() {
                        xhr.abort()
                    })
                }), window.onerror = function(e) {
                    e.toString().indexOf("Internal error") != -1 && (alert("内部エラーが発生しました。ChatWorkをリロードします"), document.location.reload())
                };
                var wfocusin = function() {
                    exports.wfocus = !0, exports.CW.read(), exports.CW.watch()
                }, wfocusout = function() {
                        exports.wfocus = !1, exports.CW.cancelRead()
                    };
                common_1._is_msie ? ($C("document").bind("focusin", wfocusin), $C("document").bind("focusout", wfocusout), $C("#cw_send_file_mask").css("opacity", 1)) : (window.addEventListener("focus", wfocusin, !1), window.addEventListener("blur", wfocusout, !1)), $("label").mousedown(function() {
                    return !1
                }), $("._searchBox").cwSearchBox(), $("._checkBox").cwCheckBox(), $("._button").cwButton();
                var preload_list = ["./image/sp_icon.png"];
                if (preload_list.length > 0)
                    for (var img = new Image, i = 0; i < preload_list.length; i++) img.src = preload_list[i];
                exports.CW.view.onEndInitLoad(function() {
                    exports.CW.checkNotificationPermission()
                }), $(window).bind("hashchange", $.hashchangeHandler)
            })
        }, {
            "../../core/lib/Analytics": 48,
            "../../core/model/Account": 51,
            "../../core/model/ChatSend": 52,
            "../../core/model/ChatWork": 53,
            "../../core/model/CheatSheet": 54,
            "../../core/model/File": 55,
            "../../core/model/RoomDialog": 58,
            "../../core/model/RoomList": 59,
            "../../core/model/Search": 60,
            "../../core/model/Setting": 61,
            "../../core/model/Task": 62,
            "../lib/common": 69,
            "../lib/theme": 112,
            "../model/RoomSub": 116
        }
    ],
    67: [
        function(require, module, exports) {
            "use strict";

            function Request() {
                var self = this;
                self.use_local_comet = !1, self.ajax = function(params) {
                    return "POST" == params.type && (params.data = {
                        pdata: JSON.stringify(params.data)
                    }), $.ajax(params)
                }, self.checkOnline = function(callback_success, callback_error) {
                    "function" != typeof callback_success && (callback_success = function() {}), "function" != typeof callback_error && (callback_error = function() {}), $.ajax({
                        type: "GET",
                        dataType: "json",
                        async: !0,
                        url: SERVER_PATH + "/gateway.php?cmd=check_online&myid=" + boot_1.AC.myid + "&_v=" + boot_1.CW.version + "&_av=" + boot_1.CW.api_version + "&_t=" + ACCESS_TOKEN + "&ln=" + LANGUAGE,
                        success: function(json) {
                            if (json && 1 == json.status.success) callback_success();
                            else {
                                var error_msg = "";
                                json && json.status && (error_msg = json.status.message), callback_error(error_msg)
                            }
                        },
                        error: function() {
                            callback_error("TIMEOUT")
                        }
                    })
                };
                var session_storage;
                session_storage = "undefined" == typeof sessionStorage ? new Storage : sessionStorage;
                var retry_timeout = 3e3,
                    retry_remain_count = 7;
                self.comet = function(token_key) {
                    if (self.use_local_comet) boot_1.CW.get("gateway.php", {
                        cmd: "local_comet",
                        last_id: boot_1.CW.last_id,
                        new: 1
                    }, function(json) {
                        retry_timeout = 1e3, json.updated && boot_1.CW.watch(), self.comet()
                    }, function() {
                        retry_timeout *= 1.2, setTimeout(function() {
                            self.comet()
                        }, retry_timeout)
                    });
                    else {
                        for (; $("#wcs-iframe").length;) $("#wcs-iframe").remove();
                        if (token_key) connect(token_key);
                        else {
                            var account_id = boot_1.AC.myid,
                                saved_account_id = session_storage.getItem("session.account_id");
                            saved_account_id ? account_id != saved_account_id && (clear_channel_token_data(), session_storage.setItem("session.account_id", account_id)) : (session_storage.getItem("session.account_id") && clear_channel_token_data(), session_storage.setItem("session.account_id", account_id));
                            var saved_token_key = session_storage.getItem("channel_token_key");
                            saved_token_key ? connect(saved_token_key) : boot_1.CW.post("gateway.php", {
                                cmd: "get_comet_token_key"
                            }, function(json) {
                                retry_timeout = 3e3, retry_remain_count = 7, connect(json.token_key, !0), session_storage.setItem("channel_token_key", json.token_key)
                            }, function() {
                                return !(retry_remain_count < 0) && (setTimeout(function() {
                                    self.comet()
                                }, retry_timeout), retry_timeout *= 2, void retry_remain_count--)
                            })
                        }
                    }
                };
                var comet_timeout = 3e3,
                    comet_retry_remain_count = 7,
                    connect = function(token_key, is_first) {
                        var saved_channel_token = session_storage.getItem("channel_token");
                        saved_channel_token ? open_socket(saved_channel_token) : $.getJSON(COMET_SERVER_PATH + "/token?callback=?", {
                            myid: boot_1.AC.myid,
                            key: token_key
                        }).done(function(json) {
                            json.status && json.status.success && (session_storage.setItem("channel_token", json.result.token), open_socket(json.result.token), comet_timeout = 3e3, comet_retry_remain_count = 7, 1 != is_first && boot_1.CW.post("gateway.php", {
                                cmd: "update_comet_token_key",
                                token_key: token_key
                            }))
                        }).fail(function() {
                            return !(comet_retry_remain_count < 0) && (setTimeout(function() {
                                self.comet(token_key, is_first)
                            }, comet_timeout), comet_timeout *= 2, void comet_retry_remain_count--)
                        })
                    }, open_socket = function(token) {
                        var channel = new goog.appengine.Channel(token),
                            socket = channel.open(),
                            reconnect = function() {
                                clear_channel_token_data(), self.comet()
                            };
                        socket.onopen = function() {
                            setTimeout(reconnect, 54e5)
                        }, socket.onerror = reconnect, socket.onmessage = function(e) {
                            switch (e.data) {
                                case "watch":
                                    boot_1.CW.watch();
                                    break;
                                case "reconnect":
                                    clear_channel_token_data(), self.comet()
                            }
                        }
                    }, clear_channel_token_data = function() {
                        session_storage.removeItem("channel_token"), session_storage.removeItem("channel_token_key")
                    }
            }
            var boot_1 = require("../controller/boot");
            exports.Request = Request
        }, {
            "../controller/boot": 66
        }
    ],
    68: [
        function(require, module, exports) {
            "use strict";

            function Storage() {
                var self = this;
                self.values = {}, self.setItem = function(key, value) {
                    return self.values[key] = value, this
                }, self.getItem = function(key) {
                    return self.values[key]
                }, self.removeItem = function(key) {
                    return void 0 != self.values[key] && delete self.values[key], this
                }
            }
            exports.Storage = Storage
        }, {}
    ],
    69: [
        function(require, module, exports) {
            "use strict";

            function mlength(str) {
                for (var len = 0, i = 0; i < str.length; i++) {
                    var code = str.charCodeAt(i);
                    code > 255 && len++, len++
                }
                return len
            }

            function get_file_extension(filename) {
                var split = filename.split("."),
                    extension = "";
                return split.length > 1 && (extension = split[split.length - 1].toLowerCase()), extension
            }
            exports._is_oldmsie = "undefined" == typeof window.addEventListener && "undefined" == typeof document.getElementsByClassName, exports._is_msie = document.uniqueID, exports._is_mac = navigator.appVersion.indexOf("Mac") != -1, window._is_mac = exports._is_mac, exports._has_fileapi = !! window.FormData, exports._has_sandbox = "sandbox" in document.createElement("iframe"), exports.NotificationAPI = null, window.wfocus = void 0, jQuery.support.isWindowsFirefox = function() {
                return !!/windows.+\sfirefox\//.test(navigator.userAgent.toLowerCase())
            }(), window.webkitNotifications ? exports.NotificationAPI = {
                createNotification: function(icon, title, body) {
                    return webkitNotifications.createNotification(icon, title, body)
                },
                checkPermission: function() {
                    return webkitNotifications.checkPermission()
                },
                requestPermission: function(callback) {
                    webkitNotifications.requestPermission(function() {
                        callback(exports.NotificationAPI.checkPermission())
                    })
                }
            } : window.Notification && (exports.NotificationAPI = {
                createNotification: function(icon, title, body) {
                    var popup = new Notification(title, {
                        icon: icon,
                        body: body
                    });
                    return popup.show = function() {}, popup.cancel = function() {
                        popup.close()
                    }, popup
                },
                checkPermission: function() {
                    switch (Notification.permission) {
                        case "granted":
                            return 0;
                        case "default":
                            return 1;
                        case "denied":
                            return 2
                    }
                },
                requestPermission: function(callback) {
                    Notification.requestPermission(function() {
                        callback(exports.NotificationAPI.checkPermission())
                    })
                }
            }), window.NotificationAPI = exports.NotificationAPI, $.fn.extend({
                input: function(val) {
                    return this.click().focus().val(val), this
                }
            }), exports.mlength = mlength, exports.get_file_extension = get_file_extension, window.$C = null,
            function() {
                var cache = {}, register = {};
                $C = function(selector) {
                    return void 0 == cache[selector] && (void 0 == register[selector] ? cache[selector] = $(selector) : (cache[selector] = register[selector](), delete register[selector])), cache[selector]
                }, $C.register = function(selector, func) {
                    return register[selector] = func, this
                }
            }()
        }, {}
    ],
    70: [
        function(require, module, exports) {
            "use strict";
            var _parseUrl = function(url) {
                try {
                    return new URL(url)
                } catch (e) {
                    return
                }
            };
            try {
                new URL(location.href)
            } catch (e) {
                var domLink_1 = document.createElement("a");
                _parseUrl = function(url) {
                    return domLink_1.href = url, domLink_1
                }
            }
            exports.parseUrl = _parseUrl
        }, {}
    ],
    71: [
        function(require, module, exports) {
            "use strict";

            function renderAstToHtml(text, renderAstOption) {
                var ast = chatwork_tokenizer_js_1.
                default (text), contentType = {
                    message: function(content) {
                        return escapeHtmlContextString(content.value)
                    },
                    url: function(content) {
                        var url = content.value,
                            result = '<a\n                href="' + getSafeUrlString(url) + '"\n                title="' + escapeAttributeContextString(url) + '"\n                target="_blank"\n                ' + (renderAstOption.display_trim_link ? 'class="timelineLinkTrim"' : "") + "\n                >" + escapeHtmlContextString(url) + "</a>",
                            appendLink = getAppendLink(url) || "";
                        return result + " " + appendLink
                    },
                    emoticon: function(content) {
                        var emoticon = emoticons_1.emoticons.getEmoticonWithTag(content.value);
                        return emoticon ? '<img src="' + emoticon.src + '" alt="' + emoticon.tag + '" title="' + emoticon.title + '" class="ui_emoticon">' : contentType.message(content.value)
                    },
                    hr: function(content) {
                        return '<hr size="1">'
                    },
                    deleted: function(content) {
                        return ""
                    },
                    code: function(content) {
                        var code = content.content.reduce(function(text, msg) {
                            return text + (msg.value || "")
                        }, ""),
                            text = escapeHtmlContextString(code.replace(/^\r?\n/, "") || "");
                        return '<code class="chatCode">' + text + "</code>"
                    },
                    preview: function(content) {
                        var id = parseInt(content.attributes.id, 10),
                            ht = parseInt(content.attributes.ht, 10);
                        return '<div><img\n                class="_filePreview imagePreview"\n                data-file-id="' + id + '"\n                style="height:' + ht + 'px"\n                src="gateway.php?cmd=preview_file&bin=1&file_id=' + id + '"/></div>'
                    },
                    pname: function(content) {
                        var id = parseInt(content.attributes.id, 10);
                        return boot_1.CW.getName(id)
                    },
                    picon: function(content) {
                        var id = parseInt(content.attributes.id, 10);
                        return boot_1.CW.getAvatarPanel(id, {
                            size: "tiny"
                        })
                    },
                    piconname: function(content) {
                        var id = parseInt(content.attributes.id, 10),
                            picon = contentType.picon({
                                attributes: {
                                    id: id
                                }
                            }),
                            pname = contentType.pname({
                                attributes: {
                                    id: id
                                }
                            });
                        return picon + " " + pname
                    },
                    info: function(content) {
                        var result = render(content.content);
                        return '<div class="chatInfo">' + result + "</div>"
                    },
                    title: function(content) {
                        var result = render(content.content);
                        return '<div class="title"><span class="icoFontInfo marginRight"></span>' + result + "</div>"
                    },
                    to: function(content) {
                        var aid = parseInt(content.attributes.id, 10),
                            picon = contentType.picon({
                                attributes: {
                                    id: aid
                                }
                            });
                        return '<span class="chatTimeLineTo">TO</span>' + picon
                    },
                    rp: function(content) {
                        var aid = parseInt(content.attributes.aid, 10),
                            _a = (content.attributes.to || "").split("-").map(function(_) {
                                return _.replace(/\D/g, "")
                            }),
                            rid = _a[0],
                            mid = _a[1],
                            picon = contentType.picon({
                                attributes: {
                                    id: aid
                                }
                            });
                        return '<div\n                class="chatTimeLineReply _replyMessage"\n                data-rid="' + rid + '"\n                data-mid="' + mid + '"><span class="icoFontActionReply icoSizeSmall"></span><span>RE</span></div>' + picon
                    },
                    qt: function(content) {
                        var result = render(content.content, {
                            quoteContent: !0
                        });
                        return '<div class="dev_quote chatQuote"><div class="quoteLeftArea"><span class="icoFontMessegeQuote"></span></div>' + result + "</div>"
                    },
                    qtmeta: function(content) {
                        var aid = parseInt(content.attributes.aid, 10),
                            time = parseInt(content.attributes.time, 10),
                            piconname = contentType.piconname({
                                attributes: {
                                    id: aid
                                }
                            });
                        if (!time) return '<div class="title">' + piconname + "</div>";
                        var date = contentType.date({
                            attributes: {
                                id: time
                            }
                        });
                        return '<div class="title">' + piconname + "<time>" + date + "</time></div>"
                    },
                    live: function(content) {
                        if (!content.attributes.id || !content.attributes.rid) return "";
                        var id = content.attributes.id.replace(/\W/g, ""),
                            rid = parseInt(content.attributes.rid, 10);
                        return "ipad" !== MOBILE && boot_1.RL.rooms[rid] ? '<div class="_joinLive button btnSuccess" data-live-id="' + id + '"><span class="icoFontVideoChat"></span><span>' + L.live_join + "</span></div>" : '<div class="button btnDisable"><span class="icoFontVideoChat"></span><span>' + L.live_join + "</span></div>"
                    },
                    task: function(content) {
                        var result = render(content.content);
                        "string" == typeof content.attributes.lt && (content.attributes.lt = parseInt(content.attributes.lt, 10));
                        var taskHtml = boot_1.TK.view.getTaskPanel(content.attributes, {
                            type: "timeline",
                            mid: renderAstOption.mid
                        });
                        return "" + taskHtml + result + "</div></div>"
                    },
                    dtext: function(content) {
                        return content.attributes.id in L ? L[content.attributes.id] : "[dtext:" + escapeHtmlContextString(content.attributes.id) + "]"
                    },
                    download: function(content) {
                        if (!renderAstOption.disable_download_file) {
                            var esetLink = renderAstOption.display_eset_link ? '<div class="esetLink"><a href="http://www.eset-smart-security.jp/go/101304/e42/" target="_blank">' + L._chatwork_file_upload_eset_link + "</a></div>" : "",
                                id = parseInt(content.attributes.id, 10),
                                result = render(content.content),
                                previewLink = function() {
                                    var ext = (result.match(/.+\.(\w+)\s+\(.+?\)$/) || [""]).pop();
                                    if (!filePreview_1.filePreview.canPlayTypes(ext)) return "";
                                    var previewType = filePreview_1.filePreview.getPreviewType(ext),
                                        preview = "video" === previewType ? L.preview_video : L.preview;
                                    if ("image" === previewType) return ' <a class="_filePreview timelineLinkAppend" data-file-id="' + id + '">' + preview + "</a>";
                                    var fileName = result.replace(/\s*\(.+?\)$/, "");
                                    return ' <a class="_previewLink timelineLinkAppend"\n                        data-url="gateway.php?cmd=download_file&bin=1&file_id=' + id + '&preview=1"\n                        data-type="chatworkFilePreview" data-content-id="' + fileName + '">' + preview + "</a>"
                                }();
                            return '<div><a\n            href="gateway.php?cmd=download_file&bin=1&file_id=' + id + '"\n            target="_downloadFrame">' + result + "</a> " + previewLink + "</div>" + esetLink
                        }
                    },
                    date: function(content) {
                        return boot_1.CW.getDate(content.attributes.id)
                    }
                }, render = function(contexts, renderOption) {
                    void 0 === renderOption && (renderOption = {});
                    var results = contexts.reduce(function(base, content) {
                        if (contentType[content.type]) return base.concat(contentType[content.type](content))
                    }, []);
                    return renderOption.quoteContent ? [].concat(results.shift(), '<div class="quoteText">', results, "</div>").join("") : results.join("")
                };
                return render(ast)
            }
            var chatwork_tokenizer_js_1 = require("chatwork-tokenizer-js"),
                escape = require("lodash.escape"),
                emoticons_1 = require("../emoticon/emoticons"),
                filePreview_1 = require("../file-preview/filePreview"),
                boot_1 = require("../../controller/boot"),
                common_1 = require("../../../core/lib/common"),
                parseUrl_1 = require("./parseUrl"),
                escapeHtmlContextString = function(text) {
                    var result = escape(text);
                    return encodeURI(result), result
                }, escapeAttributeContextString = function(text) {
                    return escapeHtmlContextString(text)
                }, sanitizingLinkElement = "object" == typeof document ? document.createElement("a") : void 0,
                getSafeUrlString = function(url) {
                    if (sanitizingLinkElement.setAttribute("href", url), !sanitizingLinkElement.protocol.match(/^https?/)) return "";
                    var href = sanitizingLinkElement.getAttribute("href");
                    return encodeURI(href), href
                }, getChatworkDomainAppendLink = function(url) {
                    var linkCode = (url.match(/\/g\/([-\w]+)$/) || []).pop();
                    if (linkCode) return ' <a class="_groupchatLink timelineLinkAppend" data-linkCode="' + linkCode + '">' + L.message_join_groupchat + "</a>";
                    var _a = url.match(/#!rid(\d+)(?:-(\d+))?$/) || [void 0, void 0, void 0],
                        all = _a[0],
                        roomId = _a[1],
                        messageId = _a[2];
                    return all ? messageId ? ' <a class="_messageLink timelineLinkAppend" data-rid="' + roomId + '" data-mid="' + messageId + '">' + L.message_link + "</a>" : ' <a class="_roomLink timelineLinkAppend" data-rid="' + roomId + '">' + L.message_open_chat + "</a>" : ""
                }, getAppendLink = function(url) {
                    var urlObject = parseUrl_1.parseUrl(url);
                    if (urlObject && urlObject.protocol.match(/^https?:$/)) {
                        if (urlObject.hostname === location.hostname || "www." + urlObject.hostname === location.hostname) return getChatworkDomainAppendLink(url);
                        var preview = {
                            type: "",
                            user_id: "",
                            content_id: ""
                        };
                        if ("teachme.jp" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/contents\/([0-9]+)/);
                            if (!match) return;
                            preview.type = "teachme", preview.content_id = match.pop()
                        }
                        if ("speakerdeck.com" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/([^\/]+)\/([^\/]+)$/);
                            if (!match) return;
                            preview.type = "speakerdeck", preview.user_id = match.pop(), preview.content_id = match.pop()
                        }
                        if ("www.slideshare.net" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/([^\/]+)\/([^\/]+)$/);
                            if (!match) return;
                            preview.type = "slideshare", preview.user_id = match.pop(), preview.content_id = match.pop()
                        }
                        if ("prezi.com" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/([^\/]+)\//);
                            if (!match) return;
                            preview.type = "prezi", preview.content_id = match.pop()
                        }
                        if ("www.youtube.com" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/watch\?v=([^\/&]+)/);
                            if (!match) return;
                            preview.type = "youtube", preview.content_id = match.pop()
                        }
                        if ("youtu.be" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/([^\/&]+)/);
                            if (!match) return;
                            preview.type = "youtube", preview.content_id = match.pop()
                        }
                        if ("vimeo.com" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/(?:channels\/staffpicks\/)?([^\/]+)/);
                            if (!match) return;
                            preview.type = "vimeo", preview.content_id = match.pop()
                        }
                        if (urlObject.hostname.match(/^(slid\.es|slides\.com)$/)) {
                            var match = urlObject.pathname.match(/\/([^\/]+\/[^\/]+)$/);
                            if (!match) return;
                            preview.type = "slid.es", preview.content_id = match.pop()
                        }
                        if ("corabbit.com" === urlObject.hostname) {
                            var match = urlObject.pathname.match(/\/#\/file\/([^\/]+)$/);
                            if (!match) return;
                            preview.type = "corabbit", preview.content_id = match.pop()
                        }
                        if (urlObject.hostname.match(/^(docs|drive)\.google\.com$/) && (preview.type = "googledocs", preview.content_id = "-"), urlObject.hostname.match(/\.sharepoint\.com$/)) {
                            var match = url.match(/^https:\/\/([\w\-\.\/]+?)\?.*(sourcedoc=[\{\}\w\-]+?|guestaccesstoken=[\%\w]+&(?:amp;?)docid=\w+)(?:&|$)/);
                            if (!match) return;
                            preview.type = "sharepoint", preview.content_id = match[1] + "?" + match[2]
                        }
                        return preview.type ? ' <a class="_previewLink timelineLinkAppend" data-url="' + common_1.urlencode(url) + '" data-type="' + preview.type + '" data-user-id="' + preview.user_id + '" data-content-id="' + preview.content_id + '">' + L.preview + "</a>" : ""
                    }
                };
            exports.renderAstToHtml = renderAstToHtml
        }, {
            "../../../core/lib/common": 50,
            "../../controller/boot": 66,
            "../emoticon/emoticons": 109,
            "../file-preview/filePreview": 110,
            "./parseUrl": 70,
            "chatwork-tokenizer-js": 9,
            "lodash.escape": 39
        }
    ],
    72: [
        function(require, module, exports) {
            "use strict";

            function renderAstToText(text) {
                var ast = chatwork_tokenizer_js_1.
                default (text), contentType = {
                    message: function(content) {
                        return content.value
                    },
                    url: function(content) {
                        return content.value
                    },
                    emoticon: function(content) {
                        return content.value
                    },
                    hr: function(content) {
                        return " --- "
                    },
                    deleted: function() {
                        return ""
                    },
                    code: function() {
                        return "[Code]"
                    },
                    preview: function() {
                        return ""
                    },
                    pname: function(content) {
                        var id = parseInt(content.attributes.id, 10);
                        return boot_1.AC.getName(id)
                    },
                    picon: function() {
                        return ""
                    },
                    piconname: function(content) {
                        var id = parseInt(content.attributes.id, 10),
                            pname = contentType.pname({
                                attributes: {
                                    id: id
                                }
                            });
                        return "" + pname
                    },
                    info: function(content) {
                        var result = render(content.content);
                        return "[" + result + "]"
                    },
                    title: function(content) {
                        var result = render(content.content);
                        return result + ":"
                    },
                    to: function() {
                        return "[To]"
                    },
                    rp: function() {
                        return "[RE]"
                    },
                    qt: function(content) {
                        var result = render(content.content);
                        return '"' + result
                    },
                    qtmeta: function() {
                        return ""
                    },
                    live: function() {
                        return "[ChatWork Live]"
                    },
                    task: function(content) {
                        var result = render(content.content);
                        return "[" + result + "]"
                    },
                    dtext: function(content) {
                        return L[content.attributes.id] || "[dtext:" + content.attributes.id + "]"
                    },
                    download: function() {
                        return ""
                    },
                    date: function(content) {
                        return boot_1.CW.getDate(content.attributes.id)
                    }
                }, render = function(contexts) {
                    var results = contexts.reduce(function(base, content) {
                        if (contentType[content.type]) return base.concat(contentType[content.type](content))
                    }, []);
                    return results.join("")
                };
                return render(ast)
            }
            var chatwork_tokenizer_js_1 = require("chatwork-tokenizer-js"),
                boot_1 = require("../../controller/boot");
            exports.renderAstToText = renderAstToText
        }, {
            "../../controller/boot": 66,
            "chatwork-tokenizer-js": 9
        }
    ],
    73: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_id = 0,
                    widget_init_prefix = "cwui-",
                    widget_class = {}, widget_composite_class = {}, float_id = 0,
                    float_id2object = {};
                $.cwUI = $.cwUI || {}, $.cwUI.floatZIndex = 1e3, $.cwUI.imagePath = "./image", $.cwUI.loading = "", $.cwUI.escapeHTML = function(str) {
                    return str && str.replace ? (str = str.replace(/&/g, "&amp;"), str = str.replace(/"/g, "&quot;"), str = str.replace(/'/g, "&#039;"), str = str.replace(/</g, "&lt;"), str = str.replace(/>/g, "&gt;")) : str
                }, $.cwUI.formatNumber = function(x) {
                    var parts = x.toString().split(".");
                    return parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), parts.join(".")
                }, $.cwUI.ucFirst = function(str_) {
                    var str = String(str_),
                        f = str.charAt(0).toUpperCase();
                    return f + str.substr(1)
                }, $.cwUI.setZIndex = function(jqObj) {
                    var fid = jqObj.data("cwui-float_id");
                    void 0 == fid && (fid = float_id++, jqObj.data("cwui-float_id", [fid]));
                    var max = this.floatZIndex;
                    for (var ffid in float_id2object) {
                        var zindex = parseInt(float_id2object[ffid].css("z-index"), 10);
                        max < zindex && (max = zindex)
                    }
                    return max++, jqObj.css("z-index", max), float_id2object[fid] = jqObj, this
                }, $.cwUI.unsetZIndex = function(jqObj) {
                    var fid = jqObj.data("cwui-float_id");
                    if (void 0 != fid) return delete float_id2object[fid], this
                }, $.cwUI.getUpperLayerObjects = function(jqObj) {
                    var border_zindex = parseInt(jqObj.css("z-index"), 10),
                        upper_objects = [];
                    for (var ffid in float_id2object) {
                        var zindex = parseInt(float_id2object[ffid].css("z-index"), 10);
                        zindex > border_zindex && upper_objects.push(float_id2object[ffid])
                    }
                    return upper_objects
                }, $.cwUI.addWidget = function(widget_name, default_option, method_prototype, utility_method) {
                    if ($[widget_name] = new BaseWidgetUtility(widget_name, default_option), void 0 != utility_method)
                        for (var member in utility_method) $[widget_name][member] = utility_method[member];
                    widget_class[widget_name] = function() {
                        this.widget_name = widget_name
                    }, widget_class[widget_name].prototype = new BaseWidget;
                    for (var _member in method_prototype) widget_class[widget_name].prototype[_member] = method_prototype[_member];
                    widget_composite_class[widget_name] = function(widget_list) {
                        this.widget_name = widget_name, this.widget_list = widget_list
                    };
                    var _loop = function(_member2) {
                        ! function() {
                            var actual_member = _member2;
                            widget_composite_class[widget_name].prototype[actual_member] = function() {
                                for (var i = 0, len = this.widget_list.length; i < len; i++) {
                                    var widget = this.widget_list[i];
                                    widget[actual_member].apply(widget, arguments)
                                }
                                return this
                            }
                        }()
                    };
                    for (var _member2 in widget_class[widget_name].prototype) _loop(_member2);
                    var widget_init_key = widget_init_prefix + widget_name;
                    $.fn[widget_name] = function(option) {
                        var self = this,
                            length = self.length;
                        if (0 != length && !$.cwUI.isWidget(self[0])) {
                            var wn = null,
                                wn_list = [];
                            return self.each(function() {
                                var jqObj = $(this),
                                    elm = jqObj[0];
                                if (wn = $.data(elm, widget_init_key), !wn) {
                                    if ($[widget_name]._create) {
                                        var new_jqObj = $[widget_name]._create(jqObj);
                                        new_jqObj && (jqObj = new_jqObj, elm = new_jqObj[0])
                                    }
                                    wn = new widget_class[widget_name], wn.widget_id = widget_id++, wn._setUp(jqObj), option = $.extend({}, $[widget_name].getDefaultOption(), option), wn._init && wn._init(option), $.data(elm, widget_init_key, wn)
                                }
                                wn.setOption(option), wn_list.push(wn)
                            }), 1 == length ? wn : new widget_composite_class[widget_name](wn_list)
                        }
                    }
                }, $.cwUI.isWidget = function(obj) {
                    return obj instanceof BaseWidget
                };
                var BaseWidget = function() {};
                BaseWidget.prototype = {
                    $el: null,
                    el: null,
                    data: {},
                    _setUp: function(jqObj) {
                        return this.$el = jqObj, this.el = jqObj[9], this.open ? this.is_open = !1 : this.is_open = !0, this.init_option = !0, this.option = {}, this
                    },
                    isOpen: function() {
                        return this.is_open
                    },
                    destroy: function() {
                        $.data(this.$el[0], widget_init_prefix + this.widget_name, "")
                    },
                    setOption: function(option) {
                        if (void 0 == option) return this;
                        for (var key in option) this.option[key] = option[key];
                        return this._setOption && this._setOption(option), this.init_option = !1, this
                    }
                };
                var BaseWidgetUtility = function(widget_name, default_option) {
                    this.widget_name = widget_name, this.default_option = default_option
                };
                BaseWidgetUtility.prototype = {
                    getWidget: function(dom) {
                        return $.data(dom, widget_init_prefix + this.widget_name)
                    },
                    isInit: function(dom) {
                        return !!$.data(dom, widget_init_prefix + this.widget_name)
                    },
                    getDefaultOption: function() {
                        return this.default_option
                    },
                    setDefaultOption: function(df_option) {
                        for (var dfkey in df_option) this.default_option[dfkey] = df_option[dfkey];
                        return this
                    }
                }, $.fn.extend({
                    quickEmpty: function() {
                        return this.each(function() {
                            for (var i = this.childNodes.length; i--;) this.removeChild(this.lastChild)
                        }), this
                    },
                    getAttrs: function() {
                        for (var attrs = this[0].attributes, props = {}, i = 0, attrs_len = attrs.length; i < attrs_len; i++) {
                            var attr = attrs.item(i);
                            attr.specified && (props[attr.name] = attr.value)
                        }
                        return props
                    },
                    isVisible: function() {
                        return $.expr.filters.visible(this[0])
                    },
                    caretPos: function(pos) {
                        var item = this.get(0);
                        if (null == pos) {
                            var caret = 0;
                            if (document.selection) {
                                item.focus();
                                var range = document.selection.createRange();
                                range.moveStart("character", -item.value.length), caret = range.text.length
                            } else(item.selectionStart || "0" == item.selectionStart) && (caret = item.selectionStart);
                            return caret
                        }
                        if ("first" == pos && (pos = 0), "last" == pos && (pos = this.val().length), item.setSelectionRange) item.focus(), item.setSelectionRange(pos, pos);
                        else if (item.createTextRange) {
                            var _range = item.createTextRange();
                            _range.collapse(!0), _range.moveEnd("character", pos), _range.moveStart("character", pos), _range.select()
                        }
                        return this
                    }
                }), $(function() {
                    $.cwUI.loading = '<img src="' + $.cwUI.imagePath + '/ajax-loader.gif" alt="Loading" />', $(document).on("click.ChatWorkUI", "._cwSelectableRow", function() {
                        return $(this).find("._cwCB").cwCheckBox().toggle(), !1
                    })
                })
            }(jQuery)
        }, {}
    ],
    74: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwFloatBox",
                    floatbox_layer_stack = [],
                    floatbox_skip_obj = [],
                    floatbox_skip = !1;
                $(function() {
                    setTimeout(function() {
                        $.cwFloatBox.setBodyEvent()
                    })
                }), $[widget_name] = {
                    open: function(jqObj, callback_close, user_option) {
                        var option = $.extend({
                            noAnimation: !1
                        }, user_option);
                        return $.data(jqObj[0], widget_name) || (jqObj.on("click." + widget_name, function() {
                            $.cwFloatBox.skip($(this)), option.skip && $.cwFloatBox.skip(option.skip)
                        }), $.data(jqObj[0], widget_name, !0)), floatbox_layer_stack.push({
                            obj: jqObj,
                            zindex: jqObj.css("z-index"),
                            callback: callback_close,
                            noanim: option.noAnimation
                        }), jqObj.stop(!0, !0).show().css({
                            opacity: 1
                        }), $.cwUI.setZIndex(jqObj), this
                    },
                    close: function(jqObj, is_except) {
                        var stack_length = floatbox_layer_stack.length,
                            floatbox_set = null,
                            close_floatbox_list = [],
                            skip_floatbox_list = [];
                        if (stack_length > 0) {
                            if (jqObj) {
                                var jqObj_list = void 0;
                                if (jqObj instanceof jQuery) jqObj_list = [jqObj];
                                else {
                                    if (!$.isArray(jqObj)) return;
                                    jqObj_list = jqObj
                                }
                                for (var i = stack_length - 1; i >= 0; i--) {
                                    for (var found_dom = !1, j = 0, jq_len = jqObj_list.length; j < jq_len; j++)
                                        if (jqObj_list[j][0] == floatbox_layer_stack[i].obj[0]) {
                                            found_dom = !0;
                                            break
                                        }
                                    is_except ? found_dom ? skip_floatbox_list.push(floatbox_layer_stack[i]) : close_floatbox_list.push(floatbox_layer_stack[i]) : found_dom ? close_floatbox_list.push(floatbox_layer_stack[i]) : skip_floatbox_list.push(floatbox_layer_stack[i])
                                }
                            } else close_floatbox_list = floatbox_layer_stack;
                            for (var _i = 0, close_len = close_floatbox_list.length; _i < close_len; _i++) floatbox_set = close_floatbox_list[_i], "function" == typeof floatbox_set.callback && floatbox_set.callback(),
                            floatbox_set.noanim ? (floatbox_set.obj.hide(), floatbox_set.obj.css("z-index", floatbox_set.zindex)) : floatbox_set.obj.fadeOut("fast", function() {
                                floatbox_set.obj.css("z-index", floatbox_set.zindex)
                            }), $.cwUI.unsetZIndex(floatbox_set.obj), floatbox_set.floatbox && floatbox_set.floatbox.remove();
                            floatbox_layer_stack = skip_floatbox_list
                        }
                        var self = this;
                        return setTimeout(function() {
                            self.clearSkip()
                        }), this
                    },
                    closeUpperLayer: function(jqObj) {
                        for (var border_zindex = parseInt(jqObj.css("z-index"), 10), upper_objects = [], i = 0, layer_len = floatbox_layer_stack.length; i < layer_len; i++) {
                            var obj = floatbox_layer_stack[i].obj;
                            border_zindex < parseInt(obj.css("z-index"), 10) && upper_objects.push(obj)
                        }
                        return upper_objects.length > 0 && this.close(upper_objects), this
                    },
                    skip: function() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                        return args.length ? floatbox_skip_obj = floatbox_skip_obj.concat(args) : floatbox_skip = !0, this
                    },
                    clearSkip: function() {
                        return floatbox_skip = !1, floatbox_skip_obj = [], this
                    },
                    setBodyEvent: function() {
                        return $(document.body).off("keydown." + widget_name).on("keydown." + widget_name, function(e) {
                            27 == e.keyCode && $.cwFloatBox.close()
                        }).off("click." + widget_name).on("click." + widget_name, function() {
                            return floatbox_skip ? void setTimeout(function() {
                                $.cwFloatBox.clearSkip()
                            }) : void(floatbox_skip_obj.length > 0 ? $.cwFloatBox.close(floatbox_skip_obj, !0) : $.cwFloatBox.close())
                        }), this
                    }
                }
            }(jQuery)
        }, {}
    ],
    75: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwResize",
                    start_capture = !1,
                    capture_option = null,
                    capture_x = 0,
                    capture_y = 0;
                $(function() {
                    $(document.body).on("mousemove." + widget_name, function(e) {
                        if (start_capture) {
                            var move_x = e.clientX - capture_x,
                                move_y = e.clientY - capture_y;
                            capture_option.move(move_x, move_y)
                        }
                    }).on("mouseup." + widget_name, function() {
                        start_capture && ($("#_cwRZBack").remove(), start_capture = !1, $(document.body).removeClass("cwResizeHandleCol cwResizeHandleRow cwResizeHandle"), capture_option.end())
                    })
                }), $[widget_name] = {
                    setHandle: function(jqObj, user_option) {
                        var option = $.extend({
                            type: "",
                            start: function() {},
                            end: function() {},
                            move: function() {}
                        }, user_option),
                            resize_class = "";
                        switch (option.type) {
                            case "col":
                                resize_class = "cwResizeHandleCol";
                                break;
                            case "row":
                                resize_class = "cwResizeHandleRow";
                                break;
                            default:
                                resize_class = "cwResizeHandle"
                        }
                        return jqObj.addClass(resize_class).on("mousedown." + widget_name, function(e) {
                            start_capture = !0;
                            var body = $(document.body);
                            switch (body.append('<div id="_cwRZBack" class="stopActionOverlay"></div>'), option.type) {
                                case "col":
                                    body.addClass("cwResizeHandleCol");
                                    break;
                                case "row":
                                    body.addClass("cwResizeHandleRow");
                                    break;
                                default:
                                    body.addClass("cwResizeHandle")
                            }
                            return capture_x = e.clientX, capture_y = e.clientY, capture_option = option, capture_option.start(), !1
                        }), this
                    }
                }
            }(jQuery)
        }, {}
    ],
    76: [
        function(require, module, exports) {
            "use strict";
            var _common = require("../../../core/lib/common");
            ! function($, L) {
                var widget_name = "cwValidate";
                $[widget_name] = {
                    File: {
                        hasError: function(file_elm, option) {
                            var filesize = 0,
                                filename = "",
                                extension = "";
                            if (file_elm.files) {
                                var fileinfo = file_elm.files[0];
                                filename = fileinfo.name, filesize = fileinfo.size
                            } else filename = file_elm.value.replace(/\\/g, "/").replace(/.*\//, "");
                            var match = filename.match(/\.([^.]+)$/);
                            match && (extension = match[1].toLowerCase());
                            var error_list = [];
                            return option.maxsize && filesize >= option.maxsize && error_list.push(L.error_upload_over_max_filesize.replace(/%%max_size%%/g, (0, _common.bytename)(option.maxsize)).replace(/%%size%%/g, (0, _common.bytename)(filesize))), option.onlyimage && ["jpg", "png", "gif", "jpeg"].indexOf(extension) === -1 && error_list.push(L.error_upload_image), !! error_list.length && ($(file_elm).val(""), error_list)
                        }
                    }
                }
            }(jQuery, jQuery.cwUI.L)
        }, {
            "../../../core/lib/common": 50
        }
    ],
    77: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.en = {
                    closeText: "Close",
                    prevText: "&#x3c;Prev",
                    nextText: "Next&#x3e;",
                    currentText: "Today",
                    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                    weekHeader: "Wk",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !0,
                    yearMonthSeparator: " ",
                    yearSuffix: ""
                }
            }(jQuery)
        }, {}
    ],
    78: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.es = {
                    closeText: "Cerrar",
                    prevText: "",
                    nextText: "",
                    currentText: "Hoy",
                    monthNames: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                    monthNamesShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
                    dayNames: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
                    dayNamesShort: ["Dom", "Lun", "Mar", "Mié", "Jue", " Vie", "Sáb"],
                    dayNamesMin: ["Do", "Lu", "Ma", "Mi", "Ju", " Vi", "Sá"],
                    weekHeader: "Sem",
                    firstDay: 1,
                    isRTL: !1,
                    showMonthAfterYear: !1,
                    yearMonthSeparator: " de ",
                    yearSuffix: ""
                }
            }(jQuery)
        }, {}
    ],
    79: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.ja = {
                    closeText: "閉じる",
                    prevText: "&#x3c;前",
                    nextText: "次&#x3e;",
                    currentText: "今日",
                    monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
                    monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
                    dayNames: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                    dayNamesShort: ["日", "月", "火", "水", "木", "金", "土"],
                    dayNamesMin: ["日", "月", "火", "水", "木", "金", "土"],
                    weekHeader: "週",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !0,
                    yearMonthSeparator: "",
                    yearSuffix: "年"
                }
            }(jQuery)
        }, {}
    ],
    80: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.th = {
                    closeText: "ปิด",
                    prevText: "",
                    nextText: "",
                    currentText: "วันนี้",
                    monthNames: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"],
                    monthNamesShort: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."],
                    dayNames: ["วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"],
                    dayNamesShort: ["อา", "จ", "อ", "พ", "พฤ", "ศ", "ส"],
                    dayNamesMin: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"],
                    weekHeader: "สัปดาห์ที่",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !1,
                    yearMonthSeparator: " ",
                    yearSuffix: ""
                }
            }(jQuery)
        }, {}
    ],
    81: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.vi = {
                    closeText: "Đóng",
                    prevText: "&#x3c;Trước",
                    nextText: "Tiếp&#x3e;",
                    currentText: "Hôm nay",
                    monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
                    monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
                    dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                    dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                    dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                    weekHeader: "Tu",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !1,
                    yearMonthSeparator: " ",
                    yearSuffix: ""
                }
            }(jQuery)
        }, {}
    ],
    82: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker["zh-cn"] = {
                    closeText: "关闭",
                    prevText: "&#x3c;上月",
                    nextText: "下月&#x3e;",
                    currentText: "今天",
                    monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    monthNamesShort: ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二"],
                    dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                    dayNamesShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                    dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"],
                    weekHeader: "周",
                    firstDay: 1,
                    isRTL: !1,
                    showMonthAfterYear: !0,
                    yearMonthSeparator: "",
                    yearSuffix: "年"
                }
            }(jQuery)
        }, {}
    ],
    83: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker["zh-tw"] = {
                    closeText: "关闭",
                    prevText: "前一個",
                    nextText: "下一個",
                    currentText: "今天",
                    monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
                    monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
                    dayNames: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                    dayNamesShort: ["日", "一", "二", "三", "四", "五", "六"],
                    dayNamesMin: ["日", "一", "二", "三", "四", "五", "六"],
                    weekHeader: "週",
                    firstDay: 1,
                    isRTL: !1,
                    showMonthAfterYear: !0,
                    yearMonthSeparator: "",
                    yearSuffix: "年"
                }
            }(jQuery)
        }, {}
    ],
    84: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI.L.cwDatePicker = $.cwUI.L.cwDatePicker || {}, $.cwUI.L.cwDatePicker.zz = {
                    closeText: "Close",
                    prevText: "&#x3c;Prev",
                    nextText: "Next&#x3e;",
                    currentText: "Today",
                    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                    weekHeader: "Wk",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !0,
                    yearSuffix: ""
                }
            }(jQuery)
        }, {}
    ],
    85: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.en = {
                    checkall: "All",
                    uncheckall: "None",
                    button_delete: "Delete",
                    button_search: "Search",
                    button_close: "Close",
                    pager_prev: "Back to previous page",
                    pager_next: "Go to next page",
                    error_upload_over_max_filesize: "Your file (%%size%%) exceeds the limit size (%%max_size%%).",
                    error_upload_image: "JPEG, GIF, and PNG only",
                    cwui_listip_list_overflow: "%%num%% more left",
                    cwui_listip_list_overflow_max: "(up to %%num%% items will be shown)"
                }
            }(jQuery)
        }, {}
    ],
    86: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.es = {
                    checkall: "Todos",
                    uncheckall: "Ninguno",
                    button_delete: "Borrar",
                    button_search: "Buscar",
                    button_close: "Cerrar",
                    pager_prev: "Volver a la página anterior",
                    pager_next: "Ir a la página siguiente",
                    error_upload_over_max_filesize: "Tu archivo (%%size%%) supera el tamaño máximo (%%max_size%%).",
                    error_upload_image: "Solo JPEG, GIF o PNG",
                    cwui_listip_list_overflow: "%%num%% más restantes",
                    cwui_listip_list_overflow_max: "(se mostrarán hasta %%num%% elementos)"
                }
            }(jQuery)
        }, {}
    ],
    87: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.ja = {
                    checkall: "すべて",
                    uncheckall: "はずす",
                    button_delete: "削除",
                    button_search: "検索",
                    button_close: "閉じる",
                    pager_prev: "前のページへ移動",
                    pager_next: "次のページへ移動",
                    error_upload_over_max_filesize: "ファイルサイズが %%max_size%%より大きいファイルはアップロードできません。\n（アップロードしようとしたファイルサイズ：%%size%%）",
                    error_upload_image: "画像形式のファイルを指定してください (JPEG,GIF,PNGが使えます)",
                    cwui_listip_list_overflow: "残り%%num%%件",
                    cwui_listip_list_overflow_max: "(最大%%num%%件表示)"
                }
            }(jQuery)
        }, {}
    ],
    88: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.th = {
                    checkall: "ทั้งหมด",
                    uncheckall: "ไม่มี",
                    button_delete: "ลบ",
                    button_search: "ค้นหา",
                    button_close: "ปิด",
                    pager_prev: "กลับไปหน้าก่อน",
                    pager_next: "ไปที่หน้าถัดไป",
                    error_upload_over_max_filesize: "ไฟล์ของคุณ (%%size%%) มีขนาดใหญ่เกินกว่าที่กำหนดไว้ (%%max_size%%)",
                    error_upload_image: "เฉพาะ JPEG, GIF และ PNG เท่านั้น",
                    cwui_listip_list_overflow: "เหลืออีก %%num%% ราย",
                    cwui_listip_list_overflow_max: "(แสดงได้สูงสุด %%num%% ราย)"
                }
            }(jQuery)
        }, {}
    ],
    89: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.vi = {
                    checkall: "Tất cả",
                    uncheckall: "Bỏ chọn",
                    button_delete: "Xóa",
                    button_search: "Tìm kiếm",
                    button_close: "Đóng",
                    pager_prev: "Quay lại trang trước",
                    pager_next: "Đến trang kế tiếp",
                    error_upload_over_max_filesize: "Tập tin (%%size%%) của bạn vượt quá dung lượng giới hạn (%%max_size%%).",
                    error_upload_image: "Chỉ chấp nhận JPEG, GIF, và PNG",
                    cwui_listip_list_overflow: "Còn %%num%% mục nữa",
                    cwui_listip_list_overflow_max: "(sẽ hiển thị đến %%num%% mục)"
                }
            }(jQuery)
        }, {}
    ],
    90: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L["zh-cn"] = {
                    checkall: "全部",
                    uncheckall: "取消",
                    button_delete: "删除",
                    button_search: "搜索",
                    button_close: "关闭",
                    pager_prev: "返回上一页",
                    pager_next: "返回下一页",
                    error_upload_over_max_filesize: "您的文件(%%size%%)超过了文件大小限制(%%max_size%%)",
                    error_upload_image: "仅限JPEG,GIF和PNG",
                    cwui_listip_list_overflow: "还剩%%num%%",
                    cwui_listip_list_overflow_max: "(up to %%num%% items will be shown)"
                }
            }(jQuery)
        }, {}
    ],
    91: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L["zh-tw"] = {
                    checkall: "全部",
                    uncheckall: "取消",
                    button_delete: "刪除",
                    button_search: "搜尋",
                    button_close: "關閉",
                    pager_prev: "前往上一頁",
                    pager_next: "前往下一頁",
                    error_upload_over_max_filesize: "檔案大小超過%%max_size%%將無法上傳。\n（上傳檔案大小：%%size%%）",
                    error_upload_image: "請指定圖片格式（限使用JPEG、GIF、PNG）",
                    cwui_listip_list_overflow: "剩餘%%num%%則",
                    cwui_listip_list_overflow_max: "（最多顯示%%num%%則）"
                }
            }(jQuery)
        }, {}
    ],
    92: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                $.cwUI = $.cwUI || {}, $.cwUI.L = $.cwUI.L || {}, $.cwUI.L.zz = {
                    checkall: "All",
                    uncheckall: "None",
                    button_delete: "Delete",
                    button_search: "Search",
                    button_close: "Close",
                    pager_prev: "Back to previous page",
                    pager_next: "Go to next page",
                    error_upload_over_max_filesize: "Your file (%%size%%) exceeds the limit size (%%max_size%%).",
                    error_upload_image: "JPEG, GIF, and PNG only",
                    cwui_listip_list_overflow: "%%num%% more left",
                    cwui_listip_list_overflow_max: "(up to %%num%% items will be shown)"
                }
            }(jQuery)
        }, {}
    ],
    93: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwActionBar",
                    option_default = {
                        itemSelector: "",
                        hoverSelector: "",
                        hoverClass: "",
                        idKey: "",
                        checkIgnoreItem: null,
                        stopBubbling: !1,
                        actionList: [],
                        moreActionList: [],
                        descriptionDelay: 500
                    }, widget_method = {
                        _init: function() {
                            var self = this;
                            this.latest_showed_jqObj = {}, this.action_item = {}, this.is_more_prepared = !1, this.is_hold = !1, this.is_suspend = !1, this.$el.on("click." + widget_name, "._cwABAction", function() {
                                var act_button = $(this),
                                    type = act_button.attr("data-cwui-ab-type"),
                                    id = act_button.attr("data-cwui-ab-id"),
                                    act_dat = self.action_item[type];
                                if ("function" == typeof act_dat.click && act_dat.click.apply(self, [id, act_button]), self.option.stopBubbling) return !1
                            }).on("mouseenter." + widget_name + "Description", "._cwABAction", function() {
                                var act_button = $(this),
                                    type = act_button.attr("data-cwui-ab-type"),
                                    act_dat = self.action_item[type];
                                act_dat.description && ($.cwMessageTip.isInit(this) || $(this).cwMessageTip({
                                    message: act_dat.description,
                                    delay: self.option.descriptionDelay
                                }).open())
                            })
                        },
                        _setOption: function(option) {
                            var self = this;
                            void 0 != option.itemSelector && this.$el.off("mouseenter." + widget_name).on("mouseenter." + widget_name, option.itemSelector, function() {
                                var item = $(this),
                                    is_ignore = !1;
                                "function" == typeof self.option.checkIgnoreItem && (is_ignore = self.option.checkIgnoreItem(item)), is_ignore || self.open($(this))
                            }).off("mouseleave." + widget_name).on("mouseleave." + widget_name, option.itemSelector, function() {
                                self.close()
                            })
                        },
                        _prepareMore: function() {
                            if (!this.is_more_prepared) {
                                var self = this,
                                    jqObj = this.$el,
                                    moretip_jqObj = $('<div style="display:none"><ul class="_cwABMoreListBox"></ul></div>');
                                $(document.body).append(moretip_jqObj);
                                var moretip = null;
                                moretip_jqObj.on("click." + widget_name, "._cwABAction", function() {
                                    var act_button = $(this),
                                        type = act_button.attr("data-cwui-ab-type"),
                                        id = act_button.attr("data-cwui-ab-id"),
                                        act_dat = self.action_item[type];
                                    if ("function" == typeof act_dat.click && act_dat.click.apply(self, [id, act_button]), moretip.close(), self.option.stopBubbling) return !1
                                }).on("mouseenter." + widget_name, "._cwABAction", function() {
                                    var act_button = $(this),
                                        type = act_button.attr("data-cwui-ab-type"),
                                        act_dat = self.action_item[type];
                                    act_dat.description && ($.cwMessageTip.isInit(this) || $(this).cwMessageTip({
                                        message: act_dat.description,
                                        delay: self.option.descriptionDelay
                                    }).open())
                                });
                                var more_button = null;
                                jqObj.on("click." + widget_name, "._cwABMoreTip", function() {
                                    more_button = $(this), moretip || (moretip = moretip_jqObj.cwToolTip({
                                        open: function() {
                                            self.is_hold = !0;
                                            for (var id = more_button.attr("data-cwui-ab-id"), html = "", i = 0, act_len = self.option.moreActionList.length; i < act_len; i++) {
                                                var type = self.option.moreActionList[i],
                                                    act_dat = self.action_item[type];
                                                html += '<li class="_cwABAction chatActionMore" data-cwui-ab-id="' + id + '" data-cwui-ab-type="' + type + '"><span class="' + act_dat.iconClass + '"></span><span class="chatActiontext">' + act_dat.label + "</li>"
                                            }
                                            moretip_jqObj.find("._cwABMoreListBox").html(html)
                                        },
                                        close: function() {
                                            self.is_hold = !1
                                        }
                                    })), moretip.open($(this))
                                }), this.is_more_prepared = !0
                            }
                        },
                        open: function(jqObj) {
                            var self = this;
                            if (this.is_suspend) return this;
                            if (self.is_open = !0, void 0 != jqObj[0] && "function" == typeof self.option.open && self.option.open.apply(self, [jqObj.attr(self.option.idKey)]), void 0 != self.latest_showed_jqObj[0] && self.latest_showed_jqObj[0] != jqObj[0]) {
                                var current_showed_actionbar = self.latest_showed_jqObj.find("._cwABShowArea");
                                if (current_showed_actionbar.length > 0 && (current_showed_actionbar.hide(), $.cwMessageTip.close(), self.option.hoverClass)) {
                                    var hover_obj = self.latest_showed_jqObj;
                                    self.option.hoverSelector && (hover_obj = self.latest_showed_jqObj.find(self.option.hoverSelector)), hover_obj.removeClass(self.option.hoverClass)
                                }
                                self.latest_showed_jqObj = {}
                            }
                            if (void 0 != jqObj[0] && self.latest_showed_jqObj[0] != jqObj[0]) {
                                var num_action = self.option.actionList.length,
                                    num_more_action = self.option.moreActionList.length,
                                    showArea = jqObj.find("._cwABShowArea");
                                if (0 == showArea.length) {
                                    if (!num_action && !num_more_action) return !1;
                                    showArea = $('<div class="_cwABShowArea actionArea"></div>'), jqObj.append(showArea)
                                }
                                if (!$.data(showArea[0], "_cwABNavInit")) {
                                    var action = '<ul role="toolbar" class="_messageActionNav cwTextUnselectable actionNav">',
                                        id = "";
                                    self.option.idKey && (id = jqObj.attr(self.option.idKey));
                                    for (var i = 0, act_len = self.option.actionList.length; i < act_len; i++) {
                                        var type = self.option.actionList[i],
                                            act_dat = self.action_item[type];
                                        void 0 == act_dat || (action += '<li role="button" class="_cwABAction linkStatus" data-cwui-ab-id="' + id + '" data-cwui-ab-type="' + type + '"><span\n                                        class="' + act_dat.iconClass + '""></span><span class="_showAreaText showAreatext">' + act_dat.label + "</span></li>")
                                    }
                                    self.option.moreActionList.length > 0 && (self._prepareMore(), action += '<li role="button" class="_cwABMoreTip linkStatus" data-cwui-ab-id="' + id + '"><span class="icoFontActionMore"></span><span class="_showAreaText showAreatext"></span></li>'), action += "</ul>", showArea.html(action), $.data(showArea[0], "_cwABNavInit", !0)
                                }
                                if (showArea.show(), self.option.hoverClass) {
                                    var _hover_obj = jqObj;
                                    self.option.hoverSelector && (_hover_obj = jqObj.find(self.option.hoverSelector)), _hover_obj.addClass(self.option.hoverClass)
                                }
                                self.latest_showed_jqObj = jqObj
                            }
                            return self
                        },
                        close: function() {
                            var self = this;
                            return this.is_open = !1, "function" == typeof self.option.close && self.option.close.apply(self), this.is_hold || this.open({}), this
                        },
                        hold: function(bool) {
                            return this.is_hold = bool, this
                        },
                        addAction: function(type, act_dat) {
                            var self = this;
                            return self.action_item[type] = act_dat, self
                        },
                        setActionList: function(action_list) {
                            return this.option.actionList = action_list, this
                        },
                        setMoreActionList: function(more_action_list) {
                            return this.option.moreActionList = more_action_list, this
                        },
                        findItemById: function(id) {
                            return this.$el.find("[" + this.option.idKey + "=" + id + "]")
                        },
                        suspend: function() {
                            return this.close(), this.is_suspend = !0, this
                        },
                        resume: function() {
                            return this.is_suspend = !1, this
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    94: [
        function(require, module, exports) {
            "use strict";
            var _common = require("../../../../core/lib/common");
            ! function($) {
                var widget_name = "cwButton",
                    option_default = {
                        descriptionDelay: 500,
                        toggleMode: !1
                    };
                $(function() {
                    $(document.body).on("click." + widget_name, "._cwBN", function() {
                        var btn = $(this).cwButton();
                        btn.option.toggleMode ? btn.toggle() : btn.select()
                    }).on("keydown." + widget_name, "._cwBN", function(e) {
                        32 == e.keyCode && $(this).click()
                    })
                });
                var widget_method = {
                    _init: function() {
                        var jqObj = this.$el;
                        this.is_selected = !1, jqObj.addClass("_cwBN button").attr({
                            role: "button"
                        }), this.is_primary = jqObj.hasClass("btnPrimary"), this.is_success = jqObj.hasClass("btnSuccess"), this.is_warning = jqObj.hasClass("btnWarning"), this.is_danger = jqObj.hasClass("btnDanger"), jqObj.hasClass("btnDisable") && this.disable()
                    },
                    _setOption: function(option) {
                        var self = this;
                        if (void 0 != option.description && ($.cwMessageTip.isInit(this.$el[0]) || this.$el.cwMessageTip({
                            delay: self.option.descriptionDelay,
                            message: option.description
                        })), void 0 != option.type) switch (option.type) {
                            case "primary":
                                this.$el.addClass("btnPrimary").removeClass("btnSuccess btnWarning btnDanger"), this.is_primary = !0;
                                break;
                            case "success":
                                this.$el.addClass("btnSuccess").removeClass("btnPrimary btnWarning btnDanger"), this.is_success = !0;
                                break;
                            case "warning":
                                this.$el.addClass("btnWarning").removeClass("btnSuccess btnPrimary btnDanger"), this.is_warning = !0;
                                break;
                            case "danger":
                                this.$el.addClass("btnDanger").removeClass("btnSuccess btnWarning btnPrimary"), this.is_danger = !0
                        }
                        if (void 0 != option.text && this.$el.text(option.text), void 0 != option.size) switch (option.size) {
                            case "large":
                                this.$el.addClass("btnLarge")
                        }
                    },
                    select: function() {
                        if (this.is_disabled) return this;
                        if (this.option.click && this.option.click.apply(this), !this.is_selected) {
                            var ret = void 0;
                            this.option.update && (ret = this.option.update.apply(this, [!0])), ret !== !1 && this.option.toggleMode && (this.$el.addClass("_cwBNSelected selected").attr("aria-pressed", "true"), this.is_selected = !0)
                        }
                        return this
                    },
                    deSelect: function() {
                        return this.is_disabled ? this : (this.is_selected && (this.$el.removeClass("_cwBNSelected selected").attr("aria-pressed", "false"), this.is_selected = !1), this)
                    },
                    toggle: function() {
                        return this.isSelect() ? this.deSelect() : this.select(), this
                    },
                    isSelect: function() {
                        return this.is_selected
                    },
                    disable: function() {
                        return this.$el.addClass("btnDisable").attr("aria-disabled", "true"), this.is_primary && this.$el.removeClass("btnPrimary"), this.is_success && this.$el.removeClass("btnSuccess"), this.is_warning && this.$el.removeClass("btnWarning"), this.is_danger && this.$el.removeClass("btnDanger"), this.is_disabled = !0, this.option.disable && this.option.disable.apply(this), this
                    },
                    enable: function() {
                        return this.$el.removeClass("btnDisable").attr("aria-disabled", "false"), this.is_primary && this.$el.addClass("btnPrimary"), this.is_success && this.$el.addClass("btnSuccess"), this.is_warning && this.$el.addClass("btnWarning"), this.is_danger && this.$el.addClass("btnDanger"), this.is_disabled = !1, this.option.enable && this.option.enable.apply(this), this
                    }
                }, utility_method = {
                        create: function(label, type, attr) {
                            void 0 == attr && (attr = {});
                            var html = "<div",
                                html_class = "btn";
                            type && (html_class += " btn" + (0, _common.ucfirst)(type));
                            for (var key in attr) switch (key) {
                                case "class":
                                    html_class += " " + attr[key];
                                    break;
                                default:
                                    html += " " + key + '="' + attr[key] + '"'
                            }
                            return html += ' role="button" class="' + html_class + '">' + label + "</div>"
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {
            "../../../../core/lib/common": 50
        }
    ],
    95: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwButtonBar",
                    option_default = {
                        descriptionDelay: 500,
                        toggleMode: !1
                    }, widget_method = {
                        _init: function(option) {
                            var self = this,
                                jqObj = this.$el;
                            this.selected_dat = {}, this.disabled_dat = {}, jqObj.addClass("_cwBB").attr("role", "menu"), jqObj.on("click." + widget_name, "._cwBBButton", function() {
                                self.option.toggleMode ? self.toggle($(this).attr("data-cwui-bb-idx")) : self.select($(this).attr("data-cwui-bb-idx"))
                            }).on("keydown." + widget_name, "._cwBBButton", function(e) {
                                32 == e.keyCode && $(this).click()
                            }), this.length = 0;
                            var selected_dat = $.data(jqObj[0], "_cwBBSelectDat");
                            for (var idx in selected_dat) this.selected_dat[idx] = !1, this.length++;
                            $.data(jqObj[0], "_cwBBSelectDat", null), option.descriptionList = $.data(jqObj[0], "_cwBBDescriptionList"), $.data(jqObj[0], "_cwBBDescriptionList", null);
                            for (var _idx in selected_dat) selected_dat[_idx] && this.select(_idx), this.disabled_dat[_idx] = !1
                        },
                        _setOption: function(option) {
                            var self = this;
                            void 0 != option.descriptionList && this.$el.find("._cwBBButton").each(function() {
                                var button = $(this),
                                    idx = button.attr("data-cwui-bb-idx");
                                self.option.descriptionList[idx] && ($.cwMessageTip.isInit(this) || (button.attr("aria-label", self.option.descriptionList[idx]), button.cwMessageTip({
                                    delay: self.option.descriptionDelay,
                                    message: self.option.descriptionList[idx]
                                })))
                            })
                        },
                        select: function(idx) {
                            if (idx = parseInt(idx, 10), !this.selected_dat[idx] && !this.disabled_dat[idx]) {
                                var ret = void 0;
                                this.option.update && (ret = this.option.update.apply(this, [idx, !0])), ret !== !1 && this.option.toggleMode && (this.findButtonByIndex(idx).addClass("_cwBBSelected selected").attr("aria-checked", "true"), this.selected_dat[idx] = !0)
                            }
                            return this
                        },
                        deSelect: function(idx) {
                            if (idx = parseInt(idx, 10), this.selected_dat[idx] && !this.disabled_dat[idx]) {
                                var ret = void 0;
                                this.option.update && (ret = this.option.update.apply(this, [idx, !1])), ret !== !1 && (this.findButtonByIndex(idx).removeClass("_cwBBSelected selected").attr("aria-checked", "false"), this.selected_dat[idx] = !1)
                            }
                            return this
                        },
                        toggle: function(idx) {
                            return this.isSelect(idx) ? this.deSelect(idx) : this.select(idx), this
                        },
                        selectAll: function() {
                            for (var idx in this.selected_dat) this.select(idx);
                            return this
                        },
                        deSelectAll: function() {
                            for (var idx in this.selected_dat) this.deSelect(idx);
                            return this
                        },
                        isSelect: function(idx) {
                            return this.selected_dat[idx]
                        },
                        getSelectedIndex: function() {
                            var selected_list = [];
                            for (var idx in this.selected_dat) this.selected_dat[idx] && selected_list.push(this.selected_dat[idx]);
                            return selected_list
                        },
                        findButtonByIndex: function(idx) {
                            return this.$el.find("._cwBBButton[data-cwui-bb-idx=" + idx + "]")
                        },
                        hideButton: function(idx) {
                            return this.findButtonByIndex(idx).hide(), this
                        },
                        showButton: function(idx) {
                            return this.findButtonByIndex(idx).show(), this
                        },
                        hideButtonAll: function() {
                            return this.$el.find("._cwBBButton").hide(), this
                        },
                        showButtonAll: function() {
                            return this.$el.find("._cwBBButton").show(), this
                        },
                        disableButton: function(idx) {
                            return this.findButtonByIndex(idx).addClass("btnDisable").attr("aria-disabled", "true"), this.disabled_dat[idx] = !0, this
                        },
                        enableButton: function(idx) {
                            return this.findButtonByIndex(idx).removeClass("btnDisable").attr("aria-disabled", "false"), this.disabled_dat[idx] = !1, this
                        },
                        disableButtonAll: function() {
                            this.$el.find("._cwBBButton").addClass("btnDisable").attr("aria-disabled", "true");
                            for (var idx in this.selected_dat) this.disabled_dat[idx] = !0;
                            return this
                        },
                        enableButtonAll: function() {
                            this.$el.find("._cwBBButton").removeClass("btnDisable").attr("aria-disabled", "false");
                            for (var idx in this.selected_dat) this.disabled_dat[idx] = !1;
                            return this
                        }
                    }, utility_method = {
                        _create: function(jqObj) {
                            var elm = jqObj[0],
                                selected_dat = {};
                            if (!jqObj.hasClass("_cwBB")) {
                                if ("ul" != elm.tagName.toLowerCase()) return;
                                var option_list = [],
                                    description_list = [],
                                    idx = 0;
                                jqObj.find("li").each(function() {
                                    var item = $(this);
                                    option_list.push(item.html()), item.hasClass("._cwBBSelected") ? selected_dat[idx] = !0 : selected_dat[idx] = !1, description_list.push(item.attr("aria-label")), idx++
                                });
                                var attr = jqObj.getAttrs(),
                                    new_jqObj = $($.cwButtonBar.create(option_list, attr));
                                return jqObj.before(new_jqObj), jqObj.remove(), $.data(new_jqObj[0], "_cwBBSelectDat", selected_dat), $.data(new_jqObj[0], "_cwBBDescriptionList", description_list), new_jqObj
                            }
                            return !1
                        },
                        create: function(option_list, attr) {
                            void 0 == attr && (attr = {});
                            var html_ul = "<ul",
                                html_class = "cwTextUnselectable btnNavList";
                            for (var key in attr) switch (key) {
                                case "class":
                                    html_class += " " + attr[key];
                                    break;
                                default:
                                    html_ul += " " + key + '="' + attr[key] + '"'
                            }
                            html_ul += ' class="' + html_class + '">';
                            for (var list_length = option_list.length, i = 0; i < list_length; i++) html_ul += '<li role="menuitemradio" class="_cwBBButton button" data-cwui-bb-idx="' + i + '">' + option_list[i] + "</li>";
                            return html_ul += "</ul>"
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    96: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwCheckBox";
                $(function() {
                    $(document.body).on("click." + widget_name, "._cwCB", function() {
                        return $(this).cwCheckBox().toggle(), !1
                    }).on("keydown." + widget_name, "._cwCB", function(e) {
                        32 == e.keyCode && $(this).click()
                    }).on("click." + widget_name, "._cwCBLabel", function() {
                        return $("#" + $(this).prop("for")).cwCheckBox().toggle(), !1
                    })
                });
                var option_default = {
                    theme: ""
                }, widget_method = {
                        _init: function(option) {
                            this.labelObj = null, this.is_disabled = !1;
                            var label = this.$el.attr("data-label");
                            label && (option.label = label, this.$el.attr("data-label", ""));
                            var theme = this.$el.attr("data-theme");
                            theme && (option.theme = theme)
                        },
                        _setOption: function(option) {
                            if (option.label) {
                                var escaped_label = $.cwUI.escapeHTML(option.label);
                                if (null === this.labelObj) {
                                    var id = this.$el.prop("id");
                                    id && (this.labelObj = $('<label class="_cwCBLabel cwTextUnselectable linkStatus" for="' + id + '">' + escaped_label + "</label>"), this.$el.after(this.labelObj))
                                } else this.labelObj.text(option.label);
                                this.$el.attr("aria-label", escaped_label)
                            }
                        },
                        check: function check(force) {
                            if (!force && this.is_disabled) return this;
                            var self = this,
                                check = this.$el,
                                input = check.find("input");
                            if (!check.hasClass("_cwCBChecked")) {
                                check.addClass("_cwCBChecked " + $.cwCheckBox._getClass("active", this.option.theme)).removeClass("_cwCBUnchecked _cwCBPartialChecked " + $.cwCheckBox._getClass("mixed", this.option.theme) + " " + $.cwCheckBox._getClass("", this.option.theme)).attr("aria-checked", "true"), input && input.attr({
                                    name: input.attr("data-cwui-cb-name")
                                });
                                var args = [!0, self.getVal(), !1];
                                this.$el.trigger(widget_name + "_update", args), "function" == typeof self.option.update && self.option.update.apply(self, args)
                            }
                            return this
                        },
                        partialCheck: function(force) {
                            if (!force && this.is_disabled) return this;
                            var self = this,
                                check = this.$el,
                                input = check.find("input");
                            if (!check.hasClass("_cwCBPartialChecked")) {
                                check.addClass("_cwCBPartialChecked " + $.cwCheckBox._getClass("mixed", this.option.theme)), check.removeClass("_cwCBChecked _cwCBUnchecked " + $.cwCheckBox._getClass("active", this.option.theme) + " " + $.cwCheckBox._getClass("", this.option.theme)).attr("aria-checked", "mixed"), input && input.removeAttr("name");
                                var args = [!1, self.getVal(), !0];
                                this.$el.trigger(widget_name + "_update", args), "function" == typeof self.option.update && self.option.update.apply(self, args)
                            }
                            return this
                        },
                        unCheck: function(force) {
                            if (!force && this.is_disabled) return this;
                            var self = this,
                                check = this.$el,
                                input = check.find("input");
                            if (!check.hasClass("_cwCBUnchecked")) {
                                check.addClass("_cwCBUnchecked " + $.cwCheckBox._getClass("", this.option.theme)), check.removeClass("_cwCBChecked _cwCBPartialChecked " + $.cwCheckBox._getClass("active", this.option.theme) + " " + $.cwCheckBox._getClass("mixed", this.option.theme)).attr("aria-checked", "false"), input && input.removeAttr("name");
                                var args = [!1, self.getVal(), !1];
                                this.$el.trigger(widget_name + "_update", args), "function" == typeof self.option.update && self.option.update.apply(self, args)
                            }
                            return this
                        },
                        toggle: function() {
                            if (this.is_disabled) return this;
                            var check = this.$el;
                            return check.hasClass("_cwCBChecked") ? this.unCheck(!1) : this.check(!1), this
                        },
                        isChecked: function() {
                            return this.$el.hasClass("_cwCBChecked")
                        },
                        getVal: function() {
                            return this.$el.find("input").val()
                        },
                        isDisabled: function() {
                            return this.is_disabled
                        },
                        disable: function() {
                            return this.$el.addClass("disabled"), this.is_disabled = !0, this.option.disable && this.option.disable.apply(this), this
                        },
                        enable: function() {
                            return this.$el.removeClass("disabled"), this.is_disabled = !1, this.option.enable && this.option.enable.apply(this), this
                        }
                    }, utility_method = {
                        _create: function(jqObj) {
                            var elm = jqObj[0];
                            if ("checkbox" == elm.type) {
                                var attr = jqObj.getAttrs(),
                                    new_jqObj = $($.cwCheckBox.create(elm.checked, elm.name, elm.value, attr));
                                return jqObj.before(new_jqObj), jqObj.remove(), new_jqObj
                            }
                            return !!jqObj.hasClass("_cwCB") && jqObj
                        },
                        create: function(checked, name, value, attr) {
                            void 0 == checked && (checked = !1), name || (name = ""), void 0 == value && (value = "on"), void 0 == attr && (attr = {});
                            var theme = "";
                            void 0 != attr["data-theme"] && (theme = attr["data-theme"]);
                            var html_span = '<span role="checkbox"',
                                html_class = "_cwCB";
                            checked ? (html_class += " _cwCBChecked " + $.cwCheckBox._getClass("active", theme), html_span += ' aria-checked="true"') : (html_class += " _cwCBUnchecked " + $.cwCheckBox._getClass("", theme), html_span += ' aria-checked="false"');
                            for (var key in attr) switch (key) {
                                case "class":
                                    html_class += " " + attr[key];
                                    break;
                                default:
                                    html_span += " " + key + '="' + attr[key] + '"'
                            }
                            var html_input = '<input type="hidden"';
                            return name && (html_input += ' data-cwui-cb-name="' + name + '"', checked && (html_input += ' name="' + name + '"')), value && (html_input += ' value="' + $.cwUI.escapeHTML(value) + '"'), html_input += " />", html_span + ' class="' + html_class + '">' + html_input + "</span>"
                        },
                        _getClass: function(type, theme) {
                            var type_str = "";
                            type && (type_str = $.cwUI.ucFirst(type));
                            var theme_str = "";
                            return theme && (theme_str = $.cwUI.ucFirst(theme)), "ico15Checkbox" + type_str + theme_str
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    97: [
        function(require, module, exports) {
            "use strict";
            ! function($, L) {
                var widget_name = "cwDatePicker",
                    option_default = {
                        dateLabel: null,
                        dateFormat: "Y/m/d",
                        compactLabel: !0
                    }, i18n = L.cwDatePicker,
                    supported_dateformat = {
                        "m/d/Y": {
                            compact: "m/d",
                            regex: /([0-9]+)\/([0-9]+)\/([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 1,
                                d: 2
                            },
                            regexcompact: /([0-9]+)\/([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "d/m/Y": {
                            compact: "d/m",
                            regex: /([0-9]+)\/([0-9]+)\/([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 2,
                                d: 1
                            },
                            regexcompact: /([0-9]+)\/([0-9]+)/,
                            regexcompactHint: {
                                m: 2,
                                d: 1
                            }
                        },
                        "Y/m/d": {
                            compact: "m/d",
                            regex: /([0-9]+)\/([0-9]+)\/([0-9]+)/,
                            regexHint: {
                                Y: 1,
                                m: 2,
                                d: 3
                            },
                            regexcompact: /([0-9]+)\/([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "m-d-Y": {
                            compact: "m-d",
                            regex: /([0-9]+)-([0-9]+)-([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 1,
                                d: 2
                            },
                            regexcompact: /([0-9]+)-([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "d-m-Y": {
                            compact: "d-m",
                            regex: /([0-9]+)-([0-9]+)-([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 2,
                                d: 1
                            },
                            regexcompact: /([0-9]+)-([0-9]+)/,
                            regexcompactHint: {
                                m: 2,
                                d: 1
                            }
                        },
                        "Y-m-d": {
                            compact: "m-d",
                            regex: /([0-9]+)-([0-9]+)-([0-9]+)/,
                            regexHint: {
                                Y: 1,
                                m: 2,
                                d: 3
                            },
                            regexcompact: /([0-9]+)-([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "m.d.Y": {
                            compact: "m.d",
                            regex: /([0-9]+)\.([0-9]+)\.([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 1,
                                d: 2
                            },
                            regexcompact: /([0-9]+)\.([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "d.m.Y": {
                            compact: "d.m",
                            regex: /([0-9]+)\.([0-9]+)\.([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 2,
                                d: 1
                            },
                            regexcompact: /([0-9]+)\.([0-9]+)/,
                            regexcompactHint: {
                                m: 2,
                                d: 1
                            }
                        },
                        "Y.m.d": {
                            compact: "m.d",
                            regex: /([0-9]+)\.([0-9]+)\.([0-9]+)/,
                            regexHint: {
                                Y: 1,
                                m: 2,
                                d: 3
                            },
                            regexcompact: /([0-9]+)\.([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "m/d-Y": {
                            compact: "m/d",
                            regex: /([0-9]+)\/([0-9]+)-([0-9]+)/,
                            regexHint: {
                                Y: 3,
                                m: 1,
                                d: 2
                            },
                            regexcompact: /([0-9]+)-([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        },
                        "Y年m月d日": {
                            compact: "m月d日",
                            regex: /([0-9]+)年([0-9]+)月([0-9]+)日/,
                            regexHint: {
                                Y: 1,
                                m: 2,
                                d: 3
                            },
                            regexcompact: /([0-9]+)\/([0-9]+)/,
                            regexcompactHint: {
                                m: 1,
                                d: 2
                            }
                        }
                    }, pointer = null,
                    dpObj = null;
                $(function() {
                    var dpTag = "" + ('<div id="_datePicker" class="datePicker" style="display:none">' + ('<div class="tooltipHeader datePickerHeaderControl linkIconStatus"><span id="_datePickerPrev" role="button" aria-label="' + L.pager_prev + '"\n            class="icoFontTriangleLeft"></span><span class="_datePickerYM"></span><span id="_datePickerNext" role="button" aria-label="' + L.pager_next + '" class="icoFontTriangleRight"></span></div>') + "<table><thead><tr><th>") + i18n.dayNamesMin[0] + "</th>" + ("<th>" + i18n.dayNamesMin[1] + "</th>") + ("<th>" + i18n.dayNamesMin[2] + "</th>") + ("<th>" + i18n.dayNamesMin[3] + "</th>") + ("<th>" + i18n.dayNamesMin[4] + "</th>") + ("<th>" + i18n.dayNamesMin[5] + "</th>") + ("<th>" + i18n.dayNamesMin[6] + "</th>") + '</tr></thead><tbody class="_datePickerDay" style="padding:5px;text-align:right"></tbody></table><div class="tooltipFooter btnGroup">' + ('<div id="_datePickerToday" role="button" class="button btnPrimary">' + i18n.currentText + "</div>") + (' <div id="_datePickerClose" role="button" class="button">' + L.button_close + "</div>") + "</div>";
                    dpObj = $(dpTag), $(document.body).append(dpObj), dpObj.on("click." + widget_name, "td", function() {
                        var date = $(this).attr("data-cwui-dp-date"),
                            match = date.match(/([0-9]+)-([0-9]+)-([0-9]+)/);
                        pointer.select(match[1], match[2], match[3])
                    }), $("#_datePickerClose").on("click." + widget_name, function() {
                        pointer.close()
                    }), $("#_datePickerToday").on("click." + widget_name, function() {
                        pointer.today()
                    }), $("#_datePickerNext").on("click." + widget_name, function() {
                        pointer.nextMonth()
                    }), $("#_datePickerPrev").on("click." + widget_name, function() {
                        pointer.prevMonth()
                    })
                });
                var widget_method = {
                    _init: function() {
                        var self = this;
                        this.tooltip = dpObj.cwToolTip(), this.$el.on("click." + widget_name, function() {
                            self.open()
                        }), this._syncDate()
                    },
                    _syncDate: function() {
                        var now = new Date;
                        this.now_year = now.getFullYear(), this.now_month = now.getMonth() + 1, this.now_day = now.getDate()
                    },
                    _setOption: function(option) {
                        var self = this;
                        if (void 0 != option.open && this.tooltip.setOption({
                            open: function() {
                                "function" == typeof self.option.open && self.option.open.apply(self)
                            }
                        }), void 0 != option.close && this.tooltip.setOption({
                            close: function() {
                                "function" == typeof self.option.close && self.option.close.apply(self)
                            }
                        }), void 0 != option.dateFormat) {
                            var df_info = supported_dateformat[option.dateFormat];
                            df_info && (this.dateFormatInfo = df_info)
                        }
                        void 0 != option.dateLabel && option.dateLabel.on("click." + widget_name, "._cwDPCancel", function() {
                            return self.setVal(""), !1
                        }).on("click." + widget_name, "._cwDPDateLabel", function() {
                            self.open($(this))
                        })
                    },
                    open: function(tipFrom) {
                        return this.loadValue(), pointer = this, void 0 == tipFrom && (tipFrom = this.$el), this._build(this.year, this.month, this.day), this.tooltip.open(tipFrom), this
                    },
                    close: function() {
                        return this.tooltip.close(), this
                    },
                    isOpen: function() {
                        return this.tooltip.isOpen()
                    },
                    getVal: function() {
                        if (!this.option.dateLabel) return this.$el.val();
                        var label = this.option.dateLabel.attr("data-value");
                        return label ? label : ""
                    },
                    setVal: function(date) {
                        if (this.option.dateLabel)
                            if ("" == date) this.option.dateLabel.quickEmpty(), this.option.dateLabel.attr("data-value", "");
                            else {
                                this.option.dateLabel.attr("data-value", date), this.loadValue();
                                var escaped_date = $.cwUI.escapeHTML(date);
                                this.option.compactLabel && this.year == this.now_year && (escaped_date = $.cwUI.escapeHTML(this.dateFormatInfo.compact.replace("m", this.month).replace("d", this.day))), this.option.dateLabel.html('<div class="_cwDPDateLabel assignContent assignLimit"><span class="assignContentText">' + escaped_date + '</span><span\n                                class="_cwDPCancel assignContentCancel"><span class="icoFontCancel"></span><span class="icoTextHide">' + L.button_delete + "</span></span></div>")
                            } else this.$el.val(date);
                        return "function" == typeof this.option.update && this.option.update.apply(this), this
                    },
                    select: function(year, month, day) {
                        return this.setVal(this.option.dateFormat.replace("Y", year).replace("m", month).replace("d", day)), this.close(), this
                    },
                    today: function() {
                        return this._syncDate(), this.select(this.now_year, this.now_month, this.now_day), this
                    },
                    loadValue: function() {
                        var val = this.getVal();
                        if (this.val_year = 0, this.val_month = 0, this.val_day = 0, val.length > 0) {
                            var match = val.match(this.dateFormatInfo.regex);
                            match && (this.val_year = parseInt(match[this.dateFormatInfo.regexHint.Y], 10), this.val_month = parseInt(match[this.dateFormatInfo.regexHint.m], 10), this.val_day = parseInt(match[this.dateFormatInfo.regexHint.d], 10), this.year = this.val_year, this.month = this.val_month, this.day = this.val_day)
                        }
                        return this.val_year || (this.year = this.now_year, this.month = this.now_month), this
                    },
                    nextMonth: function() {
                        return this.month++, this._build(), this
                    },
                    prevMonth: function() {
                        return this.month--, this._build(), this
                    },
                    _build: function() {
                        var dt = new Date(this.year, this.month - 1, 1);
                        this.year = dt.getFullYear(), this.month = dt.getMonth() + 1;
                        var year = this.year,
                            month = this.month,
                            fday = new Date(year, month - 1, 1),
                            lday = new Date(year, month, 0),
                            fday_week = fday.getDay(),
                            lday_date = lday.getDate(),
                            cal_year = year,
                            cal_month = month,
                            cal_day = 1,
                            rows = "",
                            is_current = !1;
                        this._syncDate();
                        for (var row = 1; row <= 6; row++) {
                            rows += "<tr>";
                            for (var col = 0; col < 7; col++) {
                                if (1 == row)
                                    if (col < fday_week) {
                                        var prev_date = new Date(year, month - 1, col - fday_week + 1);
                                        cal_year = prev_date.getFullYear(), cal_month = prev_date.getMonth() + 1, cal_day = prev_date.getDate()
                                    } else col == fday_week ? (cal_year = year, cal_month = month, cal_day = 1, is_current = !0) : cal_day++;
                                    else if (cal_day >= lday_date) {
                                    is_current = !1;
                                    var next_date = new Date(year, month, 1);
                                    cal_year = next_date.getFullYear(), cal_month = next_date.getMonth() + 1, cal_day = 1
                                } else cal_day++;
                                var cls = "";
                                is_current ? cal_year == this.now_year && cal_month == this.now_month && cal_day == this.now_day && (cls = "datePickerToday") : cls = "datePickerOtherMonth", cal_year == this.val_year && cal_month == this.val_month && cal_day == this.val_day && (cls.length > 0 && (cls += " "), cls += "datePickerSelected"), rows += '<td data-cwui-dp-date="' + cal_year + "-" + cal_month + "-" + cal_day + '" class="' + cls + '">' + cal_day + "</td>"
                            }
                            rows += "</tr>"
                        }
                        var YMLabel = "";
                        return YMLabel = i18n.showMonthAfterYear ? year + i18n.yearSuffix + i18n.yearMonthSeparator + i18n.monthNames[month - 1] : i18n.monthNames[month - 1] + i18n.yearMonthSeparator + year + i18n.yearSuffix, dpObj.find("._datePickerYM").text(YMLabel), dpObj.find("._datePickerDay").html(rows), this
                    }
                }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery, jQuery.cwUI.L)
        }, {}
    ],
    98: [
        function(require, module, exports) {
            "use strict";
            var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
                };
            ! function($, L) {
                var widget_name = "cwDialog",
                    dialog_stack = [],
                    body = $(document.body);
                $(function() {
                    body.on("keydown." + widget_name, function(e) {
                        if (27 == e.keyCode && dialog_stack.length > 0) {
                            var dg = dialog_stack[dialog_stack.length - 1];
                            dg.option.closeOnEscape && dg.close()
                        }
                    })
                });
                var option_default = {
                    title: "",
                    width: 300,
                    height: "auto",
                    windowMargin: 7,
                    autoOpen: !1,
                    closeOnEscape: !0
                }, widget_method = {
                        agree_checkboxes: [],
                        checked_agree_checkboxes_count: 0,
                        _init: function() {
                            var self = this;
                            this.wrapper = this.$el.wrap('<div class="_cwDGBase dialogBase" style="display:none"><div class="_cwDGWrapper dialogContent"></div></div>').parent(), this.backbox = this.wrapper.parent(), this.wrapper.prepend('<h1 class="contentHl dialogContentH1 autotrim"></h1><div class="_cwDGTitleButton windowButton linkIconStatus"><span role="button" aria-label="' + L.button_close + '" class="_cwDGButton icoFontCancel icoSizeLarge"></span></div><div style="display:none" class="_cwDGFooter dialogContentFooter"></div>'), this.title = this.wrapper.find("h1"), this.footer = this.wrapper.find("._cwDGFooter"), this.$el.addClass("_cwDG").attr("role", "dialog").show(), this.content = this.$el.find("._cwDGContent").addClass("dialogContentArea"), this.agree_checkboxes = this.wrapper.find("._cwDGAgreeCheckbox"), this.agree_checkboxes.size() > 0 && (this.agree_checkboxes.each(function() {
                                $(this).prop("checked") && (self.checked_agree_checkboxes_count += 1)
                            }), this.agree_checkboxes.cwCheckBox({
                                update: function() {
                                    this.isChecked() ? self.checked_agree_checkboxes_count += 1 : self.checked_agree_checkboxes_count -= 1, self._changeButtonStatus()
                                }
                            })), this.wrapper.on("click." + widget_name, "._cwDGButton", function() {
                                var idx = $(this).attr("data-idx");
                                return idx = void 0 == idx ? null : parseInt(idx, 10), self.buttonClick(idx), !1
                            })
                        },
                        _setOption: function(option) {
                            if (void 0 != option.title)
                                if (option.title) {
                                    this.wrapper.find("._cwDGTitleButton").show();
                                    var escaped_title = $.cwUI.escapeHTML(option.title);
                                    this.title.html(escaped_title).show(), this.$el.attr("aria-label", escaped_title)
                                } else this.wrapper.find("._cwDGTitleButton").hide(), this.title.quickEmpty().hide(), this.$el.attr("aria-label", "");
                            if (void 0 != this.option.buttonLabels && (void 0 != option.buttonLabels || void 0 != option.buttonSubmit || void 0 != option.buttonDelete || void 0 != option.buttonCancel)) {
                                for (var buttons = "", button_type_list = ["buttonSubmit", "buttonDelete", "buttonCancel"], index_map = {}, i = button_type_list.length; i--;) {
                                    var btype = button_type_list[i],
                                        optval = this.option[btype];
                                    if (void 0 !== optval)
                                        if ("object" === ("undefined" == typeof optval ? "undefined" : _typeof(optval)) && optval.length)
                                            for (var j = optval.length; j--;) {
                                                var idx = optval[j];
                                                index_map[idx] = btype
                                            } else index_map[optval] = btype
                                }
                                for (var button_num = this.option.buttonLabels.length, _i = 0; _i < button_num; _i++) {
                                    var button_color = "buttonGray",
                                        extra_class = "";
                                    switch (index_map[_i]) {
                                        case "buttonSubmit":
                                            button_color = "btnPrimary";
                                            break;
                                        case "buttonDelete":
                                            button_color = "btnDanger";
                                            break;
                                        case "buttonCancel":
                                            extra_class += " _cwDGButtonCancel"
                                    }
                                    var escape_button_label = $.cwUI.escapeHTML(this.option.buttonLabels[_i]);
                                    buttons += '<div role="button" aria-label="' + escape_button_label + '" class="_cwDGButton' + extra_class + " button " + button_color + '" data-idx="' + _i + '">' + escape_button_label + "</div>"
                                }
                                buttons ? this.wrapper.find("._cwDGFooter").html(buttons).show() : this.wrapper.find("._cwDGFooter").quickEmpty().hide()
                            }
                            this._changeButtonStatus(), void 0 != option.autoOpen && option.autoOpen && this.open()
                        },
                        open: function() {
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                            var self = this;
                            this.is_open = !0;
                            var jqObj = this.$el;
                            if ("function" == typeof self.option.open && self.option.open.apply(self, args), dialog_stack.push(this), $.cwUI.setZIndex(this.backbox), this.backbox.fadeIn("fast"), this.backbox.fadeIn("fast", function() {
                                self.option.openCallback && self.option.openCallback.apply(self, args)
                            }), "auto" == this.option.width) {
                                jqObj.css("display", "inline-block");
                                var wrapper_pad = this.wrapper.outerWidth() - this.wrapper.width(),
                                    width = jqObj.outerWidth() + wrapper_pad;
                                jqObj.css("display", "block"), this.wrapper.width(width)
                            } else this.wrapper.width(this.option.width);
                            var wrapper_width = this.wrapper.width();
                            switch (this.option.maxWidth && this.option.maxWidth < wrapper_width && this.wrapper.width(this.option.maxWidth), this.option.minWidth && this.option.minWidth > wrapper_width && this.wrapper.width(this.option.minWidth), this.option.height) {
                                case "auto":
                                case "full":
                                    var title_height = 0;
                                    this.option.title && (title_height = this.title.outerHeight());
                                    var footer_height = 0;
                                    this.option.buttonLabels && (footer_height = this.footer.outerHeight());
                                    var max_height = self.getMaxHeight(),
                                        _dialog_height = max_height;
                                    "auto" == this.option.height && (_dialog_height = jqObj.innerHeight() + title_height + footer_height);
                                    var content_scroll_diff = 0;
                                    if (_dialog_height > max_height) {
                                        var content = jqObj;
                                        this.option.contentScrollSelector && (content = jqObj.find(this.option.contentScrollSelector), 0 == content.length), content_scroll_diff = _dialog_height - max_height, content.height(content.height() - content_scroll_diff), content.css({
                                            overflow: "auto"
                                        }), _dialog_height = max_height
                                    }
                                    this.wrapper.height(_dialog_height);
                                    break;
                                default:
                                    this.wrapper.height(this.option.height)
                            }
                            var wrapper_height = this.wrapper.height();
                            this.option.maxHeight && this.option.maxHeight < wrapper_height && this.wrapper.height(this.option.maxHeight), this.option.minHeight && this.option.minHeight > wrapper_height && this.wrapper.height(this.option.minHeight);
                            var window_height = this.backbox.height(),
                                dialog_height = this.wrapper.outerHeight(),
                                dialog_top = parseInt(window_height / 2 - dialog_height / 2, 10);
                            return this.wrapper.css("margin-top", dialog_top + "px"), "function" == typeof self.option.postOpen && self.option.postOpen.apply(self, args), this
                        },
                        close: function() {
                            if (this.is_open) {
                                var self = this;
                                if (this.is_open = !1, "function" == typeof self.option.close) {
                                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
                                    self.option.close.apply(self, args)
                                }
                                return $.cwFloatBox.closeUpperLayer(this.backbox), $.cwUI.unsetZIndex(this.backbox), this.backbox.fadeOut("fast", function() {}), dialog_stack = [], $("#_cwDGBase").fadeOut("fast"), this
                            }
                        },
                        buttonClick: function(idx) {
                            var self = this;
                            if (null === idx) this.close();
                            else {
                                var obj = this.wrapper.find("[data-idx=" + idx + "]");
                                obj.length > 0 && ("function" == typeof self.option.buttonClick && self.option.buttonClick.apply(self, [idx]), obj.hasClass("_cwDGButtonCancel") && this.close())
                            }
                            return this
                        },
                        isAgreed: function() {
                            var checkbox_count = this.agree_checkboxes.size();
                            return 0 === checkbox_count || checkbox_count === this.checked_agree_checkboxes_count
                        },
                        _changeButtonStatus: function() {
                            var buttons = this.wrapper.find("._cwDGButton").not(".buttonGray");
                            this.isAgreed() ? buttons.removeClass("btnDisable") : buttons.addClass("btnDisable")
                        },
                        getMaxHeight: function() {
                            return $(window).height() - 2 * this.option.windowMargin
                        }
                    }, utility_method = {
                        isShown: function() {
                            return dialog_stack.length > 0
                        },
                        close: function() {
                            if (dialog_stack.length > 0)
                                for (var i = dialog_stack.length; i--;) dialog_stack[i].close()
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery, jQuery.cwUI.L)
        }, {}
    ],
    99: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwDropDown",
                    option_default = {
                        showPosition: "right",
                        useHtmlLabel: !1,
                        list: []
                    }, widget_method = {
                        _init: function() {
                            var self = this;
                            self.tip_body = $('<div style="display:none"></div>'), self.tip_body.on("click." + widget_name, "li._cwDDList", function() {
                                self.select($(this).attr("data-cwui-dd-value"))
                            }), $(document.body).append(self.tip_body), this.tooltip = self.tip_body.cwToolTip({
                                direction: "bottom",
                                noTriangle: !0
                            }), this.$el.on("click." + widget_name, function() {
                                self.open(self.$el)
                            }), this.latest_list = ""
                        },
                        _setOption: function() {
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                            var self = this,
                                option = args[0];
                            void 0 != option.open && this.tooltip.setOption({
                                open: function() {
                                    "function" == typeof self.option.open && self.option.open.apply(self, args)
                                }
                            }), void 0 != option.close && this.tooltip.setOption({
                                close: function() {
                                    "function" == typeof self.option.close && self.option.close.apply(self, args)
                                }
                            });
                            var toolTipOptions = ["offsetTop", "offsetLeft", "showPosition", "theme", "useFloatBox", "parentFloatBox"],
                                option_update = !1,
                                toption = {};
                            for (var idx in toolTipOptions) {
                                var key = toolTipOptions[idx];
                                void 0 != option[key] && (option_update = !0, toption[key] = option[key])
                            }
                            option_update && this.tooltip.setOption(toption)
                        },
                        open: function() {
                            var self = this,
                                list = self._getList(),
                                html = '<ul role="menu" class="_cwDDListBody cwNoWrap ddListBody">';
                            if ($.isArray(list))
                                for (var i = 0, len = list.length; i < len; i++)
                                    if ("hr" == list[i]) html += '</ul><div class="line"></div><ul role="menu" class="_cwDDListBody ddListBody cwNoWrap">';
                                    else {
                                        var label = $.cwUI.escapeHTML(list[i].label);
                                        self.option.useHtmlLabel && (label = list[i].label), html += '<li role="menuitem" class="_cwDDList" data-cwui-dd-value="' + $.cwUI.escapeHTML(list[i].value) + '">' + label + "</li>"
                                    }
                            return html += "</ul>", self.latest_list != html && (self.tip_body.html(html), self.latest_list = html), self.tooltip.open(self.$el), self
                        },
                        close: function() {
                            return this.tooltip.close(), this
                        },
                        isOpen: function() {
                            return this.tooltip.isOpen()
                        },
                        select: function(value) {
                            var self = this;
                            return "function" == typeof self.option.select && self.option.select.apply(self, [value]), this.tooltip.close(), this
                        },
                        _getList: function() {
                            return "function" == typeof this.option.list ? this.option.list() : this.option.list
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    100: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwElasticTextArea",
                    option_default = {
                        minHeight: 50,
                        maxHeight: !1,
                        lineHeight: "auto"
                    }, widget_method = {
                        _init: function() {
                            var self = this,
                                jqObj = this.$el;
                            self.is_focused = !1, jqObj.on("keydown." + widget_name, function() {
                                self.resize(), "function" == typeof self.option.update && self.option.update.apply(self)
                            }).on("keyup." + widget_name, function() {
                                self.resize(), "function" == typeof self.option.update && self.option.update.apply(self)
                            }).on("focus." + widget_name, function() {
                                self.is_focused = !0, self.resize()
                            })
                        },
                        _setOption: function(option) {
                            var self = this,
                                jqObj = this.$el;
                            void 0 !== option.lineHeight && "auto" === option.lineHeight && (self.line_height_auto = parseFloat(jqObj.css("line-height")))
                        },
                        getVal: function() {
                            return this.$el.val()
                        },
                        setVal: function(value) {
                            return this.$el.val(value), this.resize(), this
                        },
                        focus: function() {
                            return this.$el.focus().caretPos("last"), this
                        },
                        clearFocused: function() {
                            return this.is_focused = !1, this.resize(), this
                        },
                        resize: function() {
                            var self = this,
                                jqObj = this.$el,
                                val = jqObj.val();
                            if ("" === val && !self.is_focused) return void jqObj.css({
                                "overflow-y": "hidden",
                                height: ""
                            });
                            var current_scrolltop = jqObj.scrollTop();
                            jqObj.height(0);
                            var line_height = parseInt(self.option.lineHeight, 10);
                            "auto" === self.option.lineHeight && (line_height = self.line_height_auto);
                            var new_height = jqObj[0].scrollHeight + line_height,
                                min_height = self.option.minHeight;
                            "function" == typeof self.option.minHeight && (min_height = self.option.minHeight.apply(self)), new_height < min_height && (new_height = min_height);
                            var is_overflow = !1;
                            if (self.option.maxHeight) {
                                var max_height = self.option.maxHeight;
                                "function" == typeof self.option.maxHeight && (max_height = self.option.maxHeight.apply(self)), min_height > max_height && (max_height = min_height), new_height > max_height && (new_height = max_height, is_overflow = !0)
                            }
                            return jqObj.height(new_height), is_overflow ? jqObj.css("overflow-y", "auto").scrollTop(current_scrolltop) : jqObj.css("overflow-y", "hidden"), this
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    101: [
        function(require, module, exports) {
            "use strict";
            ! function($, L) {
                var widget_name = "cwFloatWindow",
                    option_default = {
                        title: "",
                        wrapperSelector: "body",
                        width: 780,
                        allowOverlay: !1,
                        noAnimation: !1
                    }, float_window_dat = {};
                $(function() {
                    $(document.body).on("click." + widget_name, "._cwFWButton", function() {
                        var button = $(this),
                            fw_elm = button.closest("._cwFWInner")[0],
                            floatWindow = $.cwFloatWindow.getWidget(fw_elm),
                            idx = parseInt(button.attr("data-cwui-fw-idx"), 10);
                        floatWindow.buttonClick(idx)
                    }).on("keydown." + widget_name, function(e) {
                        27 == e.keyCode && $.cwFloatWindow.close()
                    })
                });
                var widget_method = {
                    _init: function() {
                        var jqObj = this.$el;
                        jqObj.wrap('<div class="floatWindow"></div>'), jqObj.attr("role", "dialog"), this.finner = jqObj.addClass("_cwFWInner floatWindowInner"), this.fwindow = jqObj.parent().hide(), this.fcontent = jqObj.find("._cwFWContent").addClass("floatWindowContent"), this.finner.prepend('<h1 class="contentHl floatContentH1"></h1><div class="windowButton linkIconStatus"><span class="_cwFWButton icoFontCancel icoSizeLarge" data-cwui-fw-idx="-1"></span><span class="icoTextHide">' + L.button_close + "</span></div>"), this.finner.append('<div style="display:none" class="_cwFWButtonFooter floatWindowFooter"></div>'), float_window_dat[this.widget_id] = this
                    },
                    _setOption: function(option) {
                        var self = this;
                        if (void 0 != option.title) {
                            var escaped_title = $.cwUI.escapeHTML(option.title);
                            self.finner.find("h1").html('<span class="autotrim">' + escaped_title + "</span>"), self.$el.attr("aria-label", escaped_title)
                        }
                        if (void 0 != option.htmlTitle) {
                            var title_text = self.finner.find("h1").html('<span class="autotrim">' + option.htmlTitle + "</span>").text();
                            self.$el.attr("aria-label", title_text)
                        }
                        if (void 0 != this.option.buttonLabels && (void 0 != option.buttonLabels || void 0 != option.buttonSubmit || option.buttonCancel)) {
                            for (var buttons = "", button_num = this.option.buttonLabels.length, i = 0; i < button_num; i++) {
                                var button_color = "buttonGray",
                                    extra_class = "";
                                void 0 != this.option.buttonSubmit && this.option.buttonSubmit == i ? button_color = "btnPrimary" : void 0 != this.option.buttonCancel && this.option.buttonCancel == i && (extra_class += " _cwFWButtonCancel");
                                var escape_button_label = $.cwUI.escapeHTML(this.option.buttonLabels[i]);
                                buttons += '<div role="button" aria-label="' + escape_button_label + '" class="_cwFWButton' + extra_class + " button " + button_color + '" data-cwui-fw-idx="' + i + '">' + escape_button_label + "</div>"
                            }
                            buttons ? self.finner.find("._cwFWButtonFooter").html(buttons).show() : self.finner.find("._cwFWButtonFooter").quickEmpty().hide()
                        }
                    },
                    open: function() {
                        for (var self = this, jqObj = this.$el, option = this.option, _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                        if ("function" == typeof self.option.open && self.option.open.apply(self, args), this.is_open) jqObj.scrollTop(0);
                        else {
                            var will_close_window = [];
                            if (!option.allowOverlay)
                                for (var id in float_window_dat) {
                                    var fw = float_window_dat[id];
                                    fw.isOpen() && will_close_window.push(id)
                                }
                            var open_process = function() {
                                for (var i = will_close_window.length; i--;) float_window_dat[will_close_window[i]].close();
                                self.resize(), self.fcontent.scrollTop(0)
                            };
                            self.resize(), jqObj.show(), this.option.noAnimation ? (self.fwindow.show(), open_process()) : self.fwindow.fadeIn("fast", open_process), $.cwUI.setZIndex(self.fwindow)
                        }
                        return this.is_open = !0, "function" == typeof self.option.postOpen && self.option.postOpen.apply(self, args), this
                    },
                    close: function() {
                        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
                        var self = this,
                            close_process = function() {
                                "function" == typeof self.option.close && self.option.close.apply(self, args)
                            };
                        return $.cwFloatBox.closeUpperLayer(self.fwindow), $.cwUI.unsetZIndex(self.fwindow), this.option.noAnimation ? (self.fwindow.hide(), close_process()) : self.fwindow.fadeOut("fast", close_process), this.is_open = !1, this
                    },
                    buttonClick: function(idx) {
                        var self = this;
                        if (idx == -1) this.close(), "function" == typeof self.option.cancel && self.option.cancel.apply(self);
                        else {
                            var obj = self.finner.find("[data-cwui-fw-idx=" + idx + "]");
                            obj.length > 0 && ("function" == typeof self.option.buttonClick && self.option.buttonClick.apply(self, [idx]), obj.hasClass("_cwFWButtonCancel") && (this.close(), "function" == typeof self.option.cancel && self.option.cancel.apply(self)))
                        }
                        return this
                    },
                    resize: function() {
                        var self = this,
                            jqObj = this.$el,
                            width = $(window).innerWidth(),
                            margin = parseInt((width - self.option.width) / 2, 10);
                        jqObj.css({
                            left: margin,
                            right: margin
                        });
                        var wrapper = $(self.option.wrapperSelector);
                        !wrapper.length;
                        var fw_height = $(self.option.wrapperSelector).height();
                        self.fcontent.height(fw_height);
                        var fw_title_height = self.finner.find("h1").outerHeight(),
                            header = self.finner.find("._cwFWHeader"),
                            fw_header_height = 0;
                        header.length > 0 && (fw_header_height = self.finner.find("._cwFWHeader").outerHeight());
                        var footer = self.finner.find("._cwFWFooter"),
                            fw_footer_height = 0;
                        footer.length > 0 && footer.isVisible() && (fw_footer_height = footer.outerHeight());
                        var bfooter = self.finner.find("._cwFWButtonFooter"),
                            fw_bfooter_height = 0;
                        bfooter.isVisible() && (fw_bfooter_height = bfooter.outerHeight());
                        var content = self.fcontent;
                        0 == content.length;
                        var content_pad = content.innerHeight() - content.height(),
                            content_height = fw_height - fw_title_height - fw_header_height - fw_footer_height - fw_bfooter_height - content_pad;
                        return content.height(content_height), "function" == typeof self.option.resize && self.option.resize.apply(self, [content_height]), this
                    }
                }, utility_method = {
                        isShown: function() {
                            for (var id in float_window_dat)
                                if (float_window_dat[id].isOpen()) return !0;
                            return !1
                        },
                        resize: function() {
                            for (var id in float_window_dat) {
                                var fw = float_window_dat[id];
                                fw.isOpen() && fw.resize()
                            }
                            return this
                        },
                        close: function() {
                            for (var id in float_window_dat) {
                                var fw = float_window_dat[id];
                                fw.isOpen() && fw.close()
                            }
                            return this
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery, jQuery.cwUI.L)
        }, {}
    ],
    102: [
        function(require, module, exports) {
            "use strict";
            ! function($, L) {
                var widget_name = "cwListTip",
                    option_default = {
                        search: !0,
                        useHtmlLabel: !1,
                        multiSelect: !1,
                        selectable: !0,
                        fixHeight: !0,
                        maxListHeight: 160,
                        limit: 200
                    }, widget_method = {
                        ul: null,
                        tooltip: null,
                        searchbox: null,
                        search_focus_idx: 0,
                        _init: function() {
                            var self = this,
                                jqObj = this.$el;
                            jqObj.prepend('<div class="_cwLTSearchArea toolTipSearchArea"><div class="_cwLTSearchBoxArea"></div><div class="_cwLTCheckHandle tooltipCheckHandle" style="display:none"></div><div class="_cwLTSelectOptionArea tooltipCheckHandle" style="display:none"></div></div><ul class="_cwLTList cwTextUnselectable toolTipSelectList tooltipList toolTipListHeight"></ul>'), this.ul = jqObj.find("ul._cwLTList"), this.ul.attr("role", "list"), jqObj.addClass("toolTipListWidth"), this.ul.on("click." + widget_name, "li", function() {
                                var item = $(this);
                                self.select(item.attr("data-cwui-lt-value"), item)
                            }), this.tooltip = jqObj.cwToolTip({
                                open: function() {
                                    if ("function" == typeof self.option.open) {
                                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                                        self.option.open.apply(self, args)
                                    }
                                    self.searchbox && self.searchbox.setVal(""), self.build()
                                }
                            }), this.searchbox = null, this.select_list = [], this.select_dat = {}
                        },
                        _setOption: function() {
                            for (var _this = this, _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
                            var self = this,
                                jqObj = this.$el,
                                option = args[0];
                            if (option.maxListHeight && this.ul.css("max-height", option.maxListHeight), void 0 != option.fixHeight && (option.fixHeight ? this.ul.css("height", option.maxListHeight) : this.ul.css("height", !1)), void 0 != option.close && this.tooltip.setOption({
                                close: function() {
                                    "function" == typeof self.option.close && self.option.close.apply(self, args)
                                }
                            }), void 0 != option.search)
                                if (option.search) {
                                    self.search_focus_idx = 0;
                                    var soption = {
                                        update: function() {
                                            self.search_focus_idx = 0, self.build()
                                        }
                                    };
                                    option.placeHolder ? soption.placeHolder = option.placeHolder : soption.placeHolder = L.button_search, this.searchbox = jqObj.find("._cwLTSearchBoxArea").html('<input class="inputMedium" type="text" />').find("input").cwSearchBox(soption);
                                    var move_up = function() {
                                        var item_list = self.ul.find("li"),
                                            item_length = item_list.length;
                                        if (0 == item_length) return void(self.search_focus_idx = 0);
                                        if (item_list.removeClass("toolTipListHover"), self.search_focus_idx--, self.search_focus_idx < 0 && (self.search_focus_idx = 0), self.search_focus_idx > 0) {
                                            var focus = $(item_list[self.search_focus_idx - 1]);
                                            focus.addClass("toolTipListHover");
                                            var result_box_top = self.ul.offset().top,
                                                focus_top_pos = focus.offset().top;
                                            focus_top_pos < result_box_top && self.ul.scrollTo(focus)
                                        }
                                    }, move_down = function() {
                                            var item_list = self.ul.find("li"),
                                                item_length = item_list.length;
                                            if (0 == item_length) return void(self.search_focus_idx = 0);
                                            item_list.removeClass("toolTipListHover"), self.search_focus_idx++, item_list.length < self.search_focus_idx && (self.search_focus_idx = item_list.length);
                                            var focus = $(item_list[self.search_focus_idx - 1]);
                                            focus.addClass("toolTipListHover");
                                            var result_box_bottom = self.ul.offset().top + self.ul.height(),
                                                focus_bottom_pos = focus.offset().top + focus.height();
                                            focus_bottom_pos > result_box_bottom && self.ul.scrollTo(focus)
                                        };
                                    this.searchbox.$el.keydown(function(e) {
                                        var press_key = e.keyCode;
                                        switch (press_key) {
                                            case 13:
                                                if (self.search_focus_idx > 0) {
                                                    var item_list = self.ul.find("li");
                                                    setTimeout(function() {
                                                        $(item_list[self.search_focus_idx - 1]).click()
                                                    }, 200)
                                                }
                                                break;
                                            case 38:
                                                move_up();
                                                break;
                                            case 40:
                                                move_down()
                                        }
                                    })
                                } else this.searchbox && this.searchbox.quickEmpty();
                                else void 0 != option.placeHolder && this.searchbox && this.searchbox.setOption({
                                    placeHolder: option.placeHolder
                                });
                            if (void 0 != option.multiSelect) {
                                var checkhandle;
                                ! function() {
                                    checkhandle = jqObj.find("._cwLTCheckHandle");
                                    var ul = _this.ul;
                                    option.multiSelect ? (ul.addClass("toolTipSelectList"), checkhandle.html('<span class="_cwLTCheckAll linkStatus">' + L.checkall + '</span> / <span class="_cwLTUnCheckAll linkStatus">' + L.uncheckall + "</span>"), checkhandle.find("._cwLTCheckAll").on("click." + widget_name, function() {
                                        ul.find("li").each(function() {
                                            var item = $(this);
                                            item.hasClass("listSelected") || item.click()
                                        })
                                    }), checkhandle.find("._cwLTUnCheckAll").on("click." + widget_name, function() {
                                        ul.find("li.listSelected").click()
                                    }), checkhandle.show()) : (checkhandle.quickEmpty(), checkhandle.hide())
                                }()
                            }
                            if (void 0 != option.selectOptionArea) {
                                var selectoption = jqObj.find("._cwLTSelectOptionArea");
                                option.selectOptionArea ? (selectoption.html(option.selectOptionArea), selectoption.show()) : (selectoption.quickEmpty(), selectoption.hide())
                            }
                            void 0 != option.selectable && (option.selectable ? this.ul.addClass("toolTipSelectList") : this.ul.removeClass("toolTipSelectList"));
                            var toolTipOptions = ["offsetTop", "offsetLeft", "showPosition", "direction", "noAnimation", "noTriangle", "useFloatBox", "parentFloatBox", "theme"];
                            for (var idx in toolTipOptions) {
                                var key = toolTipOptions[idx];
                                if (void 0 != option[key]) {
                                    var toption = {};
                                    toption[key] = option[key], this.tooltip.setOption(toption)
                                }
                            }
                        },
                        open: function() {
                            var _tooltip;
                            return (_tooltip = this.tooltip).open.apply(_tooltip, arguments), this.ul.scrollTop(0), this.searchbox && this.searchbox.$el.focus(), this
                        },
                        move: function() {
                            var self = this,
                                jqObj = self.$el;
                            return this.tooltip.move(jqObj), this
                        },
                        close: function() {
                            var _tooltip2;
                            return this.searchbox && (this.searchbox.$el.blur(), this.search_focus_idx = 0), (_tooltip2 = this.tooltip).close.apply(_tooltip2, arguments), this
                        },
                        isOpen: function() {
                            return this.tooltip.isOpen()
                        },
                        getVal: function() {
                            for (var value_list = [], select_length = this.select_list.length, i = 0; i < select_length; i++) value_list.push(this.select_list[i]);
                            return this.option.multiSelect ? value_list : value_list[0]
                        },
                        setVal: function(value_list) {
                            this.clear();
                            for (var value_length = value_list.length, i = 0; i < value_length; i++) this.select(value_list[i]);
                            return this
                        },
                        select: function(value, item) {
                            var self = this;
                            return !this.option.multiSelect && this.option.selectable && (this.clear(), item = null), this.option.selectable && (item || (item = this.findItemByValue(value)), this.select_dat[value] ? (item.length > 0 && item.removeClass("listSelected"),
                                this.select_list = this.select_list.filter(function(i) {
                                    return i !== value
                                }), delete this.select_dat[value]) : (item.length > 0 && item.addClass("listSelected"), this.select_list.push(value), this.select_dat[value] = !0), "function" == typeof self.option.update && self.option.update.apply(self)), "function" == typeof self.option.select && self.option.select.apply(self, [value]), this
                        },
                        clear: function() {
                            var self = this;
                            return this.select_list = [], this.select_dat = {}, "function" == typeof self.option.update && self.option.update.apply(self), this.build(), this
                        },
                        getList: function() {
                            var list = this.option.list;
                            "function" == typeof this.option.list && (list = this.option.list.apply(this));
                            var filtered_list = [],
                                filter_keys = [];
                            this.searchbox && (filter_keys = this.searchbox.getVal().toLowerCase().replace(/^\s+|\s+$/g, "").split(/\s+/));
                            for (var list_length = list.length, idx = 0; idx < list_length; idx++) {
                                var item = list[idx],
                                    searchkey = item.label;
                                void 0 != item.keys && (searchkey = item.keys.join(" ")), searchkey = searchkey.toLowerCase(),
                                function() {
                                    for (var _idx = 0; _idx < filter_keys.length; _idx++)
                                        if (searchkey.indexOf(filter_keys[_idx]) === -1) return;
                                    filtered_list.push(item)
                                }()
                            }
                            return filtered_list
                        },
                        findItemByValue: function(value) {
                            return this.ul.find("li[data-cwui-lt-value=" + value + "]")
                        },
                        getValueByItem: function(item) {
                            if (item instanceof jQuery) return item.attr("data-cwui-lt-value")
                        },
                        build: function() {
                            if (void 0 == this.option.list || !this.isOpen()) return !1;
                            var html = "",
                                list = this.getList();
                            if ($.isArray(list)) {
                                for (var count = 0, list_length = list.length, idx = 0; idx < list_length; idx++) {
                                    var item = list[idx];
                                    if (count++, !(count > this.option.limit)) {
                                        var value = $.cwUI.escapeHTML(item.value),
                                            label = $.cwUI.escapeHTML(item.label);
                                        this.option.useHtmlLabel && (label = item.label), html += this.option.selectable ? void 0 == this.select_dat[item.value] ? '<li class="_cwSelectableRow" role="listitem" data-cwui-lt-idx="' + idx + '" data-cwui-lt-value="' + value + '">' + $.cwCheckBox.create(!1, "", idx, {
                                            "data-theme": "green"
                                        }) + label + "</li>" : '<li class="_cwSelectableRow listSelected" role="listitem" data-cwui-lt-idx="' + idx + '" data-cwui-lt-value="' + value + '">' + $.cwCheckBox.create(!0, "", idx, {
                                            "data-theme": "green"
                                        }) + label + "</li>" : '<li role="listitem" data-cwui-lt-idx="' + idx + '" data-cwui-lt-value="' + value + '">' + label + "</li>"
                                    }
                                }
                                if (count > this.option.limit) {
                                    var rest_num = count - this.option.limit,
                                        cwui_listip_list_overflow = L.cwui_listip_list_overflow.replace(/%%num%%/, $.cwUI.formatNumber(rest_num)),
                                        cwui_listip_list_overflow_max = L.cwui_listip_list_overflow_max.replace(/%%num%%/, $.cwUI.formatNumber(this.option.limit));
                                    html += '<div style="text-align:center;font-size:12px;color:#666">' + cwui_listip_list_overflow + " " + cwui_listip_list_overflow_max + "</div>"
                                }
                                return this.ul.html(html), this
                            }
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery, jQuery.cwUI.L)
        }, {}
    ],
    103: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwMessageTip",
                    option_default = {
                        theme: "black",
                        delay: 0,
                        useHtml: !1,
                        delayQuickMode: !0,
                        closeOnClick: !0
                    }, current_show_tip = null,
                    tip_body = $('<div style="display:none"><p class="_cwMTMessage cwNoWrap"></p></div>');
                $(function() {
                    $(document.body).append(tip_body)
                });
                var latest_message = "",
                    tip_show_timer = null,
                    tip_show_flag = !1,
                    current_instance = null,
                    delay_cancel = !1,
                    delay_cancel_timer = null,
                    widget_method = {
                        _init: function() {
                            var self = this,
                                jqObj = this.$el;
                            this.is_disabled = !1, this.tooltip = tip_body.cwToolTip({
                                noAnimation: !0
                            }), jqObj.on("mouseenter." + widget_name, function() {
                                self.open()
                            }), jqObj.on("mouseleave." + widget_name, function() {
                                self.close()
                            })
                        },
                        _setOption: function(option) {
                            var self = this,
                                jqObj = this.$el;
                            void 0 != option.open && this.tooltip.setOption({
                                open: function() {
                                    "function" == typeof self.option.open && self.option.open.apply(self)
                                }
                            }), void 0 != option.close && this.tooltip.setOption({
                                close: function() {
                                    "function" == typeof self.option.close && self.option.close.apply(self)
                                }
                            }), void 0 != option.closeOnClick && (option.closeOnClick ? jqObj.on("click." + widget_name, function() {
                                self.close()
                            }) : jqObj.off("click." + widget_name));
                            var toolTipOptions = ["offsetTop", "offsetLeft", "showPosition", "direction", "noTriangle", "theme"];
                            for (var idx in toolTipOptions) {
                                var key = toolTipOptions[idx];
                                if (void 0 != option[key]) {
                                    var toption = {};
                                    toption[key] = option[key], this.tooltip.setOption(toption)
                                }
                            }
                        },
                        open: function() {
                            var self = this;
                            if (self.is_disabled) return self;
                            current_show_tip = self, tip_show_flag = !0, current_instance = self, tip_show_timer && (clearTimeout(tip_show_timer), tip_show_timer = null);
                            var delay_time = current_instance.option.delay;
                            self.option.delayQuickMode && delay_cancel && (delay_time = 0);
                            var show_process = function() {
                                tip_show_flag ? (self.refresh(current_instance.$el), latest_message && (current_instance.tooltip.open(current_instance.$el), delay_cancel = !0)) : (self.tooltip.close(), current_instance._closeTip()), tip_show_timer = null
                            };
                            return delay_time ? tip_show_timer = setTimeout(show_process, delay_time) : show_process(), delay_cancel_timer && (clearTimeout(delay_cancel_timer), delay_cancel_timer = null), self
                        },
                        close: function() {
                            var self = this;
                            return self.is_disabled ? self : (current_show_tip = null, tip_show_flag = !1, current_instance = self, self._closeTip(), self)
                        },
                        isOpen: function() {
                            return this.tooltip.isOpen()
                        },
                        refresh: function(tipFrom) {
                            var message = this.getMessage(tipFrom);
                            return latest_message != message && (this.option.useHtml ? tip_body.find("._cwMTMessage").html(message) : tip_body.find("._cwMTMessage").text(message), latest_message = message), this
                        },
                        _closeTip: function() {
                            return delay_cancel_timer && clearTimeout(delay_cancel_timer), this.tooltip.close(), delay_cancel_timer = setTimeout(function() {
                                delay_cancel = !1
                            }, 300), this
                        },
                        getMessage: function(tipFrom) {
                            return "function" != typeof this.option.message ? this.option.message : this.option.message.apply(this, [tipFrom])
                        },
                        disable: function() {
                            return this.is_disabled = !0, this
                        },
                        enable: function() {
                            return this.is_disabled = !1, this
                        }
                    }, utility_method = {
                        isShown: function() {
                            return null != current_show_tip
                        },
                        close: function() {
                            return current_show_tip && current_show_tip.close(), this
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    104: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwScrollTable",
                    option_default = {}, widget_method = {
                        _init: function() {
                            var jqObj = this.$el;
                            this.id = jqObj[0].id, jqObj.addClass("basicTableHeader"), this.header_row = jqObj.find("thead th"), this.column_num = this.header_row.length, this.column_padding = [], this.column_width = [];
                            for (var body_id = this.id + "_cwST_body", body = '<div style="overflow-y:auto"><table id="' + body_id + '" class="basicTable"><thead><tr class="basicTableHiddenRow">', i = 0; i < this.column_num; i++) {
                                body += "<th></th>";
                                var cell = $(this.header_row[i]);
                                this.column_padding[i] = cell.outerWidth() - cell.width()
                            }
                            body += "</tr></thead><tbody></tbody></table>", this.body_box = $(body), jqObj.after(this.body_box), this.body_table = $("#" + body_id), this.body_table.find("tbody").replaceWith(jqObj.find("tbody")), this.body_table_head = this.body_table.find("thead th"), this.body_table_body = this.body_table.find("tbody")
                        },
                        _setOption: function() {},
                        addRow: function(content_list, attr) {
                            void 0 == attr && (attr = {});
                            var tr = $("<tr></tr>");
                            void 0 != attr.tr && tr.attr(attr.tr);
                            for (var i = 0; i < this.column_num; i++) {
                                var td = $('<td><div class="autotrim" style="width:' + this.column_width[i] + 'px;">' + content_list[i] + "</div></td>");
                                void 0 != attr.td && void 0 != attr.td[i] && td.attr(attr.td[i]), tr.append(td)
                            }
                            return this.body_table_body.append(tr), this
                        },
                        addMergedRow: function(content, attr) {
                            void 0 == attr && (attr = {});
                            var tr = $("<tr></tr>"),
                                td = $('<td colspan="' + this.column_num + '">' + content + "</td>");
                            return void 0 != attr.tr && tr.attr(attr.tr), void 0 != attr.td && td.attr(attr.td), tr.append(td), this.body_table_body.append(tr), this
                        },
                        empty: function() {
                            return this.body_table_body.quickEmpty(), this
                        },
                        resize: function(content_height) {
                            var self = this;
                            "function" == typeof self.option.preResize && self.option.preResize.apply(self);
                            for (var total_width = this.$el.width(), column_width_list = this.option.columnWidth, col = void 0, padding = void 0, col_width_sum = 0, auto_column = [], i = 0; i < this.column_num; i++) {
                                var width = column_width_list[i];
                                "auto" === width ? auto_column.push(i) : (col_width_sum += width, i != this.column_num - 1 && (col = $(this.body_table_head[i]), padding = this.column_padding[i], this.column_width[i] = width - padding, col.width(this.column_width[i])))
                            }
                            var auto_length = auto_column.length;
                            if (auto_length > 0)
                                for (var auto_width = parseInt((total_width - col_width_sum) / auto_length, 10), _i = 0; _i < auto_length; _i++) col = $(this.body_table_head[auto_column[_i]]), padding = this.column_padding[_i], this.column_width[_i] = auto_width - padding, col.width(this.column_width[_i]);
                            for (var _i2 = 0; _i2 < this.column_num - 1; _i2++) $(this.header_row[_i2]).width($(this.body_table_head[_i2]).width());
                            var body_box_height = content_height - this.$el.height();
                            return this.body_box.height(body_box_height), "function" == typeof self.option.postResize && self.option.postResize.apply(self), this
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    105: [
        function(require, module, exports) {
            "use strict";
            ! function($, L) {
                var widget_name = "cwSearchBox",
                    option_default = {
                        placeHolder: L.button_search
                    };
                $(function() {
                    var keydown_key = null;
                    $(document.body).on("keydown." + widget_name, "._cwSB", function(e) {
                        keydown_key = e.keyCode
                    }).on("keyup." + widget_name, "._cwSB", function(e) {
                        var sbox = $(this),
                            val = sbox.val();
                        val.length > 0 ? sbox.parent().find("._cwSBCancel").show() : sbox.parent().find("._cwSBCancel").hide();
                        var swig = sbox.cwSearchBox(),
                            press_key = e.keyCode;
                        switch (press_key) {
                            case 37:
                            case 38:
                            case 39:
                            case 40:
                            case 16:
                            case 17:
                            case 18:
                                break;
                            case 13:
                                if (13 == keydown_key) break;
                            default:
                                "function" == typeof swig.option.update && swig.option.update.apply(swig)
                        }
                    }).on("click." + widget_name, "._cwSBCancel", function() {
                        var cancel = $(this);
                        cancel.hide();
                        var sbox = cancel.parent().find("._cwSB");
                        sbox.val("").blur();
                        var swig = sbox.cwSearchBox();
                        "function" == typeof swig.option.clear && swig.option.clear.apply(swig), "function" == typeof swig.option.update && swig.option.update.apply(swig)
                    })
                });
                var widget_method = {
                    _init: function(option) {
                        var jqObj = this.$el;
                        this.is_disabled = !1, jqObj.addClass("_cwSB searchBox").attr("role", "search");
                        var placeholder = jqObj.attr("placeholder");
                        placeholder && (option.placeHolder = placeholder), jqObj.wrap('<div class="search"></div>').on("focus." + widget_name, function() {
                            $(this).parent().addClass("focus")
                        }).on("blur." + widget_name, function() {
                            $(this).parent().removeClass("focus")
                        }), jqObj.parent().prepend('<span class="icoFontSearch icSearch"></span><span class="_cwSBCancel icoFontCancel icSearchCancel icoSizeLarge" style="display:none"></span>')
                    },
                    _setOption: function(option) {
                        var jqObj = this.$el;
                        option.placeHolder && jqObj.attr("placeholder", option.placeHolder)
                    },
                    getVal: function() {
                        return this.$el.val()
                    },
                    setVal: function(value) {
                        return this.$el.val(value).keyup(), this
                    },
                    disable: function() {
                        return this.is_disabled = !0, this.$el.prop("disabled", !0), this.option.disable && this.option.disable.apply(this), this
                    },
                    enable: function() {
                        return this.is_disabled = !1, this.$el.prop("disabled", !1), this.option.enable && this.option.enable.apply(this), this
                    }
                }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery, jQuery.cwUI.L)
        }, {}
    ],
    106: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwSelectBox",
                    option_default = {
                        width: "auto",
                        height: "auto",
                        parentFloatBox: null
                    };
                $(function() {
                    $(document.body).on("click." + widget_name, "._cwSLBox", function() {
                        var sbox = $(this).closest("._cwSL").cwSelectBox();
                        $.cwFloatBox.skip(sbox.ul), sbox.toggle()
                    })
                });
                var widget_method = {
                    _init: function() {
                        var self = this,
                            jqObj = this.$el;
                        this.input = jqObj.find("input._cwSLInput"), this.ul = jqObj.find("ul._cwSLList"), this.box = jqObj.find("._cwSLBox"), this.is_disabled = !1, this.ul.on("click." + widget_name, "li", function() {
                            var item = $(this),
                                value = item.attr("data-cwui-sb-value");
                            self.select(value, {
                                item: item
                            })
                        })
                    },
                    _setOption: function(option) {
                        var jqObj = this.$el;
                        void 0 != option.width && ("auto" == option.width ? jqObj.css({
                            width: !1
                        }) : this.box.width(option.width)), void 0 != option.maxWidth && (option.maxWidth ? this.box.css("max-width", option.maxWidth).addClass("autotrim") : this.box.css("max-width", "").removeClass("autotrim"))
                    },
                    open: function() {
                        var self = this;
                        if (this.is_open || this.is_disabled) return this;
                        this.is_open = !0, this.ul.find("li.selectboxSelected").removeClass("selectboxSelected");
                        var selected = this.findSelectedItem();
                        selected.addClass("selectboxSelected"), $.cwFloatBox.open(this.ul, function() {
                            self.close()
                        }, {
                            noAnimation: !0,
                            skip: self.option.parentFloatBox
                        }), this.ul.scrollTop(this.ul.scrollTop() + selected.position().top), this.ul_width = this.ul.width();
                        var box_inner_width = this.box.innerWidth();
                        return this.ul_width < box_inner_width && this.ul.width(box_inner_width), this
                    },
                    close: function() {
                        return this.is_open ? (this.is_open = !1, $.cwFloatBox.close(this.ul), this) : this
                    },
                    toggle: function() {
                        return this.isOpen() ? this.close() : this.open(), this
                    },
                    select: function(value, options) {
                        options = options || {};
                        var self = this,
                            silent = !1,
                            item = options.item;
                        return void 0 == item && (item = this.findItemByValue(value)), item || (item = this.ul.find("li:first")), options.silent && (silent = !0), this.$el.find("._cwSLSelectedLabel").html(item.html()), this.input.val(value), silent || (this.$el.trigger(widget_name + "_update", [value]), "function" == typeof self.option.update && self.option.update.apply(self, [value])), this.close(), this
                    },
                    selectByIndex: function(index, options) {
                        var item = this.findItemByIndex(index);
                        this.select(item.attr("data-cwui-sb-value"), $.extend({
                            item: item
                        }, options))
                    },
                    findSelectedItem: function() {
                        return this.findItemByValue(this.getVal())
                    },
                    findItemByIndex: function(index) {
                        var item_list = this.ul.find("li");
                        return item_list[index] ? $(item_list[index]) : null
                    },
                    findItemByValue: function(value) {
                        var item = null;
                        return this.ul.find("li").each(function() {
                            var li = $(this);
                            if (li.attr("data-cwui-sb-value") == value) return item = li, !1
                        }), item
                    },
                    getVal: function() {
                        return this.input.val()
                    },
                    setList: function(option_list, value) {
                        return $.isArray(option_list) ? (this.ul.html($.cwSelectBox.createOptionList(option_list, value)), "undefined" == typeof value && this.selectByIndex(0, {
                            silent: !0
                        }), this._init(), this) : this
                    },
                    appendList: function(option_list) {
                        if (!$.isArray(option_list)) return this;
                        var currentList = [],
                            $el = this.$el;
                        return $el.find("li").each(function() {
                            var $li = $(this),
                                value = $li.prop("data-cwui-sb-value"),
                                label = $li.text();
                            currentList.push({
                                label: label,
                                value: value
                            })
                        }), this.setList(currentList.concat(option_list)), this
                    },
                    isDisabled: function() {
                        return this.is_disabled
                    },
                    disable: function() {
                        return this.is_disabled = !0, this
                    },
                    enable: function() {
                        return this.is_disabled = !1, this
                    }
                }, utility_method = {
                        _create: function(jqObj) {
                            var elm = jqObj[0];
                            if ("select-one" == elm.type) {
                                var option_list = [];
                                jqObj.find("option").each(function() {
                                    var option = $(this);
                                    option_list.push({
                                        value: option.val(),
                                        label: option.text()
                                    })
                                });
                                var attr = jqObj.getAttrs(),
                                    new_jqObj = $($.cwSelectBox.create(option_list, elm.name, jqObj.val(), attr));
                                return jqObj.before(new_jqObj), jqObj.remove(), new_jqObj
                            }
                            return !!jqObj.hasClass("_cwSL") && jqObj
                        },
                        create: function(option_list, name, value, attr) {
                            name || (name = ""), void 0 == attr && (attr = {}), void 0 == value && (value = "");
                            var html_div = "<div",
                                html_class = "_cwSL selectbox cwTextUnselectable";
                            for (var key in attr) switch (key) {
                                case "class":
                                    html_class += " " + attr[key];
                                    break;
                                default:
                                    html_div += " " + key + '="' + attr[key] + '"'
                            }
                            for (var html_ul = '<ul role="list" class="_cwSLList selectboxContent cwNoWrap cwTextUnselectable" style="display:none">' + this.createOptionList(option_list) + "</ul>", selected_label = "", i = 0; i < option_list.length; i++) {
                                var item = option_list[i];
                                if (item.value == value) {
                                    selected_label = item.label;
                                    break
                                }
                            }
                            var html_default = '<div class="_cwSLBox selectboxDefault"><span class="_cwSLSelectedLabel cwNoWrap">' + $.cwUI.escapeHTML(selected_label) + '</span><span class="icoFontTriangleDown"></span></div>',
                                html_input = '<input class="_cwSLInput" type="hidden"';
                            name && (html_input += ' name="' + name + '"'), html_input += ' value="' + $.cwUI.escapeHTML(value) + '"/>';
                            var html = html_div + ' class="' + html_class + '">' + html_default + html_ul + html_input + "</div>";
                            return html
                        },
                        createOptionList: function(option_list) {
                            for (var html = "", i = 0; i < option_list.length; i++) {
                                var item = option_list[i];
                                if (item.tooltip) {
                                    var tooltip = item.tooltip;
                                    html += '<li role="listitem" class="_showDescription" aria-label="' + tooltip + '" '
                                } else html += '<li role="listitem" ';
                                html += 'data-cwui-sb-value="' + $.cwUI.escapeHTML(item.value) + '">' + $.cwUI.escapeHTML(item.label) + "</li>"
                            }
                            return html
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    107: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwTabbedBar",
                    option_default = {
                        toggleMode: !1,
                        descriptionDelay: 500
                    }, widget_method = {
                        _init: function() {
                            this.selected_idx = null
                        },
                        _setOption: function(option) {
                            if (this.init_option) {
                                var self = this;
                                this.bbar = this.$el.cwButtonBar({
                                    toggleMode: !0,
                                    descriptionList: option.descriptiopnList,
                                    descriptionDelay: option.descriptionDelay,
                                    update: function(idx, is_select) {
                                        if (self.selected_idx == idx) {
                                            if (!is_select) {
                                                if (!self.option.toggleMode) return !1;
                                                self.selected_idx = null, self.option.update && self.option.update.apply(self, [idx, !1])
                                            }
                                        } else if (is_select) {
                                            var before_idx = self.selected_idx;
                                            self.selected_idx = idx, this.deSelect(before_idx), self.option.update && self.option.update.apply(self, [idx, !0])
                                        }
                                    }
                                }), this.$el = this.bbar.$el, setTimeout(function() {
                                    option.selected ? self.select(option.selected) : option.toggleMode || self.select(0)
                                })
                            }
                        },
                        select: function(idx) {
                            return idx = parseInt(idx, 10), this.selected_idx != idx && this.bbar.select(idx), this
                        },
                        deselectAll: function() {
                            return this.bbar.deSelectAll(), this
                        },
                        getSelectedIndex: function() {
                            return this.selected_idx
                        },
                        disableButton: function(idx) {
                            return this.bbar.disableButton(idx), this
                        },
                        enableButton: function(idx) {
                            return this.bbar.enableButton(idx), this
                        },
                        disableButtonAll: function() {
                            return this.bbar.disableButtonAll(), this
                        },
                        enableButtonAll: function() {
                            return this.bbar.enableButtonAll(), this
                        }
                    }, utility_method = {};
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    108: [
        function(require, module, exports) {
            "use strict";
            ! function($) {
                var widget_name = "cwToolTip",
                    option_default = {
                        offsetLeft: 0,
                        offsetTop: 0,
                        windowMargin: 7,
                        triangleMargin: 10,
                        useFloatBox: !0,
                        showPosition: "center",
                        direction: "vertical",
                        theme: "white",
                        noAnimation: !1,
                        noTriangle: !1,
                        parentFloatBox: null
                    }, opened_tip = {}, widget_method = {
                        _init: function() {
                            var jqObj = this.$el;
                            jqObj.attr("role", "tooltip"), this.tipFrom = null
                        },
                        _setOption: function(option) {
                            var jqObj = this.$el;
                            if (void 0 != option.theme) {
                                this.init_option || jqObj.removeClass("toolTipWhite toolTipBlack");
                                var themename = $.cwUI.ucFirst(option.theme.toLowerCase());
                                jqObj.addClass("toolTip toolTip" + themename + " mainContetTooltip")
                            }
                        },
                        open: function() {
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
                            var tipFrom = args[0];
                            if (tipFrom && !$.cwUI.isWidget(tipFrom[0])) {
                                var self = this,
                                    jqObj = self.$el;
                                if (self.is_open) {
                                    if (tipFrom[0] == self.tipFrom[0]) return void self.close();
                                    "function" == typeof self.option.open && self.option.open.apply(self, args)
                                } else self.is_open = !0, "function" == typeof self.option.open && self.option.open.apply(self, args), self.option.useFloatBox ? $.cwFloatBox.open(jqObj, function() {
                                    self.close()
                                }, {
                                    noAnimation: self.option.noAnimation,
                                    skip: self.option.parentFloatBox
                                }) : ($.cwUI.setZIndex(jqObj), jqObj.show()), opened_tip[self.widget_id] = self;
                                return self.option.useFloatBox && ($.cwFloatBox.skip(jqObj), setTimeout(function() {
                                    $.cwFloatBox.clearSkip()
                                })), self.move(tipFrom), "function" == typeof self.option.postOpen && self.option.postOpen.apply(self, args), self
                            }
                        },
                        move: function(tipFrom) {
                            var self = this,
                                jqObj = self.$el,
                                offset_top = 0;
                            self.option.offsetTop && (offset_top = self.option.offsetTop);
                            var offset_left = 0;
                            if (self.option.offsetLeft && (offset_left = self.option.offsetLeft), tipFrom instanceof jQuery) {
                                if (!tipFrom.isVisible()) return void self.close()
                            } else tipFrom = {
                                x: parseInt(tipFrom.x, 10),
                                y: parseInt(tipFrom.y, 10),
                                offset: function() {
                                    return {
                                        top: tipFrom.y,
                                        left: tipFrom.x
                                    }
                                },
                                outerHeight: function() {
                                    return 1
                                },
                                outerWidth: function() {
                                    return 1
                                }
                            };
                            self.tipFrom = tipFrom;
                            var doc = $(document.body),
                                document_width = doc.width(),
                                document_height = doc.height(),
                                pos = tipFrom.offset(),
                                tip_width = jqObj.outerWidth(),
                                tip_height = jqObj.outerHeight(),
                                tip_half_height = parseInt(tip_height / 2, 10),
                                direction = "";
                            direction = "vertical" == self.option.direction ? pos.top - tip_height < 0 ? "bottom" : "top" : "horizontal" == self.option.direction ? pos.left > parseInt(document_width / 2, 10) ? "left" : "right" : self.option.direction;
                            var themename = $.cwUI.ucFirst(self.option.theme.toLowerCase()),
                                triangle_class = "";
                            switch (direction) {
                                case "top":
                                    triangle_class = "toolTipTriangle" + themename + "Bottom";
                                    break;
                                case "bottom":
                                    triangle_class = "toolTipTriangle" + themename + "Top";
                                    break;
                                case "left":
                                    triangle_class = "toolTipTriangle" + themename + "Right";
                                    break;
                                case "right":
                                    triangle_class = "toolTipTriangle" + themename + "Left";
                                    break;
                                default:
                                    return !1
                            }
                            jqObj.find("._cwTTTriangle").remove(), self.option.noTriangle || jqObj.prepend('<div class="_cwTTTriangle toolTipTriangle ' + triangle_class + '"></div>');
                            var triangle = null,
                                triangle_height = 0,
                                triangle_width = 0;
                            self.option.noTriangle || (triangle = jqObj.find("._cwTTTriangle"), triangle_height = triangle.outerHeight(), triangle_width = triangle.outerWidth());
                            var obj_width = tipFrom.outerWidth(),
                                obj_half_width = parseInt(obj_width / 2, 10),
                                obj_height = tipFrom.outerHeight(),
                                obj_half_height = parseInt(obj_height / 2, 10),
                                top = void 0,
                                left = void 0;
                            switch (direction) {
                                case "top":
                                    top = pos.top - tip_height - triangle_height + offset_top;
                                    break;
                                case "bottom":
                                    top = pos.top + obj_height + triangle_height + offset_top;
                                    break;
                                case "left":
                                    left = pos.left - tip_width - triangle_width + offset_left;
                                    break;
                                case "right":
                                    left = pos.left + obj_width + triangle_width + offset_left
                            }
                            switch (direction) {
                                case "top":
                                case "bottom":
                                    switch (self.option.showPosition) {
                                        case "left":
                                            left = self.option.noTriangle ? pos.left + offset_left : pos.left - parseInt(tip_width / 2, 10) + offset_left;
                                            break;
                                        case "right":
                                            left = self.option.noTriangle ? pos.left - tip_width + obj_width + offset_left : pos.left - parseInt(tip_width / 2, 10) + obj_width + offset_left;
                                            break;
                                        default:
                                            left = pos.left - parseInt(tip_width / 2, 10) + obj_half_width + offset_left
                                    }
                                    break;
                                case "left":
                                case "right":
                                    switch (self.option.showPosition) {
                                        case "top":
                                            top = pos.top + offset_top;
                                            break;
                                        case "bottom":
                                            top = pos.top + obj_height - tip_height + offset_top;
                                            break;
                                        default:
                                            top = pos.top + obj_half_height - tip_half_height + offset_top
                                    }
                            }
                            var right = left + tip_width;
                            right > document_width && (left = document_width - self.option.windowMargin - tip_width), left < self.option.windowMargin && (left = self.option.windowMargin);
                            var bottom = top + tip_height;
                            if (bottom > document_height && (top = document_height - self.option.windowMargin - tip_height), top < self.option.windowMargin && (top = self.option.windowMargin), triangle) {
                                var triangle_half_height = parseInt(triangle_height / 2, 10),
                                    triangle_half_width = parseInt(triangle_width / 2, 10);
                                switch (direction) {
                                    case "top":
                                    case "bottom":
                                        var tip_left = 0;
                                        switch (self.option.showPosition) {
                                            case "left":
                                                tip_left = pos.left - left - triangle_half_width + offset_left, tip_left < self.option.triangleMargin && (tip_left = self.option.triangleMargin);
                                                break;
                                            case "right":
                                                tip_left = pos.left - left + obj_width - triangle_half_width + offset_left;
                                                var right_borderpos = tip_width - triangle_width - self.option.triangleMargin;
                                                tip_left > right_borderpos && (tip_left = right_borderpos);
                                                break;
                                            default:
                                                tip_left = pos.left - left + obj_half_width - triangle_half_width + offset_left
                                        }
                                        triangle.css("left", tip_left);
                                        break;
                                    case "left":
                                    case "right":
                                        var tip_top = 0;
                                        switch (self.option.showPosition) {
                                            case "top":
                                                tip_top = pos.top - top + self.option.triangleMargin + offset_top;
                                                break;
                                            case "bottom":
                                                tip_top = pos.top - top + tip_height - triangle_height - self.option.triangleMargin + offset_top;
                                                break;
                                            default:
                                                tip_top = pos.top - top + tip_half_height - triangle_half_height + offset_top
                                        }
                                        triangle.css("top", tip_top)
                                }
                            }
                            return jqObj.css({
                                top: top,
                                left: left
                            }), self
                        },
                        close: function() {
                            var self = this;
                            if (!this.is_open) return this;
                            if (this.is_open = !1, "function" == typeof self.option.close) {
                                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];
                                self.option.close.apply(self, args)
                            }
                            return this.option.useFloatBox ? $.cwFloatBox.close(this.$el) : ($.cwUI.unsetZIndex(this.$el), this.option.noAnimation ? this.$el.hide() : this.$el.fadeOut("fast")), delete opened_tip[self.widget_id], this
                        }
                    }, utility_method = {
                        close: function() {
                            for (var widget_id in opened_tip) opened_tip[widget_id].close();
                            return this
                        }
                    };
                $.cwUI.addWidget(widget_name, option_default, widget_method, utility_method)
            }(jQuery)
        }, {}
    ],
    109: [
        function(require, module, exports) {
            "use strict";
            var resources = "./image/emoticon/",
                EMOTICONS = [{
                    name: "smile",
                    tag: ":)",
                    src: resources + "emo_smile.gif",
                    title: L.emoticon_smile
                }, {
                    name: "sad",
                    tag: ":(",
                    src: resources + "emo_sad.gif",
                    title: L.emoticon_sad
                }, {
                    name: "moreSmile",
                    tag: ":D",
                    src: resources + "emo_more_smile.gif",
                    title: L.emoticon_more_smile
                }, {
                    name: "lucky",
                    tag: "8-)",
                    src: resources + "emo_lucky.gif",
                    title: L.emoticon_lucky
                }, {
                    name: "surprise",
                    tag: ":o",
                    src: resources + "emo_surprise.gif",
                    title: L.emoticon_surprise
                }, {
                    name: "wink",
                    tag: ";)",
                    src: resources + "emo_wink.gif",
                    title: L.emoticon_wink
                }, {
                    name: "tears",
                    tag: ";(",
                    src: resources + "emo_tears.gif",
                    title: L.emoticon_tears
                }, {
                    name: "sweat",
                    tag: "(sweat)",
                    src: resources + "emo_sweat.gif",
                    title: L.emoticon_sweat
                }, {
                    name: "mumu",
                    tag: ":|",
                    src: resources + "emo_mumu.gif",
                    title: L.emoticon_mumu
                }, {
                    name: "kiss",
                    tag: ":*",
                    src: resources + "emo_kiss.gif",
                    title: L.emoticon_kiss
                }, {
                    name: "tongueout",
                    tag: ":p",
                    src: resources + "emo_tongueout.gif",
                    title: L.emoticon_tongueout
                }, {
                    name: "blush",
                    tag: "(blush)",
                    src: resources + "emo_blush.gif",
                    title: L.emoticon_blush
                }, {
                    name: "wonder",
                    tag: ":^)",
                    src: resources + "emo_wonder.gif",
                    title: L.emoticon_wonder
                }, {
                    name: "snooze",
                    tag: "|-)",
                    src: resources + "emo_snooze.gif",
                    title: L.emoticon_snooze
                }, {
                    name: "love",
                    tag: "(inlove)",
                    src: resources + "emo_love.gif",
                    title: L.emoticon_love
                }, {
                    name: "grin",
                    tag: "]:)",
                    src: resources + "emo_grin.gif",
                    title: L.emoticon_grin
                }, {
                    name: "talk",
                    tag: "(talk)",
                    src: resources + "emo_talk.gif",
                    title: L.emoticon_talk
                }, {
                    name: "yawn",
                    tag: "(yawn)",
                    src: resources + "emo_yawn.gif",
                    title: L.emoticon_yawn
                }, {
                    name: "puke",
                    tag: "(puke)",
                    src: resources + "emo_puke.gif",
                    title: L.emoticon_puke
                }, {
                    name: "ikemen",
                    tag: "(emo)",
                    src: resources + "emo_ikemen.gif",
                    title: L.emoticon_ikemen
                }, {
                    name: "otaku",
                    tag: "8-|",
                    src: resources + "emo_otaku.gif",
                    title: L.emoticon_otaku
                }, {
                    name: "ninmari",
                    tag: ":#)",
                    src: resources + "emo_ninmari.gif",
                    title: L.emoticon_ninmari
                }, {
                    name: "nod",
                    tag: "(nod)",
                    src: resources + "emo_nod.gif",
                    title: L.emoticon_nod
                }, {
                    name: "shake",
                    tag: "(shake)",
                    src: resources + "emo_shake.gif",
                    title: L.emoticon_shake
                }, {
                    name: "wrySmile",
                    tag: "(^^;)",
                    src: resources + "emo_wry_smile.gif",
                    title: L.emoticon_wry_smile
                }, {
                    name: "whew",
                    tag: "(whew)",
                    src: resources + "emo_whew.gif",
                    title: L.emoticon_whew
                }, {
                    name: "clap",
                    tag: "(clap)",
                    src: resources + "emo_clap.gif",
                    title: L.emoticon_clap
                }, {
                    name: "bow",
                    tag: "(bow)",
                    src: resources + "emo_bow.gif",
                    title: L.emoticon_bow
                }, {
                    name: "roger",
                    tag: "(roger)",
                    src: resources + "emo_roger.gif",
                    title: L.emoticon_roger
                }, {
                    name: "muscle",
                    tag: "(flex)",
                    src: resources + "emo_muscle.gif",
                    title: L.emoticon_muscle
                }, {
                    name: "dance",
                    tag: "(dance)",
                    src: resources + "emo_dance.gif",
                    title: L.emoticon_dance
                }, {
                    name: "komanechi",
                    tag: "(:/)",
                    src: resources + "emo_komanechi.gif",
                    title: L.emoticon_komanechi
                }, {
                    name: "devil",
                    tag: "(devil)",
                    src: resources + "emo_devil.gif",
                    title: L.emoticon_devil
                }, {
                    name: "star",
                    tag: "(*)",
                    src: resources + "emo_star.gif",
                    title: L.emoticon_star
                }, {
                    name: "heart",
                    tag: "(h)",
                    src: resources + "emo_heart.gif",
                    title: L.emoticon_heart
                }, {
                    name: "flower",
                    tag: "(F)",
                    src: resources + "emo_flower.gif",
                    title: L.emoticon_flower
                }, {
                    name: "cracker",
                    tag: "(cracker)",
                    src: resources + "emo_cracker.gif",
                    title: L.emoticon_cracker
                }, {
                    name: "cake",
                    tag: "(^)",
                    src: resources + "emo_cake.gif",
                    title: L.emoticon_cake
                }, {
                    name: "coffee",
                    tag: "(coffee)",
                    src: resources + "emo_coffee.gif",
                    title: L.emoticon_coffee
                }, {
                    name: "beer",
                    tag: "(beer)",
                    src: resources + "emo_beer.gif",
                    title: L.emoticon_beer
                }, {
                    name: "handshake",
                    tag: "(handshake)",
                    src: resources + "emo_handshake.gif",
                    title: L.emoticon_handshake
                }, {
                    name: "yes",
                    tag: "(y)",
                    src: resources + "emo_yes.gif",
                    title: L.emoticon_yes
                }],
                SECRET_EMOTICONS = [{
                    name: "ec14",
                    tag: "(ec14)",
                    src: resources + "emo_ceo.gif",
                    title: L.emoticon_ec14
                }, {
                    name: "gogo",
                    tag: "(gogo)",
                    src: resources + "emo_gogo.gif",
                    title: L.emoticon_gogo
                }],
                Emoticons = function() {
                    function Emoticons(baseEmoticons, secretEmoticons) {
                        var _this = this;
                        this.baseEmoticons = baseEmoticons, this.secretEmoticons = secretEmoticons, this.tagHash = {}, this.baseEmoticons.concat(this.secretEmoticons).forEach(function(emo) {
                            _this.setTitle(emo)
                        })
                    }
                    return Emoticons.prototype.getEmoticonWithTag = function(tag) {
                        return this.tagHash[tag]
                    }, Emoticons.prototype.getEmoticons = function() {
                        return this.baseEmoticons
                    }, Emoticons.prototype.getAllEmoticons = function() {
                        return this.baseEmoticons.concat(this.secretEmoticons)
                    }, Emoticons.prototype.setTitle = function(emo) {
                        emo.title = emo.title + " " + emo.tag, this.tagHash[emo.tag] = emo
                    }, Emoticons
                }();
            exports.emoticons = new Emoticons(EMOTICONS, SECRET_EMOTICONS), window.emoticons = exports.emoticons
        }, {}
    ],
    110: [
        function(require, module, exports) {
            "use strict";
            var mediaExtensionTypes = [{
                ext: /^mpe?g$/,
                type: "video/mpeg",
                preview: "video"
            }, {
                ext: /^mp4|m4v|mov$/,
                type: "video/mp4",
                preview: "video"
            }, {
                ext: /^webm$/,
                type: "video/webm",
                preview: "video"
            }, {
                ext: /^ogv$/,
                type: "video/ogg",
                preview: "video"
            }, {
                ext: /^avi$/,
                type: "video/avi",
                preview: "video"
            }, {
                ext: /^qt$/,
                type: "video/quicktime",
                preview: "video"
            }, {
                ext: /^wmv$/,
                type: "video/x-ms-wmv",
                preview: "video"
            }, {
                ext: /^mp3$/,
                type: "audio/mpeg",
                preview: "video"
            }, {
                ext: /^ogg$/,
                type: "audio/ogg",
                preview: "video"
            }, {
                ext: /^midi?$/,
                type: "audio/midi",
                preview: "video"
            }, {
                ext: /^wav$/,
                type: "audio/wav",
                preview: "video"
            }],
                previewExtensionTypes = [{
                    ext: new RegExp("^(txt|html|htm|shtml|less|scss|styl|stylus|asp|bashrc|c|cgi|cpp|css|dif|diff|patch|h|hs|java|js|jsee|json|jsp|m|manifest|md|mobileprovision|plist|mxml|php|pl|pm|py|rb|scala|swift|tpl|vbs|csv|slk|sql|tsv|def|inf|ini|reg|log)$"),
                    preview: "source"
                }, {
                    ext: /^(jpe?g|gif|png)$/,
                    preview: "image"
                }],
                pdfExtensionTypes = {
                    ext: /^pdf$/,
                    preview: "iframe"
                }, isMsie = /\WTrident\W/i.test(navigator.userAgent),
                FilePreview = function() {
                    function FilePreview() {
                        var video = document.createElement("video"),
                            canPlayTypes = mediaExtensionTypes.filter(function(type) {
                                return video.canPlayType(type.type)
                            });
                        isMsie || canPlayTypes.push(pdfExtensionTypes), this.extList = previewExtensionTypes.concat(canPlayTypes)
                    }
                    return FilePreview.prototype.canPlayTypes = function(_ext) {
                        var ext = _ext.toLowerCase();
                        return Boolean(this.extList.find(function(type) {
                            return type.ext.test(ext)
                        }))
                    }, FilePreview.prototype.getPreviewType = function(_ext) {
                        var ext = _ext.toLowerCase();
                        return (this.extList.find(function(type) {
                            return type.ext.test(ext)
                        }) || {}).preview || ""
                    }, FilePreview
                }();
            exports.filePreview = new FilePreview
        }, {}
    ],
    111: [
        function(require, module, exports) {
            "use strict";
            var __extends = this && this.__extends || function(d, b) {
                    function __() {
                        this.constructor = d
                    }
                    for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
                    d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __)
                }, boot_1 = require("../controller/boot");
            "#wysiwyg" !== location.hash && "#!wysiwyg" !== location.hash || ($("<style>\n[contenteditable=true].placeholder:before{\n  content: attr(placeholder);\n  opacity: 0.7;\n  color: gray;\n  position: absolute;\n  display: block; /* For Firefox */\n}\n\n[contenteditable=true] {\n  padding: 5px;\n  outline: transparent solid 0px;\n}\n\n.emoticonImage, .avatarImage {\n  width: 20px;\n  height: 20px;\n}\n\n.avatarImage {\n  border-radius: 50%;\n}\n</style>").appendTo("head"), $("#_chatText").replaceWith($("<pre></pre>").attr({
                id: "_chatText",
                tabindex: "1",
                placeholder: $("#_chatText").attr("placeholder"),
                contenteditable: "true",
                role: "textbox",
                "aria-multiline": "true"
            }).addClass("placeholder").css({
                display: "inline-block"
            }).on("keydown", function(event) {
                event.stopPropagation()
            })));
            var MessageArea = function() {
                function MessageArea(element) {
                    this.element = element
                }
                return MessageArea.prototype.setPlaceholder = function(text) {
                    this.element.attr("placeholder", text)
                }, MessageArea.prototype.clearPlaceholder = function() {
                    this.element.removeAttr("placeholder")
                }, MessageArea.prototype.getScrollHeight = function() {
                    return this.element[0].scrollHeight
                }, MessageArea.prototype.scrollBottom = function() {
                    this.element[0].scrollTop = this.element[0].scrollHeight
                }, MessageArea.prototype.bindEvent = function(name, handler) {
                    this.element.on(name, handler)
                }, MessageArea.prototype.triggerEvent = function(name) {
                    this.element.trigger(name)
                }, MessageArea.prototype.bindPasteImageEvent = function(handler) {
                    var _this = this;
                    this.element.on("paste", function(event) {
                        _this.forceChange();
                        var clipboard = event.originalEvent.clipboardData;
                        if (clipboard) {
                            var items = Array.prototype.slice.call(clipboard.items || []);
                            if (items.find(function(t) {
                                return "text/plain" === t.type
                            })) {
                                var text = clipboard.getData("text/plain");
                                if (!document.execCommand("insertText", !1, text)) return;
                                return void event.preventDefault()
                            }
                            var item = items.find(function(t) {
                                return t.type.match(/^image\/(png|jpe?g|gif)$/)
                            });
                            item && handler(item)
                        }
                    })
                }, MessageArea.prototype.setExternalClass = function() {
                    this.element.addClass("chatSendTextareaOther").data("external", !0)
                }, MessageArea.prototype.clearExternalClass = function() {
                    this.element.removeClass("chatSendTextareaOther").data("external", !1)
                }, MessageArea.prototype.getHeight = function() {
                    return this.element.height()
                }, MessageArea.prototype.setHeight = function(height) {
                    this.element.height(height)
                }, MessageArea.prototype.setPaddinghWidth = function(width) {
                    var paddingWidth = this.element.innerWidth() - this.element.width();
                    this.element.width(width - paddingWidth - 18)
                }, MessageArea.prototype.blur = function() {
                    this.element.blur()
                }, MessageArea.prototype.forceChange = function() {
                    var _this = this,
                        changeFrag = !1,
                        onChange = function() {
                            changeFrag = !0
                        };
                    this.element.on("change", onChange), requestAnimationFrame(function() {
                        _this.element.off("change", onChange), changeFrag || _this.element.trigger("change")
                    })
                }, MessageArea
            }(),
                MessageElementarea = function(_super) {
                    function MessageElementarea(element) {
                        var rAF, _this = _super.call(this, element) || this;
                        return _this.element.on("keyup keydown keypress", function() {
                            rAF && cancelAnimationFrame(rAF), rAF = requestAnimationFrame(function() {
                                "" === _this.element.html() && _this.element.html("\n"), _this.changePlaceholderClass()
                            })
                        }), _this
                    }
                    return __extends(MessageElementarea, _super), MessageElementarea.prototype.getValue = function() {
                        return this.element.contents().get().map(function(elem) {
                            return elem.dataset && elem.dataset.cwtag ? elem.dataset.cwtag : elem.nodeValue || ""
                        }).join("").replace(/^\n/, "")
                    }, MessageElementarea.prototype.setValue = function(text) {
                        var fragment = this.textToFragment(text);
                        this.element.empty(), text || this.element.text("\n"), this.element.append(fragment), this.clearCaretPos(), this.changePlaceholderClass()
                    }, MessageElementarea.prototype.insertValue = function(text) {
                        var _this = this;
                        text && this.element.hasClass("placeholder") && "\n" === this.element.text() && this.element.text("");
                        var fragment = this.textToFragment(text),
                            lastChild = fragment.lastChild,
                            range = this.element.data("range");
                        range ? range.insertNode(fragment) : this.element.append(fragment), requestAnimationFrame(function() {
                            var newRange = document.createRange(),
                                selection = window.getSelection();
                            newRange.setStart(lastChild, "#text" === lastChild.nodeName ? lastChild.nodeValue.length : 0), newRange.collapse(!0), selection.removeAllRanges(), selection.addRange(newRange), _this.changePlaceholderClass()
                        })
                    }, MessageElementarea.prototype.replaceCodeBlock = function() {
                        var openTag;
                        this.element.contents().get().filter(function(e) {
                            return "#text" === e.nodeName && e.nodeValue.match(/```/)
                        }).forEach(function(elem) {
                            return openTag ? (openTag.nodeValue = openTag.nodeValue.replace(/```/, "[code]"), elem.nodeValue = elem.nodeValue.replace(/```/, "[/code]"), void(openTag = null)) : openTag = elem
                        })
                    }, MessageElementarea.prototype.updateCaretPos = function() {
                        var selection = document.getSelection();
                        if (selection.rangeCount) {
                            var range = selection.getRangeAt(0);
                            this.element.is(range.commonAncestorContainer.parentNode) && this.element.data("range", range)
                        }
                    }, MessageElementarea.prototype.clearCaretPos = function() {
                        this.element.removeData("range")
                    }, MessageElementarea.prototype.clearValue = function() {
                        this.element.text("\n"), this.clearCaretPos(), this.changePlaceholderClass()
                    }, MessageElementarea.prototype.isEmpty = function() {
                        return "" === this.getValue()
                    }, MessageElementarea.prototype.focus = function() {
                        var _this = this,
                            range = this.element.data("range");
                        range && requestAnimationFrame(function() {
                            var newRange = document.createRange();
                            newRange.setStart(_this.element.contents()[0], range.startOffset), newRange.collapse(!0);
                            var selection = window.getSelection();
                            selection.removeAllRanges(), selection.addRange(newRange)
                        })
                    }, MessageElementarea.prototype.changePlaceholderClass = function() {
                        "\n" === this.element.html() ? this.element.addClass("placeholder") : this.element.removeClass("placeholder")
                    }, MessageElementarea.prototype.textToFragment = function(text) {
                        var _this = this;
                        this.replaceTagRegExp = this.replaceTagRegExp || new RegExp("(" + boot_1.CW.emoticon.map(function(e) {
                            return e.key.replace(/\W/g, "\\$&")
                        }).join("|") + "|\\[To:\\d+\\])"), this.emoticonMap = this.emoticonMap || boot_1.CW.emoticon.reduce(function(base, emoticon) {
                            var img = document.createElement("img");
                            return img.src = "image/emoticon/" + emoticon.src, img.title = emoticon.title, img.className = "emoticonImage", img.alt = img.dataset.cwtag = emoticon.key, base[emoticon.key] = img, base
                        }, {});
                        var fragment = document.createDocumentFragment();
                        return text.split(this.replaceTagRegExp).map(function(text, index) {
                            var isTag = Boolean(index % 2);
                            if (!isTag) return document.createTextNode(text);
                            if (_this.emoticonMap[text]) return _this.emoticonMap[text];
                            var match = text.match(/\[To:(\d+)\]/);
                            if (match) {
                                var accountId = match.pop(),
                                    src = boot_1.CW.getAvatarPanel(Number(accountId), {
                                        src: !0
                                    }),
                                    img = document.createElement("img");
                                return img.src = src, img.className = "avatarImage", img.alt = img.dataset.cwtag = "[To:" + accountId + "]", img
                            }
                            return document.createTextNode(text)
                        }).forEach(function(element) {
                            fragment.appendChild(element)
                        }), fragment
                    }, MessageElementarea
                }(MessageArea),
                MessageTextarea = function(_super) {
                    function MessageTextarea() {
                        return _super.apply(this, arguments) || this
                    }
                    return __extends(MessageTextarea, _super), MessageTextarea.prototype.getValue = function() {
                        return this.element.val()
                    }, MessageTextarea.prototype.setValue = function(text) {
                        this.element.val(text)
                    }, MessageTextarea.prototype.insertValue = function(text) {
                        var elem = this.element[0],
                            value = this.getValue(),
                            selectionStart = elem.selectionStart,
                            lastCaret = selectionStart + text.length;
                        this.setValue(value.substr(0, selectionStart) + text + value.substr(selectionStart)), elem.setSelectionRange(lastCaret, lastCaret)
                    }, MessageTextarea.prototype.replaceCodeBlock = function() {
                        var val = this.getValue(),
                            selectionStart = this.element.prop("selectionStart"),
                            selectionEnd = this.element.prop("selectionEnd");
                        if (selectionStart === selectionEnd) {
                            var pre = val.substr(0, selectionStart),
                                after = pre.replace(/(^|\n)```(\r?\n[\s\S]+?\r?\n)```(\r?\n|$)/, "$1[code]$2[/code]$3");
                            if (after !== pre) {
                                var pos = val.substr(selectionStart);
                                this.setValue(after + pos), this.element.prop("selectionStart", after.length), this.element.prop("selectionEnd", after.length)
                            }
                        }
                    }, MessageTextarea.prototype.updateCaretPos = function() {}, MessageTextarea.prototype.clearCaretPos = function() {}, MessageTextarea.prototype.clearValue = function() {
                        this.element.val("")
                    }, MessageTextarea.prototype.isEmpty = function() {
                        return "" === this.getValue()
                    }, MessageTextarea.prototype.focus = function() {
                        this.element.focus()
                    }, MessageTextarea
                }(MessageArea),
                chatText = $("#_chatText");
            exports.messageArea = chatText.is("textarea") ? new MessageTextarea(chatText) : new MessageElementarea(chatText)
        }, {
            "../controller/boot": 66
        }
    ],
    112: [
        function(require, module, exports) {
            "use strict";
            exports.THEME = {
                blue: {
                    chatlist_min_width: 190,
                    chatlist_max_width: 300,
                    timeline_min_width: 350,
                    subcontent_min_width: 300,
                    actionbar_height: 22,
                    textarea_line_height: 22,
                    chatSendArea_initial_height: 100,
                    chatSendArea_expandto_height_default: 160,
                    chattext_min_content_height: 50,
                    timeline_min_height: 300,
                    timeline_assign_member_show_max: 5,
                    taskinput_init_height: 100,
                    taskinput_min_height: 50,
                    tasklist_min_height: 390,
                    description_max_height: 300,
                    description_min_height: 50,
                    mymenu_min_width: 140,
                    member_preview_show_max: 5,
                    member_detail_show_max: 34,
                    dialog_header_height: 40,
                    dialog_footer_height: 40,
                    preview_dialog_height_padding: 20,
                    preview_dialog_width_padding: 20,
                    taskwindow_pager_view_num: 50,
                    filewindow_pager_view_num: 50,
                    contactwindow_pager_view_num: 50,
                    extermal_marktip_offset_left: 3,
                    expose_zindex: 500,
                    messagetip_delay: 500
                }
            }
        }, {}
    ],
    113: [
        function(require, module, exports) {
            "use strict";
            /*!
             * Copyright (C) 2011 OZAWA Masayuki <http://coroq.com/>
             * Licenced under the MIT license
             */
            ! function($) {
                var wrapText = function(textNode, tag, begin, end) {
                    var fore = document.createTextNode(textNode.nodeValue.substring(0, begin));
                    textNode.parentNode.insertBefore(fore, textNode);
                    var wrapped = document.createElement(tag);
                    return wrapped.appendChild(document.createTextNode(textNode.nodeValue.substring(begin, end))), textNode.parentNode.insertBefore(wrapped, textNode), textNode.nodeValue = textNode.nodeValue.substring(end), wrapped
                }, markText = function markText(keyword, className, elem, options) {
                        var ikeyword = keyword.toLowerCase();
                        elem = elem || document.body, options = options || {}, ("string" == typeof options.skipClassName || options.skipClassName instanceof String) && (options.skipClassName = [options.skipClassName]), options.skipClassName instanceof Array && (options.skipClassName = new RegExp("\\b(" + options.skipClassName.join("|") + ")\\b")), options.tag = options.tag || "span";
                        for (var i = elem.firstChild; i; i = i.nextSibling)
                            if (1 != i.nodeType) {
                                if (3 == i.nodeType)
                                    for (;;) {
                                        var m = i.nodeValue.toLowerCase().indexOf(ikeyword);
                                        if (m == -1) break;
                                        var wrapped = wrapText(i, options.tag, m, m + ikeyword.length);
                                        wrapped.className = className
                                    }
                            } else {
                                if (options.skipClassName && options.skipClassName.test(i.className)) continue;
                                markText(ikeyword, className, i, options)
                            }
                    };
                $.fn.markText = function(keyword, className, options) {
                    return this.each(function() {
                        markText(keyword, className, this, options)
                    })
                }
            }(jQuery)
        }, {}
    ],
    114: [
        function(require, module, exports) {
            "use strict";
            var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
                };
            /*!
             * jQuery.ScrollTo
             * Copyright (c) 2007-2012 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
             * Dual licensed under MIT and GPL.
             * Date: 12/14/2012
             *
             * @projectDescription Easy element scrolling using jQuery.
             * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
             * @author Ariel Flesler
             * @version 1.4.5 BETA
             *
             * @id jQuery.scrollTo
             * @id jQuery.fn.scrollTo
             * @param {String, Number, DOMElement, jQuery, Object} target Where to scroll the matched elements.
             *   The different options for target are:
             * - A number position (will be applied to all axes).
             * - A string position ('44', '100px', '+=90', etc ) will be applied to all axes
             * - A jQuery/DOM element ( logically, child of the element to scroll )
             * - A string selector, that will be relative to the element to scroll ( 'li:eq(2)', etc )
             * - A hash { top:x, left:y }, x and y can be any kind of number/string like above.
             * - A percentage of the container's dimension/s, for example: 50% to go to the middle.
             * - The string 'max' for go-to-end.
             * @param {Number, Function} duration The OVERALL length of the animation, this argument can be the settings object instead.
             * @param {Object,Function} settings Optional set of settings or the onAfter callback.
             *  @option {String} axis Which axis must be scrolled, use 'x', 'y', 'xy' or 'yx'.
             *  @option {Number, Function} duration The OVERALL length of the animation.
             *  @option {String} easing The easing method for the animation.
             *  @option {Boolean} margin If true, the margin of the target element will be deducted from the final position.
             *  @option {Object, Number} offset Add/deduct from the end position. One number for both axes or { top:x, left:y }.
             *  @option {Object, Number} over Add/deduct the height/width multiplied by 'over', can be { top:x, left:y } when using both axes.
             *  @option {Boolean} queue If true, and both axis are given, the 2nd axis will only be animated after the first one ends.
             *  @option {Function} onAfter Function to be called after the scrolling ends.
             *  @option {Function} onAfterFirst If queuing is activated, this function will be called after the first scrolling ends.
             * @return {jQuery} Returns the same jQuery object, for chaining.
             *
             * @desc Scroll to a fixed position
             * @example $('div').scrollTo( 340 );
             *
             * @desc Scroll relatively to the actual position
             * @example $('div').scrollTo( '+=340px', { axis:'y' } );
             *
             * @desc Scroll using a selector (relative to the scrolled element)
             * @example $('div').scrollTo( 'p.paragraph:eq(2)', 500, { easing:'swing', queue:true, axis:'xy' } );
             *
             * @desc Scroll to a DOM element (same for jQuery object)
             * @example var second_child = document.getElementById('container').firstChild.nextSibling;
             * $('#container').scrollTo( second_child, { duration:500, axis:'x', onAfter:function(){
             * alert('scrolled!!');
             * }});
             *
             * @desc Scroll on both axes, to different values
             * @example $('div').scrollTo( { top: 300, left:'+=200' }, { axis:'xy', offset:-20 } );
             */
            ! function($) {
                function both(val) {
                    return "object" == ("undefined" == typeof val ? "undefined" : _typeof(val)) ? val : {
                        top: val,
                        left: val
                    }
                }
                var $scrollTo = $.scrollTo = function(target, duration, settings) {
                    $(window).scrollTo(target, duration, settings)
                };
                $scrollTo.defaults = {
                    axis: "xy",
                    duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1,
                    limit: !0
                }, $scrollTo.window = function(scope) {
                    return $(window)._scrollable()
                }, $.fn._scrollable = function() {
                    return this.map(function() {
                        var elem = this,
                            isWin = !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), ["iframe", "#document", "html", "body"]) != -1;
                        if (!isWin) return elem;
                        var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;
                        return /webkit/i.test(navigator.userAgent) || "BackCompat" == doc.compatMode ? doc.body : doc.documentElement
                    })
                }, $.fn.scrollTo = function(target, duration, settings) {
                    return "object" == ("undefined" == typeof duration ? "undefined" : _typeof(duration)) && (settings = duration, duration = 0), "function" == typeof settings && (settings = {
                        onAfter: settings
                    }), "max" == target && (target = 9e9), settings = $.extend({}, $scrollTo.defaults, settings), duration = duration || settings.duration, settings.queue = settings.queue && settings.axis.length > 1, settings.queue && (duration /= 2), settings.offset = both(settings.offset), settings.over = both(settings.over), this._scrollable().each(function() {
                        function animate(callback) {
                            $elem.animate(attr, duration, settings.easing, callback && function() {
                                callback.call(this, target, settings)
                            })
                        }
                        if (null != target) {
                            var toff, elem = this,
                                $elem = $(elem),
                                targ = target,
                                attr = {}, win = $elem.is("html,body");
                            switch ("undefined" == typeof targ ? "undefined" : _typeof(targ)) {
                                case "number":
                                case "string":
                                    if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
                                        targ = both(targ);
                                        break
                                    }
                                    if (targ = $(targ, this), !targ.length) return;
                                case "object":
                                    (targ.is || targ.style) && (toff = (targ = $(targ)).offset())
                            }
                            $.each(settings.axis.split(""), function(i, axis) {
                                var Pos = "x" == axis ? "Left" : "Top",
                                    pos = Pos.toLowerCase(),
                                    key = "scroll" + Pos,
                                    old = elem[key],
                                    max = $scrollTo.max(elem, axis);
                                if (toff) attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]), settings.margin && (attr[key] -= parseInt(targ.css("margin" + Pos), 10) || 0, attr[key] -= parseInt(targ.css("border" + Pos + "Width"), 10) || 0), attr[key] += settings.offset[pos] || 0, settings.over[pos] && (attr[key] += targ["x" == axis ? "width" : "height"]() * settings.over[pos]);
                                else {
                                    var val = targ[pos];
                                    attr[key] = val.slice && "%" == val.slice(-1) ? parseFloat(val) / 100 * max : val
                                }
                                settings.limit && /^\d+$/.test(attr[key]) && (attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max)), !i && settings.queue && (old != attr[key] && animate(settings.onAfterFirst), delete attr[key])
                            }), animate(settings.onAfter)
                        }
                    }).end()
                }, $scrollTo.max = function(elem, axis) {
                    var Dim = "x" == axis ? "Width" : "Height",
                        scroll = "scroll" + Dim;
                    if (!$(elem).is("html,body")) return elem[scroll] - $(elem)[Dim.toLowerCase()]();
                    var size = "client" + Dim,
                        html = elem.ownerDocument.documentElement,
                        body = elem.ownerDocument.body;
                    return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size])
                }
            }(jQuery)
        }, {}
    ],
    115: [
        function(require, module, exports) {
            "use strict";

            function InviteMailAccountModel() {
                var self = this,
                    _emails = [],
                    _message = "",
                    _validateMessage = "",
                    _is_valid = !0;
                self.emails = function() {
                    return _emails
                }, self.setEmails = function(emails) {
                    if (!$.isArray(emails)) throw new TypeError("Expected Array");
                    return _emails = emails, self
                }, self.message = function() {
                    return _message
                }, self.setMessage = function(message) {
                    if ("string" != typeof message) throw new TypeError("Expected String");
                    return _message = message, self
                }, self.parseBulkEmails = function(text) {
                    if ("string" != typeof text) throw new TypeError("Expected String");
                    _emails = self._parseEmails(text)
                }, self.clear = function() {
                    _emails = [], _message = "", _validateMessage = ""
                }, self.validate = function() {
                    return _is_valid = _emails.some(function(n) {
                        return "" !== n
                    }), _validateMessage = _is_valid === !1 ? L.contact_invite_mail_type_email_addresses : "", _is_valid
                }, self.is_valid = function() {
                    return _is_valid
                }, self.validateMessage = function() {
                    return _validateMessage
                }, self.hasMessage = function() {
                    return Boolean(_message)
                }, self._parseEmails = function(text) {
                    return text.split("\n").filter(function(line) {
                        return "" !== line.trim()
                    })
                }
            }
            exports.InviteMailAccountModel = InviteMailAccountModel
        }, {}
    ],
    116: [
        function(require, module, exports) {
            "use strict";

            function RoomSub() {
                var self = this;
                self.show_promotion = !1,
                function() {
                    "free" === SERVICE_PLAN && (common_1.time() - Number(REG_TIME) <= 2592e3 || (self.show_promotion = !0))
                }(), self.prepare = function() {
                    self.view = new RoomSubView_1.RoomSubView(self), self.view.prepare()
                }, self.addTask = function(room_id, text, task_limit, assign_list, success_callback, error_callback) {
                    task_limit ? task_limit.toString().match(/^[0-9]+$/) || (task_limit = common_1.strtotime_format(task_limit, boot_1.ST.data.dateformat)) : task_limit = 0, boot_1.CW.post("gateway.php", {
                        cmd: "add_task",
                        task: text,
                        task_limit: task_limit,
                        assign: assign_list,
                        room_id: room_id
                    }, function(json) {
                        success_callback(json), boot_1.CW.watch()
                    }, function(error) {
                        error_callback(error)
                    })
                }, self.buildMember = function() {
                    self.view.buildMember()
                }, self.showPromotion = function() {
                    self.show_promotion && self.view.showPromotion()
                }, self.hidePromotion = function() {
                    self.view.hidePromotion()
                }
            }
            var RoomSubView_1 = require("../view/RoomSubView"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.RoomSub = RoomSub
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../view/RoomSubView": 139
        }
    ],
    117: [
        function(require, module, exports) {
            "use strict";
            exports.chatContentTemplate = '\n<div id="_timeLine" role="main" class="chatTimeLine">\n  <div id="_messageIdEnd"></div>\n</div>\n\n<div id="_chatSendArea" class="chatSendArea">\n  <div id="_mainContentExpandLeft" role="button" aria-label="' + L.chatsend_expand_area + '" data-delay="0" class="_showDescription chatSendArea__areaScaleButtonLeft">\n    <span class="chatSendArea__areaScaleIconLeft icoFontTriangleLeft"></span>\n  </div>\n  <div id="_mainContentExpandRight" role="button" aria-label="' + L.chatsend_expand_area + '" data-delay="0" class="_showDescription chatSendArea__areaScaleButtonRight">\n    <span class="chatSendArea__areaScaleIconRight icoFontTriangleRight"></span>\n  </div>\n\n  <div class="chatSendArea__chatInput">\n    <div class="chatInput">\n      <ul id="_fileSendStatusArea" style="display:none" class="chatInput__fileSendStatus"></ul>\n      <div id="_chatSendToolbar" class="chatInput__tools" style="display: none">\n        <ul id="_chatSendTool" class="chatInput__toolList">\n          <li id="_emoticon" role="button" class="_showDescription chatInput__emoticon" aria-label="' + L.chatsend_emoticonalt + '"><span class="icoFontEmoticon chatInput__emoticonIcon"></span></li>\n          <li id="_to" role="button" class="_showDescription chatInput__to" aria-label="' + L.chatsend_toalt + '"><span class="icoFontTo chatInput__toIcon"></span></li>\n          <li id="_file" role="button" class="_showDescription chatInput__file" aria-label="' + L.chatsend_filealt + '"><span class="icoFontSendFile chatInput__fileIcon "></span></li>\n          <li id="_groupCall" role="button" class="_showDescription chatInput__groupLive" style="display:none" aria-label="' + L.live_join + '"><span class="icoFontVideoChat chatInput__groupLiveIcon"></span></li>\n          <li id="_directCall" role="button" class="_joinLive _showDescription chatInput__directLive" style="display:none" aria-label="' + L.live_join + '"><span class="icoFontVideoChat chatInput__directLiveIcon"></span></li>\n        </ul>\n\n        <span id="_fileStatus" class="chatInput__fileSendLoadingContainer" style="display:none"><img src="./imagenew/all/common/loader/img_loader_white.gif" alt="Loading" class="chatInput__fileSendLoadingIcon" /></span>\n\n        <div class="chatInput__submitContainer">\n      <span id="_sendEnterActionArea" role="button" aria-labe="" class="chatInput__settingEnterAction">\n       <input id="_sendEnterAction" type="checkbox" class="chatInput__settingEnterActionCheckbox" />\n       <span class="icoFontParagraph icoSizeSmall chatInput__settingEnterActionIcon"></span><span class="icoTextHide">' + L.button_return + '</span>\n      </span>\n          <div id="_sendButton" role="button" tabindex="2" class="chatInput__submit">' + L.button_send + '</div>\n        </div>\n      </div>\n\n      <div id="_editInfo" class="chatInput__editContainer" style="display:none">\n        <p class="chatInput__editText">' + L.chat_editing + '</p>\n        <div id="_editCancel" role="button"  class="chatInput__editCancel icoFontCancel"></div>\n      </div>\n\n      <div id="_externalInfo" class="_externalMark chatInput__externalUser" style="display:none">\n        <span class="ico35Other">' + L.chatroom_not_only_internal + '</span>\n      </div>\n\n      <div id="_chatTextArea" class="chatInput__textareaContainer">\n        <textarea id="_chatText" tabindex="1" class="chatInput__textarea"></textarea>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n<!-- .resizeControl -->\n<div id="_subContentHandle" class="resizeCntrol sideContentResizeCtrlArea"></div>\n<div id="_subContentAreaHandle" class="resizeCntrol subContentResizeCtrlArea"></div>\n<!-- /.resizeControl -->\n<!-- end chat_content -->\n'
        }, {}
    ],
    118: [
        function(require, module, exports) {
            "use strict";
            exports.cheatSheetTemplate = '\n<!-- CHEAT SHEET -->\n<div id="_cheatSheetContent" class="cheatsheetWrapper" style="display: none;">\n  <div class="cheatsheetContent">\n    <div class="cheatsheetHeader">\n      <i id="_closeCheatSheet" class="cheatsheetBtnClose" role="button" aria-label="' + L.button_close + '"><span class="icoFont icoFontCancel icoSizeLarge"></span></i>\n    </div>\n    <div class="cheatsheetBody">\n      <div class="cheatsheetShortcut">\n        <h1 class="cheatsheetIndex">' + L.chatwork_service_name + " " + L.cheatsheet_short_cut_title + '</h1>\n        <table class="cheatsheetShortcutTable">\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span class="icoFont icoFontTriangleTop"></span>\n              </div>\n              ' + L.cheatsheet_or + '\n              <div class="cheatsheetKeySample">\n                <span>k</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">' + L.cheatsheet_text_key_k + '</p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span class="icoFont icoFontTriangleDown"></span>\n              </div>\n              ' + L.cheatsheet_or + '\n              <div class="cheatsheetKeySample">\n                <span>j</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_j + "<br>\n                " + L.cheatsheet_supplement_text_key_j + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>Enter</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_enter + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span class="_cheatsheetKeyCommand"></span>\n              </div>\n              +\n              <div class="cheatsheetKeySample">\n                <span class="icoFont icoFontTriangleLeft"></span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_command_arrow_left + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span class="_cheatsheetKeyCommand"></span>\n              </div>\n              +\n              <div class="cheatsheetKeySample">\n                <span class="icoFont icoFontTriangleRight"></span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_command_arrow_right + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>g</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_g + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>Esc</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_esc + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>m</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_m + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>Tab</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_tab + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>t</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_t + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>c</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_c + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>f</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_f + '\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td class="cheatsheetKeyMap">\n              <div class="cheatsheetKeySample">\n                <span>?</span>\n              </div>\n            </td>\n            <td class="cheatsheetShortcutBody">\n              <p class="cheatsheetShortcutBodyText">\n                ' + L.cheatsheet_text_key_question + '\n              </p>\n            </td>\n          </tr>\n        </table>\n      </div><!-- /KEYBOARD SHORTCUT LIST -->\n      <div class="cheatsheetNotation">\n        <h1 class="cheatsheetIndex">' + L.cheatsheet_notation_title + '</h1>\n        <dl class="cheatsheetNotationItem">\n          <dt class="cheatsheetNotationName">\n            ' + L.cheatsheet_name_notation_hr + ' : \n            <span class="cheatsheetNotationSnipet">[hr]</span>\n          </dt>\n          <dd class="cheatsheetNotationBody">\n            <div class="cheatsheetNotationSample"><hr size="1"></div>\n          </dd>\n        </dl>\n        <dl class="cheatsheetNotationItem">\n          <dt class="cheatsheetNotationName">\n            ' + L.cheatsheet_name_notation_info + ' : \n            <span class="cheatsheetNotationSnipet">[info]</span>' + L.cheatsheet_text_notation_content + '<span class="cheatsheetNotationSnipet">[/info]</span>\n          </dt>\n          <dd class="cheatsheetNotationBody">\n            <div class="cheatsheetNotationSample">\n              <div class="cheatsheetChatInfo">\n                <p>' + L.cheatsheet_text_notation_content + '</p>\n              </div>\n            </div>\n          </dd>\n        </dl>\n        <dl class="cheatsheetNotationItem">\n          <dt class="cheatsheetNotationName">\n            ' + L.cheatsheet_name_notation_mix_tag + ' : \n            <span class="cheatsheetNotationSnipet">[info][title]</span>' + L.cheatsheet_text_notation_index + '<span class="cheatsheetNotationSnipet">[/title]</span>' + L.cheatsheet_text_notation_content + '<span class="cheatsheetNotationSnipet">[/info]</span>\n          </dt>\n          <dd class="cheatsheetNotationBody">\n            <div class="cheatsheetNotationSample">\n              <div class="cheatsheetChatInfo">\n                <div class="title">\n                  <span class="icoFontInfo marginRight"></span>' + L.cheatsheet_text_notation_index + "\n                </div>\n                <p>" + L.cheatsheet_text_notation_content + '</p>\n              </div>\n            </div>\n          </dd>\n        </dl>\n        <dl class="cheatsheetNotationItem">\n          <dt class="cheatsheetNotationName">\n            ' + L.cheatsheet_name_notation_code + ' : \n            <span class="cheatsheetNotationSnipet">[code]</span>:)<span class="cheatsheetNotationSnipet">[/code]</span>\n          </dt>\n          <dd class="cheatsheetNotationBody">\n            <div class="cheatsheetNotationSample">\n              <p class="cheatsheetChatCode">:)</p>\n            </div>\n            <div class="cheatsheetNotationNote">\n              <p>' + L.cheatsheet_text_notation_on_message_area + '</p>\n              <div class="cheatsheetNotationNoteSnipet">\n                <p>\n                  &#96;&#96;&#96;<br>\n                  &#9679;&#9679;<br>\n                  &#96;&#96;&#96; ' + L.cheatsheet_text_notation_new_line + "\n                </p>\n              </div>\n              <p>" + L.cheatsheet_text_notation_replace_code_tag + "</p>\n            </div>\n          </dd>\n        </dl>\n      </div><!-- /NOTATION LIST -->\n    </div>\n  </div>\n</div>\n<!-- /CHEAT SHEET -->\n"
        }, {}
    ],
    119: [
        function(require, module, exports) {
            "use strict";
            var welcome_content_key = "userguide_welcome_service_desc_" + OEM,
                profileLinkTemplate = ENABLE_SAML ? "" : '\n<div class="controlGroup">\n <label class="controlLabel">' + L.profile_form_title + ':</label>\n <div class="controlContent">\n  <a href="./service/packages/chatwork/profile.php?lang=' + LANGUAGE + '" target="_blank">' + L.profile_setting_ecstudio_account + "</a>\n </div><!-- controlContent -->\n</div><!-- controlGroup -->\n",
                apiSettingTemplate = ALLOW_API ? '\n  <!-- #_settingApi -->\n  <div id="_settingApi" class="_cwSettingContents">\n   <div class="controlGroup">\n    <label class="controlLabel">' + L._chatwork_apitoken_token_label + '</label>\n    <div class="controlContent settingApiContent">\n     <p>' + L._chatwork_apitoken_password_caption + '</p>\n     <input id="_inputApiTokenPass" type="password" class="inputMedium" placeholder="' + L._chatwork_apitoken_password_placeholder + '" />\n     <div class="_button btnPrimary _displayApiToken">' + L._chatwork_apitoken_display_btn + '</div>\n     <p><a href="./service/passremind.php">' + L.login_password_forget_link + '</a></p>\n     <div class="apiAttention">\n      <ul>\n       <li>' + L._chatwork_apitoken_caution_1 + "</li>\n       <li>" + L._chatwork_apitoken_caution_2 + "</li>\n       <li>" + L._chatwork_apitoken_caution_3 + "</li>\n       " + ("chatwork" === OEM ? "<li>" + L._chatwork_apitoken_caution_4 + "</li>" : "") + '\n      </ul>\n     </div>\n    </div><!-- /.controlContent -->\n   </div><!-- /.controlGroup -->\n  </div>\n  <!-- /#_settingApi -->\n  <!-- #_settingApiAfter -->\n  <div id="_settingApiAfter" class="_cwSettingContents" style="display:none;">\n   <div class="controlGroup">\n    <label class="controlLabel">' + L._chatwork_apitoken_token_label + '</label>\n    <div class="controlContent settingApiContent">\n     <input id="_inputApiToken" type="text" class="inputLong" placeholder="' + L._chatwork_apitoken_token_placeholder + '" readonly />\n     <div id="_copyTokenBtn" class="_button">' + L._chatwork_apitoken_copy_btn + '</div>\n     <div id="_regenerateTokenBtn" class="_button">' + L._chatwork_apitoken_regenerate_btn + '</div>\n     <div class="apiAttention">\n      <ul>\n       <li>' + L._chatwork_apitoken_caution_1 + "</li>\n      </ul>\n     </div>\n    </div><!-- /.controlContent -->\n   </div><!-- /.controlGroup -->\n  </div>\n  <!-- /#_settingApiAfter -->\n" : "",
                phase1OnBoardingTemplate = '\n  <div class="content bobPhase1">\n   <p class="userguideWelcomeTitle">' + L.userguide_welcome_head.replace(/%%service_name%%/g, SERVICE_NAME) + '</p>\n   <p class="userguideWelcomeContent">' + L[welcome_content_key].replace(/%%service_name%%/g, SERVICE_NAME) + '</p>\n\n   <div class="userguideWelcomeImage">\n    <img src="./imagenew/lang/' + LANGUAGE + "/welcome/img_welcome_" + OEM + '.png" alt="" />\n   </div>\n   <div class="userguideWelcomeContentArea">\n    <div role="button" class="button btnPrimary btnLarge" id="_userguideWelcomeOpen">' + L.start_chatwork + '</div>\n    <a class="userguideWelcomeSkipTutorial" id="_userguideSkipTutorial">すぐに使いはじめる</a>\n   </div>\n  </div>\n',
                normarOnBoardingTemplate = '\n  <div class="content">\n   <div class="userguideWelcomeImage">\n    <img src="{add_filemtime file=imagenew/common/welcome/img_welcome_logo_' + OEM + '.png}" alt="ChatWork" />\n    <img src="{add_filemtime file=imagenew/lang/' + LANGUAGE + "/welcome/img_welcome_" + OEM + '.png}" alt="" />\n   </div>\n   <div class="userguideWelcomeContentArea">\n    <p class="userguideWelcomeTitle">' + L.userguide_welcome_head.replace(/%%service_name%%/g, SERVICE_NAME) + '</p>\n    <p class="userguideWelcomeContent">' + L[welcome_content_key].replace(/%%service_name%%/g, SERVICE_NAME) + '</p>\n    <div role="button" class="button btnPrimary btnLarge" id="_userguideWelcomeOpen">' + L.start_chatwork.replace(/%%service_name%%/g, SERVICE_NAME) + "</div>\n   </div>\n  </div>\n";
            '\n<!-- userguide_weblome_dialog -->\n<div id="_userguideWelcomeDialog" class="dialog userguideWelcomeDialog">\n  ' + (IS_BIWA_ONBOARDING_PHASE_1 ? phase1OnBoardingTemplate : normarOnBoardingTemplate) + "\n</div>\n<!-- /userguide_weblome_dialog -->\n";
            exports.dialogTemplate = '\n\n<div id="_groupCallDialog" class="dialog groupCallDialog">\n <div class="chatroomTitle">\n  <img class="avatarGroup avatarMedium" src="' + S3_PATH + '/avatar/ico_avatar_loading.png">\n  <div class="chatroomTitleMeta autotrim"></div>\n </div>\n <!-- /CHATROOM TITLE -->\n <input id="_videoChatContactFilter" class="_searchBox roomInfoMemberSearchBox inputLong" type="text" placeholder="' + L.chatroom_search_member + '" />\n <div class="tooltipCheckHandle">\n  <a id="_groupCallCheckAll" class="linkStatus">' + L.checkall + '</a> / <a id="_groupCallUnCheckAll" class="linkStatus">' + L.uncheckall + '</a>\n </div>\n <div id="_groupCallMemberList" class="groupCallMemberListBox">\n  <p>' + L.live_member_add_introduction + '</p>\n  <div id="_groupCallMember" class="groupCallMemberList"></div>\n </div>\n</div>\n\n<div id="_plainDialog" class="dialog dialogPadding">\n <div id="_plainDialogBody"></div>\n</div>\n\n<div id="_progressDialog" class="dialog dialogPadding">\n <div id="_progressDialogBody" class="progressDialogBody"></div>\n</div>\n\n<div id="_addRoom" class="dialog dialogRoomSetting">\n <div id="_addRoomContent">\n  <form id="_roomInfoForm" class="horizontalForms" method="POST" enctype="multipart/form-data" action="gateway.php?cmd=add_room&_f=1&myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '&amp;add_room_version=2" target="form_update_room">\n   <!-- chatroom_description_area -->\n   <div id="_addRoomChatInfoArea" class="_formContent addGroupChatContentArea"></div><!-- .addGroupChatContentArea -->\n   <!-- chatroom_member_area -->\n   <div id="_addRoomMemberArea" class="_formContent addGroupChatContentArea"></div><!-- .addGroupChatContentArea -->\n  </form>\n </div>\n</div>\n\n<!-- _roomDescEditDialog -->\n<div id="_roomDescEditDialog" class="dialog roomDescEditDialog">\n <div class="controlGroup">\n  <label class="controlLabel">' + L.chatroom_desc + ':</label>\n  <div class="controlContent">\n   <textarea id="_roomDescEditContent" class="inputLong textAreaHeight"></textarea>\n  </div>\n </div>\n</div>\n<!-- /_roomDescEditDialog -->\n\n<!-- .roomInfoEditDialog -->\n<div id="_roomInfoEditDialog" class="dialog dialogPadding">\n <form id="_roomInfoEditForm" class="horizontalForms" method="POST" enctype="multipart/form-data" action="gateway.php?cmd=update_room&_f=1&myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '" target="form_update_room">\n  <div id="_roomInfoEditContent" class="roomInfoEditContent"></div>\n  <input type="hidden" name="__cwform_room_id" id="_roomInfoEditRoomId"/>\n </form>\n</div>\n<!-- /.roomInfoEditDialog -->\n\n<!-- .roomMemberEditDialog -->\n<div id="_roomMemberEditDialog" class="dialog dialogRoomSetting"></div>\n<!-- /.roomMemberEditDialog -->\n\n<!-- .MemberAdditionDialog -->\n<div id="_roomMemberAdditionDialog" class="dialog dialogRoomSetting"></div>\n<!-- /.MemberAdditionDialog -->\n\n<!-- task_edit_dialog -->\n<div id="_taskEditDialog" class="dialog taskEditDialog">\n <div class="controlGroup">\n  <label class="controlLabel">' + L.task_tasktip + '</label>\n  <div class="controlContent">\n   <textarea id="_taskEditContent" class="inputLong textAreaHeight"></textarea>\n  </div>\n </div>\n <div class="controlGroup">\n  <label class="controlLabel">' + L.task_inchargetip + '</label>\n  <div id="_taskEditIncharge" class="controlContent"></div>\n </div>\n <div class="controlGroup">\n  <label class="controlLabel">' + L.task_limittip + '</label>\n  <div class="controlContent">\n   <div id="_taskEditLimitLabel" class="limitBox"></div>\n   <div role="button" aria-label="' + L.datepicker_alt_text + '" class="button btn24" id="_taskEditLimit"><span class="icoFontCalender icoSizeLarge"></span></div>\n  </div>\n </div>\n</div>\n<!-- /task_edit_dialog -->\n\n<!-- file_edit_dialog -->\n<div id="_editFileDialog" class="dialog fileEditDialog">\n <div class="controlGroup" style="margin-top:10px">\n  <label class="controlLabel">' + L.file_name + '</label>\n  <div class="controlContent">\n   <input type="text" id="_editFileFile" class="inputLong" />\n  </div>\n </div>\n</div>\n<!-- /file_edit_dialog -->\n\n<div id="_filePreviewDialog" class="dialog"></div>\n\n\n<div id="_textCopyDialog" class="dialog dialogPadding">\n <textarea id="_textCopyDialogText" style="width:400px;height:150px;line-height:1.2;resize:none"></textarea>\n <div id="_textCopyButton" class="dialogContentFooter" style="display: none;">\n  <div id="_copyToClipBoard" role="button" class="_button">' + L.copy_to_clipboard + '</div><span id="_copyMessage" class="textCopyMessage"></span>\n </div>\n</div>\n\n<!-- start invitation_link_setting_dialog -->\n<div id="_invitationLinkSettingDialog" class="dialog invitationLinkSettingDialog">\n  <form id="_invitationLinkSettingForm" method="POST" enctype="multipart/form-data" action="gateway.php?cmd=update_invitation_link_setting&_f=1&myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '" target="form_update_invitation_link_setting">\n    <fieldset>\n      <div class="invitationLinkSetting">\n        <div class="invitationLinkActivate">\n          <div class="invitationLinkActivateLabel">\n            <div class="invitationLinkActivateLabelCheckBox">\n              <input type="checkbox" id="_invitationLinkSettingStatus" data-name="active_invitation_link" class="_checkBox" data-label="' + L.invitation_link + '" value="">\n            </div>\n            <p class="invitationLinkActivateLabelItem">\n              <a href="http://link.chat-work.com/h_invitation_link_' + ("ja" === LANGUAGE ? "ja" : "en") + '" class="_showDescription" aria-label="' + L.invitation_link_help_tool_tip + '" data-delay="0" target="_blank"><span class="icoFontHelp anchorIcon"></span></a>\n              <span> : </span>\n            </p>\n          </div>\n          <div class="invitationLinkActivateBody">\n            <div id="_invitationLinkDisabled" class="invitationLinkDisabled">\n              <p class="invitationLinkDisabledBody">' + L.invitation_link_setting_status_disable + '</p>\n            </div><!-- INVITATION LINK DISABLED -->\n            <div id="_invitationLinkActive" class="invitationLinkActive">\n              <div class="js_invitationLinkDisplay invitationLinkDisplay">\n                <div class="invitationLinkDisplayBody">\n                  <div class="invitationLinkDisplayBodyItem">\n                    <input type="text" class="js_invitationLinkDisplayInput invitationLinkDisplayInput" readonly>\n                  </div>\n                  <div class="js_invitationLinkBtnCopy _button">' + L.invitation_link_code_copy + '</div>\n                  <p class="js_invitationLinkOpenEditor invitationLinkDisplayBodyItem invitationLinkEditorDrawer">\n                    <span class="icoFontSetting icoSizeLarge"></span>\n                  </p>\n                </div>\n              </div>\n              <div class="js_invitationLinkEditor">\n                <div class="invitationLinkEditorForm">\n                  <p class="invitationLinkEditorBodyItem">\n                    <span class="js_invitationLinkURL"></span>\n                  </p>\n                  <input type="text" class="js_invitationLinkEditorInput" name="__cwform_link_code">\n                  <div class="js_invitationLinkBtnEdited _button btnPrimary">' + L.button_complete + '</div>\n                  <p class="js_invitationLinkCloseEditor invitationLinkEditorBodyItem invitationLinkEditorDrawer">\n                    <span class="icoFontCancel icoSizeLarge"></span>\n                  </p>\n                  <div class="invitationLinkEditorBodyItem">\n                    <img class="js_invitationLinkCodeLoading controlContentLoaderImg" src="./imagenew/all/common/loader/img_loader_gray.gif">\n                  </div>\n                  <div class="invitationLinkEditorAlert">\n                    <p class="invitationLinkEditorAlertItem"><span class="js_invitationLinkCodeUsed"></span></p>\n                  </div>\n                </div>\n                <div class="invitationLinkEditorBody">\n                  <input type="checkbox" id="_invitationLinkJoinNeedAccept" name="__cwform_join_need_accept" data-label="' + L.invitation_link_setting_join_accept + '" value="send">\n                </div>\n              </div><!-- INVITATION LINK EDITOR -->\n            </div><!-- INVITATION LINK ACTIVE -->\n          </div><!-- INVITATION LINK ACTIVATE BODY -->\n        </div><!-- INVITATION LINK ACTIVATE -->\n      </div><!-- /INVITATION LINK SETTING -->\n      <div id="_invitationLinkAdvancedSetting" class="invitationLinkAdvancedSetting">\n        <div class="settingDialogHeader">\n          <div class="settingDialogHeaderTitle">\n            <p class="settingDialogHeaderTitleText">' + L.invitation_link_advanced_setting_index + '</p>\n          </div>\n          <div class="settingDialogHeaderLead">\n            <p class="settingDialogHeaderLeadText">' + L.invitation_link_advanced_setting_lead + '</p>\n          </div>\n        </div>\n        <div class="settingDialogBody">\n          <div class="controlContent">\n            <div class="controlContentLabel">\n              <p class="controlContentLabelTitle">' + L.invitation_link_set_header_image_index + ' :</p>\n            </div>\n            <div class="controlContentBody">\n              <div class="controlContentBodyContent">\n                <input type="file" id="_invitationLinkSettingHeader" class="_cwValidateFileImage controlContentBodyContentItem" name="__cwform_header">\n                <div id="_invitationLinkSettingHeaderDeleteBox" class="controlContentBodyContentItem">\n                  <p>\n                    <span id="_invitationLinkSettingHeaderCurrent"></span><input type="checkbox" id="_invitationLinkSettingHeaderDelete" name="__cwform_header_delete" data-label="' + L.invitation_link_setting_delete_current_header + '" value="">\n                  </p>\n                </div>\n                <p class="controlContentBodyContentItem">' + L.invitation_link_setting_header_limit + '</p>\n              </div>\n            </div>\n          </div>\n        </div><!-- /HEADER IMAGE SETTING -->\n        <div class="settingDialogBody settingDialogBodyDescription">\n          <div class="controlContent">\n            <div class="controlContentLabel">\n              <p class="controlContentLabelTitle">' + L.invitation_link_set_groupchat_description_index + ' :</p>\n            </div>\n            <div class="controlContentBody">\n              <div class="controlContentBodyContent">\n                <div class="controlContentBodyContentItem">\n                  <textarea id="_publicDescription" class="controlContentTextarea" name="__cwform_public_description"></textarea>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div><!-- /GROUP CHAT DESCRIPTION EDITOR -->\n      </div><!-- /INVITATION LINK ADVANCED SETTING -->\n    </fieldset>\n    <input type="hidden" name="__cwform_rid" id="_invitationLinkSettingId"/>\n    <input type="hidden" name="__cwform_public" id="_public"/>\n  </form>\n</div>\n<!-- /invitation_link_setting_dialog -->\n\n<!-- start room_permission_setting_dialog -->\n<div id="_roomPermissionsettingDialog" class="dialog dialogRoomSetting">\n  <form id="_roomPermissionsettingForm" method="POST" enctype="multipart/form-data" action="gateway.php?cmd=update_room_priv_setting&_f=1&myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '" target="form_update_room_permission_setting">\n    <fieldset>\n      <div class="settingDialogHeader">\n        <div class="settingDialogHeaderTitle">\n            <p class="settingDialogHeaderTitleText">' + L.room_permission_setting_index + '</p>\n          </div>\n          <div class="settingDialogHeaderLead">\n            <p class="settingDialogHeaderLeadText">' + L.room_permission_setting_lead + '</p>\n          </div>\n      </div>\n      <div class="settingDialogBody">\n        <div class="controlContentBody">\n          <input type="checkbox" id="_allowSeeMember" name="__cwform_allow_see_member" data-label="' + L.room_permission_setting_allow_see_member + '" value="1">\n        </div>\n        <div class="controlContentBody">\n          <input type="checkbox" id="_allowUploadFile" name="__cwform_allow_upload_file" data-label="' + L.room_permission_setting_allow_upload_file + '" value="1">\n        </div>\n        <div class="controlContentBody">\n          <input type="checkbox" id="_allowAddTask" name="__cwform_allow_add_task" data-label="' + L.room_permission_setting_allow_add_task + '" value="1">\n        </div>\n        <div class="controlContentBody">\n          <input type="checkbox" id="_allowSendMessage" name="__cwform_allow_send_message" data-label="' + L.room_permission_setting_allow_send_message + '" value="1">\n        </div>\n      </div><!-- .controlContent -->\n    </fieldset>\n    <input type="hidden" name="__cwform_rid" id="_roomPermissionsettingId">\n  </form>\n</div>\n<!-- /room_permission_setting_dialog -->\n\n<div id="_memberDetailDialog" class="dialog dialogPadding">\n <div id="_memberDetailContent"></div>\n</div>\n\n\n<!-- start chat_category_add -->\n<div id="_chatCategoryAddContent" class="dialog floatWindowContent">\n <div class="_cwFWContent">\n  <div class="controlGroup">\n   <label class="controlLabel">' + L.chat_category_nametip + '</label>\n    <div class="controlContent">\n     <input type="text" class="inputLong" id="_categoryName"/>\n    </div><!-- controlContent -->\n  </div>\n  <div class="controlGroup">\n   <label class="controlLabel">' + L.chat_category_chatselecttip + '</label>\n    <div class="controlContent">\n     <input type="text" id="_newcatRoomfilter" class="inputLong marginBottom" placeholder="' + L.chat_search + '" />\n     <div class="chatCategoryListBox marginTop">\n      <p>\n       <input type="checkbox" id="_newcatCheckAll">\n       <span>' + L.chat_category_selected_chat_num + '<span id="_newcatSelectNum">0</span></span>\n      </p>\n      <div class="chatCategoryAddChatList">\n       <table id="_newcatRoomlist" class="chatCategoryList"></table>\n      </div>\n     </div>\n    </div><!-- controlContent -->\n  </div><!-- controlGroup -->\n </div>\n</div><!-- #_messageSearchContent -->\n<!-- end chat_category_add -->\n\n<!-- joinpublicchat_dialog -->\n<div id="_joinpublicchatDialog" class="joinPublic dialog dialogPadding">\n <p class="joinpublicMessage">' + L.join_groupchat_invite_message + '</p>\n <div class="scrollableTable">\n  <div class="_overflow">\n   <table class="joinpublicInfo">\n    <tbody>\n     <tr>\n      <td id="_joinpublicchatIcon" class="joinpublicchatIcon"></td>\n      <td id="_joinpublicchatName" class="joinpublicchatName"></td>\n     </tr>\n    </tbody>\n   </table>\n   <pre id="_joinpublicchatDescription" class="joinpublicDescription"></pre>\n  </div>\n </div><!-- .scrollableTable -->\n <p id="_joinpublicchatNeedAccept" class="alert alertWarning">' + L.joinpublicchat_need_accept + '</p>\n</div><!-- .controlGroup -->\n<!-- /joinpublicchat_dialog -->\n\n<!-- request dialog -->\n<div id="_roomRequestDialog" class="dialog dialogPadding">\n <div class="scrollableTable roomRequest">\n  <p class="alert alertPrimary">' + L.room_request_description + '</p>\n  <div class="_overflow">\n   <table>\n    <tbody id="_roomRequestList"></tbody>\n   </table>\n  </div>\n </div>\n</div><!--.controlGroup -->\n<!-- /request dialog -->\n\n<!-- preview link -->\n<div id="_previewLinkDialog" class="dialog previewDialog">\n <div id="_previewLinkContent" class="previewContent"></div>\n</div>\n<!-- /preview link -->\n\n<!-- nickname dialog -->\n<div id="_nicknameDialog" class="nickNameSetting dialog dialogPadding">\n <p>' + L.nickname_desc + '</p>\n <div class="nickName">\n  <div class="scrollableTable">\n   <div id="_nicknameTable" class="_overflow">\n    <table>\n     <thead>\n      <tr>\n       <th></th>\n       <th>' + L.nickname_name + "</th>\n       <th>" + L.nickname_nickname + '</th>\n      </tr>\n     </thead>\n     <tbody id="_nicknameList"></tbody>\n    </table>\n   </div>\n  </div><!-- .scrollableTable -->\n </div><!-- .nickName -->\n</div><!-- .controlGroup -->\n<!-- /nickname -->\n\n<!-- _limitErrorDialog -->\n <div id="_limitErrorDialog" class="dialogPadding" style="display:none;">\n  <p id="_upgradeMessage"></p>\n  <div class="ui_storage_limit_button dialogSelect">\n   <p id="_openServiceAdminUpgrade" role="button" class="button btnPrimary btnLarge">' + L.serviceadmin_do_upgrade + '</p>\n  </div>\n </div>\n<!-- /_limitErrorDialog -->\n\n<!-- start profile -->\n<div id="_profileContent" class="dialog profileContentArea">\n <div class="profileHeader">\n  <div class="_profileCover profileBackgroundArea"></div>\n  <div class="_profileAvatar profileContentAvatar"></div>\n </div><!-- .profileHeader -->\n <div class="profileContent">\n  <ul class="_profileNameBox profileMeta clearfix">\n   <li class="_profileName"></li>\n   <li class="_profileOrgName"></li>\n   <li class="_profileChatWorkIdLink"></li>\n   <li class="_profileNameDescription profileDescription"></li>\n  </ul>\n  <div class="_profileButton profileButton"></div>\n  <ul class="_profileSNS profileSnsList"></ul>\n </div><!-- .profileContent -->\n <div class="profileContent">\n  <ul class="profileContentList">\n   <li><dl><dt>' + L.profile_setting_orgnametip + '</dt><dd class="_profileOrgName"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_departmenttip + '</dt><dd class="_profileDepartment"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_titletip + '</dt><dd class="_profileTitle"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_addresstip + '</dt><dd class="_profileAddress"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_urltip + '</dt><dd class="_profileUrl"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_emailtip + '</dt><dd class="_profileEmail"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_tel_organizationtip + '</dt><dd class="_profileOrgTel"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_tel_extensiontip + '</dt><dd class="_profileExtensionTel"></dd></dl></li>\n   <li><dl><dt>' + L.profile_setting_tel_mobiletip + '</dt><dd class="_profileMobileTel"></dd></dl></li>\n  </ul><!--.profileContentList -->\n </div><!-- .profileContent -->\n</div><!-- #_profileContent -->\n<!-- end profile -->\n\n<!-- start profile_edit -->\n<div id="_profileEditContent" class="profileContentArea profileContentEdit" style="display: none;">\n <div class="profileHeader">\n  <div class="profileBackgroundArea">\n   <span id="_profileEditCover"></span>\n   <div id="_profileEditCoverControl" class="_profilePhotoEditBar profilePhotoEdit profilePhotoEditBack" style="display: none">' + L.profile_setting_edit_cover + '</div>\n  </div><!-- .profileBackgroundArea -->\n  <div class="profileContentAvatar">\n   <span id="_profileEditAvatar"></span>\n   <div id="_profileEditAvatarControl" class="_profilePhotoEditBar profilePhotoEdit profilePhotoEditAvatar" style="display: none">' + L.profile_setting_edit_avatar + '</div>\n  </div><!-- .profileContentAvatar -->\n </div><!-- profileHeader -->\n <div class="profileContent">\n  <div class="profileMeta clearfix">\n   <ul>\n    <li class="controlGroup">\n     <label class="controlLabel">' + L.profile_displaynametip + '</label>\n     <div class="controlContent">\n      <input id="_profileInputName" data-name="name" class="inputLong" type="text" />\n      <input type="checkbox" id="_profileAllowSearch" data-name="allow_search" class="_checkBox" data-label="' + L.profile_allow_search + '" value="1" />\n     </div>\n    </li>\n    <li class="controlGroup">\n     <label class="controlLabel">' + L.profile_chatworkidtip + '</label>\n     <div class="controlContent">\n      <input id="_profileInputChatWorkId" data-name="cwid" class="inputLong" type="text" />\n      <span id="_profileCWIDLoading" style="display:none"><img src="./imagenew/all/common/loader/img_loader_gray.gif" alt="Loading" /></span><span id="_profileCWIDStatus"></span>\n     </div>\n    </li>\n    <li class="controlGroup profileDescription">\n     <label class="controlLabel">' + L.profile_setting_introductiontip + '</label>\n     <div class="controlContent">\n      <textarea id="_profileInputIntroduction" data-name="introduction" class="profileEdittextAreaWidth textAreaHeight explain"></textarea>\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Introduction">\n       <span id="_profilePrivacyIntroduction" class="icoFontPublic" data-name="introduction_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </div>\n    </li>\n   </ul>\n  </div><!-- .profileMeta -->\n  <ul id="_profileSnsListEdit" class="profileSnsListEdit">\n   <li class="controlGroup">\n    <label class="controlLabel">facebook：</label>\n    <span class="profileSnsEditUrl">https://www.facebook.com/</span>\n    <div class="profileSnsListInput">\n     <input id="_profileInputFacebook" data-name="facebook" class="inputShort" type="text" placeholder="' + L.username + '"/>\n     <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Facebook">\n      <span id="_profilePrivacyFacebook" class="icoFontPublic" data-name="facebook_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n     </div>\n    </div>\n    <p class="note">' + L.profile_setting_set_facebook_note + '</p>\n   </li>\n   <li class="controlGroup">\n    <label class="controlLabel">twitter：</label>\n    <span class="profileSnsEditUrl">http://twitter.com/</span>\n    <div class="profileSnsListInput">\n     <input id="_profileInputTwitter" data-name="twitter" class="inputShort" type="text" placeholder="twitter ID" />\n     <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Twitter">\n      <span id="_profilePrivacyTwitter" class="icoFontPublic" data-name="twitter_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n     </div>\n    </div>\n   </li>\n   <li class="controlGroup">\n    <label class="controlLabel">Skype:</label>\n    <div class="profileSnsListInput">\n     <input id="_profileInputSkype" data-name="skype" class="inputShort" type="text" placeholder="Skype ID"/>\n     <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Skype">\n      <span id="_profilePrivacySkype" class="icoFontPublic" data-name="skype_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n     </div>\n    </div>\n   </li>\n  </ul><!-- .profileSnsListEdit -->\n </div><!-- .profileContent -->\n <div class="profileContent">\n  <ul class="profileContentList">\n   <li>\n    <dl id="_profileEditOrgName">\n     <dt>' + L.profile_setting_orgnametip + '</dt>\n     <dd>\n      <ul id="_profileEditOrgNameBox" class="profileEditOrgNameBox">\n       <li class="_profileSelectOrgNameType" style="display: none">\n        <input type="radio" id="_profileSelectOrgnameTypeCommon" name="orgname_type" data-name="orgname_type" value="common">\n        <label id="_profileSelectOrgnameTypeCommonLabel" for="_profileSelectOrgnameTypeCommon"></label>\n       </li>\n       <li>\n        <input type="radio" id="_profileSelectOrgnameTypeIndividual" name="orgname_type" data-name="orgname_type" value="individual" class="_profileSelectOrgNameType" style="display: none">\n        <input id="_profileInputOrgName" data-name="orgname" class="profileInputWidth" type="text" />\n       </li>\n       <li id="_profileCommonOrgNameLink" style="display: none">\n        <a href="' + PATH_CHATWORK_SERVICE + '/packages/chatwork/change_orgname.php" target="_blank">' + L.profile_setting_note_change_orgname + '</a>\n       </li>\n      </ul><!-- .profileEditOrgNameBox -->\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="OrgName">\n       <span id="_profilePrivacyOrgName" class="icoFontPublic" data-name="orgname_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n      <div id="_profileEditOrgNameLoading" class="profileEditOrgNameLoading" style="display:none"><img src="./imagenew/all/common/loader/img_loader_gray.gif" alt="Loading" /></div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_departmenttip + '</dt>\n     <dd>\n      <input id="_profileInputDepartment" data-name="department" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Department">\n       <span id="_profilePrivacyDepartment" class="icoFontPublic" data-name="department_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_titletip + '</dt>\n     <dd>\n      <input id="_profileInputTitle" data-name="title" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Title">\n       <span id="_profilePrivacyTitle" class="icoFontPublic" data-name="title_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_addresstip + '</dt>\n     <dd>\n      <input id="_profileInputAddress" data-name="address" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Address">\n       <span id="_profilePrivacyAddress" class="icoFontPublic" data-name="address_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_urltip + '</dt>\n     <dd>\n      <input id="_profileInputUrl" data-name="url" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Url">\n       <span id="_profilePrivacyUrl" class="icoFontPublic" data-name="url_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_emailtip + '</dt>\n     <dd>\n      <input id="_profileInputEmail" data-name="email" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Email">\n       <span id="_profilePrivacyEmail" class="icoFontPublic _privacyIcon" data-name="email_priv" data-value="contact"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_tel_organizationtip + '</dt>\n     <dd>\n      <input id="_profileInputOrgTel" data-name="tel_organization" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="OrgTel">\n       <span id="_profilePrivacyOrgTel" class="icoFontPublic _privacyIcon" data-name="tel_organization_priv" data-value="contact"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_tel_extensiontip + '</dt>\n     <dd>\n      <input id="_profileInputExtensionTel" data-name="tel_extension" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="ExtensionTel">\n       <span id="_profilePrivacyExtensionTel" class="icoFontPublic _privacyIcon" data-name="tel_extension_priv" data-value="contact"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n   <li>\n    <dl>\n     <dt>' + L.profile_setting_tel_mobiletip + '</dt>\n     <dd>\n      <input id="_profileInputtMobileTel" data-name="tel_mobile" class="profileInputWidth" type="text" />\n      <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="MobileTel">\n       <span id="_profilePrivacyMobileTel" class="icoFontPublic _privacyIcon" data-name="tel_mobile_priv" data-value="contact"></span><span class="icoFontTriangleDown"></span>\n      </div>\n     </dd>\n    </dl>\n   </li>\n  </ul><!--.profileContentList -->\n </div><!-- .profileContent -->\n</div><!-- #_profileEditContent -->\n<!-- end profile_edit -->\n\n<!-- userguide_dialog_profile -->\n<div id="_userguideDialog" class="dialog">\n <div id="_userguideBody">\n  <!-- User Guide Order List Menu -->\n  <ol class="userguideOrderListArea">\n   <li>\n    <p class="userguideOrderListTitle"><span class="userguideOrderListNum">Step1</span>' + L.userguide_profile + '</p>\n    <div class="userguideOrderListContent">\n     <p class="_navlist _select userguideOrderListSelected">' + L.userguide_profile_about + '</p>\n     <ol class="_guideList userguideOrderListStep">\n      <li class="_navlist"><span class="userguideOrderListStepNum">1</span>' + L.userguide_profile_open_setting + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">2</span>' + L.userguide_profile_upload_image + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">3</span>' + L.userguide_profile_chatworkid + '</li>\n     </ol>\n    </div>\n   </li>\n   <li>\n    <p class="userguideOrderListTitle"><span class="userguideOrderListNum">Step2</span>' + L.userguide_message + '</p>\n    <div class="userguideOrderListContent">\n     <p class="_navlist">' + L.userguide_message_about + '</p>\n     <ol class="_guideList ui_userguide_step">\n      <li class="_navlist"><span class="userguideOrderListStepNum">1</span>' + L.userguide_message_quote + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">2</span>' + L.userguide_message_edit + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">3</span>' + L.userguide_message_mention + '</li>\n     </ol>\n    </div>\n   </li>\n   <li>\n    <p class="userguideOrderListTitle"><span class="userguideOrderListNum">Step3</span>' + L.userguide_task + '</p>\n    <div class="userguideOrderListContent">\n     <p class="_navlist">' + L.userguide_task_about + '</p>\n     <ol class="_guideList ui_userguide_step">\n      <li class="_navlist"><span class="userguideOrderListStepNum">1</span>' + L.userguide_task_add + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">2</span>' + L.userguide_task_browse + '</li>\n      <li class="_navlist"><span class="userguideOrderListStepNum">3</span>' + L.userguide_task_complete + '</li>\n     </ol>\n    </div>\n   </li>\n  </ol><!-- .userguideOrderListArea -->\n  <!-- /User Guide Order List Menu -->\n  <!-- User Guide Contents -->\n  <div class="userguideContentArea">\n   <!-- Step01_00 About Profile -->\n   <div class="_howTo _content0">\n    <h2>' + L.userguide_profile_about + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_profile_about_content_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_profile_about.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step01_00 About Profile -->\n   <!-- Step01_01 Open Profile -->\n   <div class="_howTo _content1" style="display: none">\n    <h2><span class="userguideOrderListStepNum">1</span>' + L.userguide_profile_open_setting + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_profile_open_setting_content + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto01.png" alt="" />\n     </div>\n     ' + L.userguide_profile_open_setting_content_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto02.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step01_01 Open Profile -->\n   <!-- Step01_02 Image Upload -->\n   <div class="_howTo _content2" style="display: none">\n    <h2><span class="userguideOrderListStepNum">2</span>' + L.userguide_profile_upload_image + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_profile_upload_image_content_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto03.png" alt="" />\n     </div>\n     ' + L.userguide_profile_upload_image_content_biwa2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto04.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step01_02 Image Upload -->\n   <!-- Step01_03 Setting ChatWork ID -->\n   <div class="_howTo _content3" style="display: none">\n    <h2><span class="userguideOrderListStepNum">3</span>' + L.userguide_profile_chatworkid + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_profile_chatworkid_content1.replace(/%%chatwork_home_path%%/g, CHATWORK_HOME) + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto05.png" alt="" />\n     </div>\n     ' + L.userguide_profile_chatworkid_content2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step01/img_ug_howto06.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step01_03 Setting ChatWork ID -->\n   <!-- Step02_00 About My Chat -->\n   <div class="_howTo _content4" style="display: none">\n    <h2>' + L.userguide_message_about + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_message_about_content1 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_about_mychat01.png" alt="" />\n     </div>\n     ' + L.userguide_message_about_content2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_about_mychat02.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step02_00 About My Chat -->\n   <!-- Step02_01 Quote Messege -->\n   <div class="_howTo _content5" style="display: none">\n    <h2><span class="userguideOrderListStepNum">1</span>' + L.userguide_message_quote + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_message_quote_content1_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto01.png" alt="" />\n     </div>\n     <h3>' + L.userguide_message_quote + "</h3>\n     " + L.userguide_message_quote_content2_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto02.png" alt="" />\n     </div>\n     ' + L.userguide_message_quote_content3_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto03.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step02_01 Quote Messege -->\n   <!-- Step02_02 Edit Messege -->\n   <div class="_howTo _content6" style="display: none">\n    <h2><span class="userguideOrderListStepNum">2</span>' + L.userguide_message_edit + '</h2>\n    <div class="_contentBody userguideContent">\n     <h3>' + L.userguide_message_edit + "</h3>\n     " + L.userguide_message_edit_content1_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto04.png" alt="" />\n     </div>\n     ' + L.userguide_message_edit_content2_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto05.png" alt="" />\n     </div>\n     <h3>' + L.userguide_message_delete + "</h3>\n     " + L.userguide_message_delete_content1 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto06.png" alt="" />\n     </div>\n     ' + L.userguide_message_delete_content2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto07.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step02_02 Edit Messege -->\n   <!-- Step02_03 TO Messege -->\n   <div class="_howTo _content7" style="display: none">\n    <h2><span class="userguideOrderListStepNum">3</span>' + L.userguide_message_mention + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_message_mention_content1 + "\n     <h3>" + L.userguide_message_mention_select + "</h3>\n     " + L.userguide_message_mention_select_content1 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto08.png" alt="" />\n     </div>\n     <h3>' + L.userguide_message_mention_send + "</h3>\n     " + L.userguide_message_mention_send_content1 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto09.png" alt="" />\n     </div>\n     ' + L.userguide_message_mention_send_content2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto10.png" alt="" />\n     </div>\n     ' + L.userguide_message_mention_send_content3 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step02/img_ug_howto11.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step02_03 TO Messege -->\n   <!-- Step03_00 About Task -->\n   <div class="_howTo _content8" style="display: none">\n    <h2>' + L.userguide_task_about + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_task_about_content + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_about_task.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step03_00 About Task -->\n   <!-- Step03_01 Add Task -->\n   <div class="_howTo _content9" style="display: none">\n    <h2><span class="userguideOrderListStepNum">1</span>' + L.userguide_task_add + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_task_add_content1_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto01.png" alt="" />\n     </div>\n     ' + L.userguide_task_add_content2_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto02.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step03_01 Add Task -->\n   <!-- Step03_02 Confirm Task -->\n   <div class="_howTo _content10" style="display: none">\n    <h2><span class="userguideOrderListStepNum">2</span>' + L.userguide_task_browse + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_task_browse_content1 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto03.png" alt="" />\n     </div>\n     ' + L.userguide_task_browse_content2_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto04.png" alt="" />\n     </div>\n    </div>\n   </div>\n   <!-- /Step03_02 Confirm Task -->\n   <!-- Step03_03 Complete Task -->\n   <div class="_howTo _content11" style="display: none">\n    <h2><span class="userguideOrderListStepNum">3</span>' + L.userguide_task_complete + '</h2>\n    <div class="_contentBody userguideContent">\n     ' + L.userguide_task_complete_content1_biwa + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto05.png" alt="" />\n     </div>\n     ' + L.userguide_task_complete_content2 + '\n     <div class="userguideContentImgArea">\n      <img src="imagenew/lang/' + LANGUAGE + '/userguide/step03/img_ug_howto06.png" alt="" />\n     </div>\n     ' + L.userguide_task_complete_content3.replace("%%service_name%%", SERVICE_NAME) + '\n    </div>\n   </div>\n   <!-- /Step03_03 Complete Task -->\n  </div><!-- .userguideContentArea -->\n  <!-- /User Guide Contents -->\n </div><!-- .content -->\n</div><!-- .userguideDialog -->\n<!-- /userguide_dialog_profile -->\n\n<!-- start chat_setting -->\n<div id="_chatSetting" class="dialog">\n <div class="_cwFWHeader floatHeaderTab">\n  <ul>\n   <li class="floatTabSelect">' + L.chatsetting_tab_notification + "</li>\n   <li>" + L.chatsetting_tab_display + "</li>\n   <li>" + L.chatsetting_tab_language + "</li>\n   <li>" + L.chatsetting_tab_login + "</li>\n   " + (ALLOW_API ? "<li>" + L.chatsetting_tab_apitoken + "</li>" : "") + '\n  </ul>\n </div>\n <div class="_cwFWContent">\n  <form id="_settingForm">\n  <!-- #_settingPreference -->\n  <div id="_settingPreference" class="_cwSettingContents">\n   <!-- chatsetting_notifier -->\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.chatsetting_notifier + '：</label>\n    <div class="controlContent">\n     <ul id="_notifierNotSupported" style="display:none">\n      <li>' + L.desktopalert_no_support + '</li>\n     </ul>\n     <ul id="_notifierSupported" class="notificationSetting">\n      <li class="notificationSetting__master">\n        <input type="checkbox" id="_notifierShow" value="1" />\n        <label for="_notifierShow" class="ecfFCheckboxLbl" >' + L.chatsetting_notifier_show + '</label>\n      </li>\n      <li class="_cwSelectableRow notificationSetting__detail">\n        <input type="checkbox" id="_notifierMessage" value="1" />\n        <label for="_notifierMessage" class="ecfFCheckboxLbl" >' + L.chatsetting_notifier_message + '</label>\n      </li>\n      <li class="_cwSelectableRow notificationSetting__detail">\n        <input type="checkbox" id="_notifierOnlyto" value="1" />\n        <label for="_notifierOnlyto" class="ecfFCheckboxLbl" >' + L.chatsetting_notifier_onlyto + '</li>\n      <li id="_notifierDurationBox" class="notificationSetting__detail">' + L.chatsetting_notifier_duration + '：\n       <select id="_notifierDuration">\n        <option value="20">' + L.chatsetting_notifier_duration_20sec + '</option>\n        <option value="10">' + L.chatsetting_notifier_duration_10sec + '</option>\n        <option value="5">' + L.chatsetting_notifier_duration_5sec + '</option>\n       </select>\n      </li>\n     </ul>\n    </div><!-- controlContent -->\n   </div> <!-- controlGroup -->\n   <!-- chatsetting_sound -->\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.menu_sound + ':</label>\n    <div class="controlContent">\n     <ul class="popupSoundSetting">\n      <li class="popupSoundSetting__master">\n        <input type="checkbox" id="_popupSound" value="1" />\n        <label for="_popupSound" class="ecfFCheckboxLbl" >' + L.chatsetting_popup_sound + '</li>\n      </li>\n      <li id="_popupSoundType" class="popupSoundSetting__detail">\n       ' + L.sound_type + ':\n       <select id="_soundType">\n        <!-- biwa sounds -->\n        <option value="Kalimba">Kalimba</option>\n        <option value="Kalimba_c">Kalimba2</option>\n        <option value="Kalimba_d">Kalimba3</option>\n        <option value="EP">E-Piano</option>\n        <option value="EP02">E-Piano2</option>\n        <option value="EP_c">E-Piano3</option>\n        <option value="EP_d">E-Piano4</option>\n        <option value="Piano">Piano</option>\n        <option value="Piano_c">Piano2</option>\n        <option value="Piano_d">Piano3</option>\n        <option value="Piano_e">Piano4</option>\n        <option value="SynthBell">SynthBell</option>\n        <option value="SynthBell02">SynthBell2</option>\n        <option value="SynthBell03">SynthBell3</option>\n        <option value="GuitarCutting">GuitarCutting</option>\n        <option value="Ac_Guitar">Ac Guitar</option>\n        <option value="Ac_Guitar02">Ac Guitar2</option>\n        <option value="Conga">Conga</option>\n        <option value="Conga02">Conga2</option>\n        <option value="Conga_c">Conga3</option>\n        <option value="Brass">Brass</option>\n        <option value="Cymbal">Cymbal</option>\n        <option value="Dora">Dora</option>\n        <option value="Sitar">Sitar</option>\n        <option value="Tambourine">Tambourine</option>\n        <option value="Crap">Clap</option>\n        <option value="Shooting">Shooting</option>\n        <option value="Snare">Snare</option>\n        <option value="Crisis01">Crisis1</option>\n        <option value="Crisis02">Crisis2</option>\n        <!-- /biwa sounds -->\n        <option value="8-bit">8-bit</option>\n        <option value="agogo">Agogo</option>\n        <option value="chime">Chime</option>\n        <option value="cowbell">Cowbell</option>\n        <option value="cuica">Cuica</option>\n        <option value="drip">Drip</option>\n        <option value="kiai">Kiai</option>\n        <option value="mallet">Mallet</option>\n        <option value="marimba">Marimba</option>\n        <option value="percussimba">Percussimba</option>\n        <option value="steampipe">Steam Pipe</option>\n        <option value="whistle">Whistle</option>\n        <option value="ashvoice">You\'ve got chat</option>\n       </select>\n      </li>\n      <li id="_popupSoundVolume" class="popupSoundSetting__detail">\n       ' + L.sound_volume + ':\n       <!-- div id="_soundVolumeSlider" class="slider soundVolumeSlider sliderHorizontal sliderContent">\n        <a class="sliderHandle sliderHandleDefault buttonBackgroundGray" href="#"></a>\n       </div>\n       <input type="hidden" id="_soundVolume" name="__cwform_data[sound_volume]" />\n       <span id="_soundVolumeLabel">0</span -->\n       <select id="_soundVolume">\n        <option value="0.1">1</option>\n        <option value="0.2">2</option>\n        <option value="0.3">3</option>\n        <option value="0.4">4</option>\n        <option value="0.5">5</option>\n        <option value="0.6">6</option>\n        <option value="0.7">7</option>\n        <option value="0.8">8</option>\n        <option value="0.9">9</option>\n        <option value="1">10</option>\n       </select>\n       <input type="button" id="_soundPlay" role="button" class="button buttonHighHeight buttonText" value="' + L.chatsetting_test_sound + '" />\n      </li>\n     </ul>\n    </div><!-- .controlContent -->\n   </div><!-- .controlGroup -->\n   <!-- chatroom_description -->\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.chatsetting_unread_mail_label + '：</label>\n    <div class="controlContent">\n     ' + L.chatsetting_unread_mail + '\n     <select id="_notifyTerm">\n      <option value="24">' + L.chatsetting_unread_mail_term_24 + '</option>\n      <option value="12">' + L.chatsetting_unread_mail_term_12 + '</option>\n      <option value="6">' + L.chatsetting_unread_mail_term_6 + '</option>\n      <option value="3">' + L.chatsetting_unread_mail_term_3 + '</option>\n      <option value="2">' + L.chatsetting_unread_mail_term_2 + '</option>\n      <option value="1">' + L.chatsetting_unread_mail_term_1 + '</option>\n      <option value="0">' + L.chatsetting_unread_mail_term_none + '</option>\n     </select>\n    </div><!-- .controlContent -->\n   </div><!-- .controlGroup -->\n  </div>\n  <!-- /#_settingPreference -->\n  <!-- /#_settingView -->\n  <div id="_settingView" class="_cwSettingContents">\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.chatsetting_tab_display + ':</label>\n    <div class="controlContent">\n     <ul>\n      <li class="_cwSelectableRow">\n        <input type="checkbox" id="_faviconstat" value="1" />\n        <label for="_faviconstat" class="ecfFCheckboxLbl" >' + L.chatsetting_faviconstat + '</li>\n      </li>\n      <li class="_cwSelectableRow">\n        <input type="checkbox" id="_showDelmessage" value="1" />\n        <label for="_showDelmessage" class="ecfFCheckboxLbl" >' + L.chatsetting_show_delmessage + '</li>\n      </li>\n      <li class="_cwSelectableRow">\n        <input type="checkbox" id="_showExternal" value="1" />\n        <label for="_showExternal" class="ecfFCheckboxLbl" >' + L.chatsetting_show_external + '</li>\n      </li>\n      <li class="_cwSelectableRow">\n        <input type="checkbox" id="_privateNickname" value="1" />\n        <label for="_privateNickname" class="ecfFCheckboxLbl" >' + L.chatsetting_private_nickname + '</li>\n      </li>\n      <li class="_cwSelectableRow">\n        <input type="checkbox" id="_shortenUrl" value="1" />\n        <label for="_shortenUrl" class="ecfFCheckboxLbl" >' + L.chatsetting_shorten_url + '</li>\n      </li>\n     </ul>\n    </div><!-- controlContent -->\n   </div><!-- controlGroup -->\n  </div><!-- ._cwSettingContents -->\n  <!-- /#_settingView -->\n  <!-- #_settingLanguage -->\n  <div id="_settingLanguage" class="_cwSettingContents">\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.lang_typetip + '</label>\n    <div class="controlContent">\n     <select id="_langType">\n      <option value="en">' + L.lang_en + '</option>\n      <option value="ja">' + L.lang_ja + '</option>\n      <option value="zh-tw">' + L.lang_zh_tw + '</option>\n      <option value="vi">' + L.lang_vi + '</option>\n      <option value="zh-cn">' + L.lang_zh_cn + '</option>\n      <option value="th">' + L.lang_th + '</option>\n      <option value="es">' + L.lang_es + '</option>\n     </select>\n    </div><!-- .controlContent -->\n   </div><!-- .controlGroup -->\n   <div class="controlGroup">\n    <label class="controlLabel">' + L.lang_dateformattip + '</label>\n    <div class="controlContent">\n     <select id="_langDateformat"></select>\n    </div><!-- .controlContent -->\n   </div><!-- .controlGroup -->\n  </div><!-- ._cwSettingContents -->\n  <!-- /#_settingLanguage -->\n  <!-- #_settingOtherservice -->\n  <div id="_settingOtherservice" class="_cwSettingContents">\n   ' + profileLinkTemplate + "\n  </div><!-- ._cwSettingContents -->\n  <!-- /#_settingOtherservice -->\n  " + apiSettingTemplate + '\n  </form>\n </div>\n</div>\n<!-- end chat_setting -->\n\n<!-- storage_limit_dialog -->\n<div id="_storageLimitDialog" class="dialog controlGroup">\n <div id="_storageLimitBody" class="content">\n </div>\n <div id="_storageLimitFooter">\n </div>\n <div id="_storageLimitButton" class="dialogSelect">\n  <div id="_storageLimitLink" role="button" class="button btnPrimary btnLarge"></div>\n </div>\n</div>\n<!-- /storage_limit_dialog -->\n\n\n<!-- newbrowser_dialog -->\n<div id="_newbrowserDialog" class="dialog" style="display:none;">\n <div class="controlGroup clearfix">\n  <p class="alert alertDanger">' + L.newbrowser_subject + "</p>\n  <p>" + L.newbrowser_desc + "</p>\n </div><!-- .controlGroup -->\n <h2>" + L.newbrowser_recommended + '</h2>\n <div class="controlGroup">\n  <p>' + L.newbrowser_listtip + '</p>\n  <ul class="newbrowserList selected">\n   <li><span class="tm_newbrowser_icon tm_newbrowser_chrome"></span><a href="' + L.newbrowser_download_chrome + '" target="_blank">Google Chrome</a></li>\n   <li><span class="tm_newbrowser_icon tm_newbrowser_firefox"></span><a href="' + L.newbrowser_download_firefox + '" target="_blank">Firefox</a></li>\n   <li><span class="tm_newbrowser_icon tm_newbrowser_ie"></span><a href="' + L.newbrowser_download_ie + '" target="_blank">Internet Explorer</a></li>\n   <li><span class="tm_newbrowser_icon tm_newbrowser_safari"></span><a href="' + L.newbrowser_download_safari + '" target="_blank">Safari</a></li>\n  </ul>\n </div><!-- .controlGroup -->\n <h2>' + L.newbrowser_ie9_higher + '</h2>\n <div class="controlGroup">\n  <p>' + L.newbrowser_check_compatibility_view_ie9 + '</p>\n  <img class="newbrowserView" src="imagenew/common/dialog/img_newbrowser_compatibility_view.png" alt="Your browser is Old!" />\n </div><!-- .controlGroup -->\n</div>\n<!-- /newbrowser_dialog -->\n\n<!-- announceDialog -->\n<div id="_announceDialog" class="dialog dialogPadding" style="display:none;">\n <div id="_announceBody" class="content"></div>\n</div>\n<!-- /announceDialog -->\n\n{userguideWelcomeDialogTemplate}\n\n<!-- tutorial_movie_dialog -->\n<div id="_tutorialMovieDialog" class="dialog tutorialMovieDialog">\n <div class="content">\n </div>\n</div>\n<!-- /userguide_weblome_dialog -->\n\n<!-- _feedbackCompleteDialog -->\n<div id="_feedbackCompleteDialog" class="dialog dialogPadding" style="display:none;">\n <pre>' + L.feedback_thankyou + '</pre>\n</div>\n<!-- /_feedbackCompleteDialog -->\n\n<div id="_feedbackDialog" class="dialog dialogPadding" style="display:none">\n <div class="feedbackArea">\n  <p>' + L.feedback_desc_noreply + '</p>\n  <textarea id="_feedbackMessage"></textarea>\n </div>\n</div>\n\n<div id="_gameDialog" class="dialog" style="display:none">\n</div>\n';
        }, {}
    ],
    120: [
        function(require, module, exports) {
            "use strict";
            exports.floatWindowTemplate = '\n<!-- start message_search -->\n<div id="_messageSearchContent" class="messageSearchContent" style="display: none;">\n <div class="_cwFWHeader">\n  <div id="_messageSearchControlBox" class="floatWindowContentGroup">\n   <input type="text" class="_searchBox inputLong" id="_messageSearchQuery" placeholder="' + L.search_placeholder + '" />\n   <div id="_messageSearchSend" role="button" class="button btnPrimary">' + L.button_search + '</div>\n   <a id="_messageSearchOption" class="searchOptionArea selected">' + L.search_option + '<span class="_iconRotate icoFontTriangleDown"></span></a>\n   <div id="_messageSearchOptionArea" class="controlGroup searchOptionGroup" style="display: none;">\n    <label class="controlLabel">' + L.search_except_wordtip + '</label>\n    <div class="controlContent">\n     <input type="text" id="_messageSearchExceptWord" class="inputLong" placeholder="' + L.search_except_word_placeholder + '"/>\n    </div>\n    <label id="_messageSearchSpeakerTip" class="controlLabel">' + L.search_message_fromtip + '</label>\n    <div class="controlContent">\n     <div id="_messageSearchSpeaker" role="button" aria-labelledby="_messageSearchSpeakerTip" class="button">\n      <span class="icoFontAddBtn icoSizeLarge"></span>\n     </div>\n     <div id="_messageSearchSpeakerBox" class="messageSearchSpeakerBox"></div>\n    </div>\n    <label class="controlLabel">' + L.search_message_termtip + '</label>\n    <div class="controlContent">\n     <select id="_messageSearchTerm">\n      <option value="all">' + L.search_term_all + '</option>\n      <option value="7">' + L.search_term_7 + '</option>\n      <option value="30">' + L.search_term_30 + '</option>\n      <option value="90">' + L.search_term_90 + '</option>\n      <option value="365">' + L.search_term_365 + '</option>\n      <option value="specify">' + L.search_term_specify + '</option>\n     </select>\n     <span id="_messageSearchTerm_specify" style="display:none"> ( <input type="text" id="_messageSearchDateFrom" class="_datePicker"/> ' + L.search_term_separator + ' <input type="text" id="_messageSearchDateTo" class="_datePicker"/> )</span>\n    </div>\n   </div> <!-- .searchOptionGroup -->\n  </div><!-- .floatWindowContentGroup -->\n  <div id="_messageSearchResultHead" class="searchResultBox" style="display:none">\n   <div>' + L.search_resulttip + ' <span id="_messageSearchResultNum">0</span>' + L.search_result_unit + '<span id="_messageSearchOverflow" style="display:none">' + L.search_max_results.replace(/%%max_results%%/g, SEARCH_MAX_RESULTS) + '</span></div>\n   <ul id="_messageSearchGrouping">\n    <li>' + L.search_group_by_time + "</li>\n    <li>" + L.search_group_by_chat + "</li>\n    <li>" + L.search_group_by_user + '</li>\n   </ul><!-- .termList -->\n   <ul id="_messageSearchExpand">\n    <li id="_messageSearchResultOpenAll" class="adminButton button btnLarge _cwTextUnselectable" role="button" aria-label="' + L.search_result_bychat_openall + '"><span class="icoFontContentOpen"></span></li>\n    <li id="_messageSearchCloseAll" class="adminButton button btnLarge _cwTextUnselectable" role="button" aria-label="' + L.search_result_bychat_closeall + '"><span class="icoFontContentClose"></span></li>\n   </ul>\n  </div>\n </div>\n <div id="_messageSearchContentBox" class="_cwFWContent">\n  <div id="_messageSearchResultBox" class="searchResultListBox">\n   <div id="_messageSearchLoading" class="contentLoading" style="display:none"><img src="./imagenew/all/common/loader/img_loader_white.gif" alt="Loading" />' + L.search_loading + '</div>\n   <div id="_messageSearchResult" class="searchResultChat"></div>\n  </div>\n </div>\n</div><!-- .messageSearchContent -->\n<!-- end message_search -->\n\n<!-- start admin_task -->\n<div id="_taskWindow" class="taskWindow" style="display: none;">\n <div class="_cwFWHeader">\n  <div class="floatHeaderTab taskStausList clearfix">\n   <ul>\n    <li id="_taskWindowTabOpen" class="floatTabSelect">' + L.task_menu_open + '</li>\n    <li id="_taskWindowTabDone">' + L.task_menu_close + '</li>\n   </ul>\n  </div><!-- .floatHeaderTab -->\n  <div class="adminNavigation">\n   <ul id="_taskWindowFilter" class="taskWindowFilter">\n    <li class="btnLarge">' + L.task_filter_all + '<span id="_taskWindowNumAll" class="taskNumCount" style="display: none"></span></li>\n    <li>' + L.task_filter_exired + '<span id="_taskWindowNumLimitOver" class="taskNumCount" style="display: none"></span></li>\n    <li>' + L.task_filter_today + '<span id="_taskWindowNumLimitToday" class="taskNumCount" style="display: none"></span></li>\n    <li>' + L.task_filter_inweek + '<span id="_taskWindowNumLimitWeek" class="taskNumCount" style="display: none"></span></li>\n    <li>' + L.task_filter_nolimit + '<span id="_taskWindowNumLimitNone" class="taskNumCount" style="display: none"></span></li>\n   </ul>\n   <ul id="_taskWindowViewType" class="taskWindowFilter">\n    <li aria-label="' + L.task_menu_incharge + '"><span class="icoFontTaskMine icoSizeLarge"></span></li>\n    <li aria-label="' + L.task_menu_client + '"><span class="icoFontTaskAssign icoSizeLarge"></span></li>\n   </ul>\n   <div class="floatListpager">\n    <p id="_taskWindowPagerIndex"></p>\n    <ul id="_taskWindowPager">\n     <li data-type="first"><span class="icoFontArrowDoubleLeft"></span><span class="icoTextHide">' + L.pager_first + '</span></li>\n     <li data-type="prev"><span class="icoFontTriangleLeft"></span><span class="icoTextHide">' + L.pager_prev + '</span></li>\n     <li data-type="next"><span class="icoFontTriangleRight"></span><span class="icoTextHide">' + L.pager_next + '</span></li>\n     <li data-type="last"><span class="icoFontArrowDoubleRight"></span><span class="icoTextHide">' + L.pager_last + '</span></li>\n    </ul>\n   </div>\n  </div><!-- .adminNavigation -->\n </div>\n <div class="_cwFWContent">\n  <div class="adminWindowAllList">\n   <div id="_taskWindowBox" class="adminAllListArea">\n    <ul id="_taskWindowList" class="subContentTask"></ul>\n    <div id="_emptyTaskContent" class="emptyAdminContent" style="display: none;">\n     <img src="./imagenew/common/empty/img_task_empty.png" alt="" />\n     <p>' + L.task_nothing + '</p>\n    </div>\n    <div class="actionBarSpacer"></div>\n   </div><!-- .adminAllListArea -->\n   <div class="adminDetailArea">\n    <div id="_taskDetailArea" class="adminDetailContentArea" style="display: none">\n     <div class="adminDetailH1">\n      <div id="_taskDetailTitle" class="adminDetailText autotrim"></div>\n      <div class="linkIconStatus closeAction"><span id="_taskDetailClose" role="button" class="icoFontCancel icoSizeLarge"></span><span class="icoTextHide">' + L.button_close + '</span></div>\n     </div>\n     <div class="adminDetailContent">\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.task_limit + ':</label>\n       <div id="_taskDetailLimit" class="controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.task_incharge + ':</label>\n       <div id="_taskDetailAssign" class="controlContent autotrim"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.task_client + ':</label>\n       <div id="_taskDetailAssignBy" class="controlContent autotrim"></div>\n      </div>\n      <div class="taskDetailChatTlArea subContentShadow">\n       <div id="_taskDetailChatName" class="taskDetailChatTitle autotrim"></div>\n       <div id="_taskDetailTimeLine" class="taskDetailChatTlBody"></div>\n      </div>\n     </div><!-- .adminDetailContentInner -->\n    </div><!-- .adminDetailContentArea -->\n    <div id="_taskDetailBlankArea" class="adminDetailContentArea">\n     <div class="adminDetailNoneContenText">\n      ' + L.task_click_detail + '\n     </div>\n    </div><!-- .taskDetailContentNoneArea -->\n   </div><!-- .adminDetailArea -->\n  </div>\n </div><!-- #_cwFWContent -->\n</div><!-- #_taskWindow -->\n<!-- end admin_task -->\n\n<!-- start admin_file -->\n<div id="_fileWindow" class="fileWindow" style="display:none">\n <div class="_cwFWHeader adminNavigation">\n  <input type="text" id="_fileWindowSearch" class="inputLong" placeholder="' + L.file_search + '"/>\n  <div class="btnGroup">\n   <div id="_fileWindowCheckAllButton" class="_button btnLarge"><input type="checkbox" id="_fileWindowCheckAll" class="_checkBox">' + L.checkall_full + '</div>\n   <div id="_fileWindowDeleteButton" class="_button btnLarge btnDisable"><span class="icoFontActionDelete"></span><span class="icoTextHide">' + L.file_delete_hint + '</span></div>\n  </div>\n  <div class="floatListpager">\n   <p id="_fileWindowPagerIndex"></p>\n   <ul id="_fileWindowPager">\n    <li data-type="first"><span class="icoFontArrowDoubleLeft"></span><span class="icoTextHide">' + L.pager_first + '</span></li>\n    <li data-type="prev"><span class="icoFontTriangleLeft"></span><span class="icoTextHide">' + L.pager_prev + '</span></li>\n    <li data-type="next"><span class="icoFontTriangleRight"></span><span class="icoTextHide">' + L.pager_next + '</span></li>\n    <li data-type="last"><span class="icoFontArrowDoubleRight"></span><span class="icoTextHide">' + L.pager_last + '</span></li>\n   </ul>\n  </div>\n </div><!-- .adminNavigation -->\n <div class="_cwFWContent">\n  <div class="adminWindowAllList">\n   <div id="_fileWindowBox" class="adminAllListArea">\n    <ul id="_fileWindowList" class="fileAllListContentArea"></ul>\n   </div><!-- .adminAllListArea -->\n   <div class="adminDetailArea">\n    <div id="_fileDetailArea" class="adminDetailContentArea" style="display: none;">\n     <div class="adminDetailH1">\n      <div id="_fileDetailTitle" class="_fileDetailName adminDetailText autotrim"></div>\n      <div class="linkIconStatus closeAction"><span id="_fileDetailClose" class="icoFontCancel icoSizeLarge"></span><span class="icoTextHide">' + L.button_close + '</span></div>\n     </div>\n     <div id="_fileDetailPreviewArea"><div class="_fileDetailPreview fileDetailPreviewArea"></div></div>\n     <div class="adminDetailContent adminfileDetailContent">\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.file_size + '：</label>\n       <div class="_fileDetailSize controlContent autotrim"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.file_upload_by + ':</label>\n       <div class="_fileDetailUploadBy controlContent autotrim"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.file_upload_datetime + '：</label>\n       <div class="_fileDetailUploadDate controlContent autotrim"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.chat + ':</label>\n       <div class="controlContent autotrim"><a class="_fileDetailChat _roomLink"></a></div>\n      </div>\n     </div><!-- .adminDetailContent -->\n    </div>\n    <div id="_fileDetailBlankArea" class="adminDetailContentArea">\n     <div class="adminDetailNoneContenText">\n      ' + L.file_click_detail + '\n     </div>\n    </div><!-- .taskDetailContentNoneArea -->\n   </div><!-- .adminDetailArea -->\n  </div><!-- .adminWindowAllList -->\n </div>\n\n <div class="_cwFWFooter fileManagerFooter">\n  <div class="storageUsage">\n   <dl>\n    <dt>' + L.storage_activity_ratio_label + '</dt>\n    <dd>\n     <ul class="storageUsageBar">\n      <li id="_storageUsageMessage" class="storageUsageMessage">' + L.message + '</li>\n      <li id="_storageUsageFile" class="storageUsageFile">' + L.file + '</li>\n      <li id="_storageUsageOther" class="storageUsageOther">' + L.storage_other_user + '</li>\n     </ul><!-- .storageUsageBar -->\n    </dd>\n    <dd>\n     <ul class="inlineblockList storageDetail">\n      <li><span class="storageUsageMessage"></span>' + L.message + ': <span id="_storageUsageMessageSize"></span></li>\n      <li><span class="storageUsageFile"></span>' + L.file + ': <span id="_storageUsageFileSize"></span></li>\n      <li><span class="storageUsageOther"></span>' + L.storage_other_user + ': <span id="_storageUsageOtherSize"></span></li>\n     </ul><!-- .inlineblockList -->\n    </dd>\n    <dd>\n     <span id="_storageTotalUsage"></span> / <span id="_storageTotalCapacity"></span> (<span id="_storageTotalUsageRatioText"><span id="_storageTotalUsageRatio"></span>% ' + L.storage_used + '</span>) <span id="_storageUserAdminLink" style="display:none">(<a href="' + ACCOUNT_SERVER_PATH + '/user_list.php" target="_blank">' + L.storage_show_all_user + '</a>)</span>\n    </dd>\n   </dl>\n  </div><!-- .storageUsage -->\n  <div id="_storageAddButton" class="storageUpdate">\n   <p role="button" aria-labelledby="_storageAddButtonText" class="button btnPrimary"><a id="_storageAddButtonText" href="#">' + L.storage_add_link + '</a></p>\n  </div><!-- .storageUpdate -->\n </div><!-- .fileManagerFooter -->\n</div><!-- #_adminFileContent -->\n<!-- end admin_file -->\n\n<!-- start admin_contact -->\n<div id="_contactWindow" class="contactWindow" style="display: none;">\n <div class="_cwFWHeader">\n  <div class="floatHeaderTab clearfix">\n   <ul id="_contactWindowTab">\n    <li id="_contactWindowTabInviteEmail" data-type="invitemail" class="floatTabSelect" style="display: none;">' + L.contact_menu_invite_mail + '</li>\n    <li id="_contactWindowTabContact" data-type="addcontact">' + L.contact_menu_user_search + '</li>\n    <li id="_contactWindowTabMyContact" data-type="contact">' + L.contact_menu_list + '<span id="_contactWindowListNum"></span></li>\n    <li id="_contactWindowTabMyRequest" data-type="myrequest">' + L.contact_menu_myrequest + '<span id="_contactWindowMyRequestNum"></span></li>\n    <li id="_contactWindowTabRequest" data-type="request">' + L.contact_menu_request + '<span id="_contactWindowRequestNum"></span></li>\n    <li id="_contactWindowTabNoRequest" data-type="norequest">' + L.contact_menu_norequest + '<span id="_contactWindowNoRequestNum"></span></li>\n   </ul>\n  </div><!-- .floatHeaderTab -->\n  <div id="_contactWindowNavigation" class="adminNavigation">\n   <input type="text" id="_contactWindowSearch" class="inputLong" />\n   <div class="btnCheckGroup" style="display: none;">\n    <div id="_contactWindowCheckAllButton" class="_button btnLarge btnDisable"><input type="checkbox" id="_contactWindowCheckAll" class="_checkBox">' + L.checkall_full + '</div>\n    <div id="_contactWindowCheckActionArea" style="display:inline">\n     <div id="_contactWindowAdd" class="_contactWindowNavigationItem _button btnPrimary btnLarge btnDisable" style="display:none">' + L.button_add_contact_long + '</div>\n     <div id="_contactWindowDelete" class="_contactWindowNavigationItem _button btnLarge btnDisable" style="display:none">' + L.contact_delete + '</div>\n     <div id="_contactWindowCancel" class="_contactWindowNavigationItem _button btnLarge btnDisable" style="display:none">' + L.contact_request_cancel + '</div>\n     <div id="_contactWindowAccept" class="_contactWindowNavigationItem _button btnPrimary btnLarge btnDisable" style="display:none">' + L.button_accept_long + '</div>\n    </div>\n   </div>\n   <div class="floatListpager">\n    <p id="_contactWindowPagerIndex"></p>\n    <ul id="_contactWindowPager">\n     <li data-type="first"><span class="icoFontArrowDoubleLeft"></span><span class="icoTextHide">' + L.pager_first + '</span></li>\n     <li data-type="prev"><span class="icoFontTriangleLeft"></span><span class="icoTextHide">' + L.pager_prev + '</span></li>\n     <li data-type="next"><span class="icoFontTriangleRight"></span><span class="icoTextHide">' + L.pager_next + '</span></li>\n     <li data-type="last"><span class="icoFontArrowDoubleRight"></span><span class="icoTextHide">' + L.pager_last + '</span></li>\n    </ul>\n   </div>\n  </div><!-- adminNavigation -->\n </div><!-- ._cwFWHeader -->\n <div class="_cwFWContent">\n  <div class="adminWindowAllList">\n   <div id="_contactInviteMailArea" class="contactInviteMailArea">\n    <div id="_contentInviteMailNew" class="contactInviteMailContent" style="display: none;">\n     <div id="_contactInviteMailIndividual" class="contactInviteMailSection">\n      <div class="contactInviteErrorMessage alert alertDanger" style="display: none"></div>\n      <label class="contactInviteMailLabel">' + L.mailaddress + '</label>\n      <ul class="contactInviteMailList">\n       <li>\n        <input type="email" name="email" placeholder="' + L.contact_invite_mail_enter_your_email_address + '" />\n        <span class="_cwFWButton icoFontCancel icoSizeLarge fromCancelIcon"></span>\n       </li>\n      </ul>\n      <div class="formControlArea clear">\n       <a href="#" id="_contactInviteMailAddAddress" class="addForm">\n        <span class="icoFontAddBtn AddFormIcon" aria-hidden="true"></span>' + L.contact_invite_mail_add_email_address_to_invite + '\n       </a>\n       <a href="#" class="changeFormBulk">' + L.contact_invite_mail_bulk_add + '</a>\n      </div>\n     </div>\n     <div id="_contactInviteMailBulk" class="contactInviteMailSection" style="display: none;">\n      <div class="contactInviteErrorMessage alert alertDanger" style="display: none;"></div>\n      <label class="contactInviteMailLabel">' + L.contact_add_multiple_mailtip + '</label>\n      <textarea id="_addFromEmailContentEmails" name="emails" placeholder="' + L.contact_add_multiple_mailtip + '"></textarea>\n      <a href="#" class="changeFormIndividual">' + L.contact_invite_mail_add_individually + '</a>\n     </div>\n     <div class="contactInviteMailSection">\n      <label class="contactInviteMailLabel">' + L.contact_invite_mail_message_optional + '</label>\n      <textarea id="_addFromEmailContent" name="message" placeholder="' + L.contact_invite_mail_enter_message + '"></textarea>\n     </div>\n    </div><!-- .contactInviteMailContent -->\n    <div id="_contentInviteMailFinished" class="contactInviteMailContent" style="display: none;">\n     <div class="contactInviteMailSection">\n      <p class="alert alertSuccess">' + L.contact_invite_mail_invitation_was_sent + '</p>\n      <p class="alert alertDanger">' + L.contact_invite_mail_failed_sent_following_reasons + '</p>\n     </div>\n     <div id="_contactInviteMailSentEmails" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleSuccess">' + L.contact_invite_mail_invitation_sent + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailUnreachableEmailAddresses" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_invalid_email_address + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailAlreadyRequested" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_already_send_request + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailAlreadyConnected" class="contactInviteMailResult">\n      <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_already_in_your_contacts + '</p>\n      <ul class="contactInviteMailResultList">\n      </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailRequestAlreadyReceived" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_already_received_request + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailNotAllowedConnecting" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_restricted_to_outside_orgaization + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailContactRequestLimitExceeded" class="contactInviteMailResult">\n        <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_maximum_contact_requests + '</p>\n        <ul class="contactInviteMailResultList">\n        </ul>\n     </div><!-- .contactInviteMailResult -->\n     <div id="_contactInviteMailContactYourEmailAddress" class="contactInviteMailResult">\n      <p class="contactInviteMailResultTitle mailResultTitleFailed">' + L.contact_invite_mail_send_your_account + '</p>\n      <ul class="contactInviteMailResultList">\n      </ul>\n     </div><!-- .contactInviteMailResult -->\n    </div><!-- .contactInviteMailContent -->\n   </div><!-- #_contactInviteMailArea -->\n   <div id="_contactWindowBox" class="adminAllListArea">\n    <ul id="_contactWindowList" class="contactList"></ul>\n   </div><!-- .adminAllListArea -->\n   <div id="_contactDetailAreaWrapper" class="adminDetailArea contactDetailArea">\n    <div id="_contactDetailArea" class="adminDetailContentArea" style="display: none;">\n     <div class="adminDetailH1">\n      <div class="_profileName adminDetailText autotrim"></div>\n      <div class="closeAction linkIconStatus"><span id="_contactDetailClose" role="button" class="icoFontCancel icoSizeLarge"></span><span class="icoTextHide">' + L.button_close + '</span></div>\n     </div>\n     <div class="_profileContactDetailCover profileContactDetailCoverArea"></div>\n     <div class="adminDetailContent contactDetailContent">\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_introductiontip + '</label>\n       <div class="_profileNameDescription controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_orgnametip + '</label>\n       <div class="_profileOrgName controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_departmenttip + '</label>\n       <div class="_profileDepartment controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_titletip + '</label>\n       <div class="_profileTitle controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_addresstip + '</label>\n       <div class="_profileAddress controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel">' + L.profile_setting_urltip + '</label>\n       <div class="_profileUrl controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel longLabel">' + L.profile_setting_emailtip + '</label>\n       <div class="_profileEmail controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel longLabel">' + L.profile_setting_tel_organizationtip + '</label>\n       <div class="_profileOrgTel controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel longLabel">' + L.profile_setting_tel_extensiontip + '</label>\n       <div class="_profileExtensionTel controlContent"></div>\n      </div>\n      <div class="controlGroup">\n       <label class="controlLabel longLabel">' + L.profile_setting_tel_mobiletip + '</label>\n       <div class="_profileMobileTel controlContent"></div>\n      </div>\n     </div><!-- .adminDetailContentInner -->\n    </div><!-- .adminDetailContentArea -->\n    <div id="_contactDetailBlankArea" class="adminDetailContentArea">\n     <div class="adminDetailNoneContenText">\n      ' + L.contact_click_detail + '\n     </div>\n    </div><!-- .adminDetailArea -->\n   </div><!-- .contactDetailArea -->\n  </div><!-- .adminWindowAllList -->\n </div><!-- ._cwFWContent -->\n <div class="_cwFWFooter contactInviteMailFooter" style="display: none;">\n  <div id="_contactInviteMail" class="_button btnPrimary btnLarge">' + L.contact_invite_mail_send + '</div>\n  <div id="_contactOtherInviteMail" class="_button btnLarge">' + L.contact_invite_mail_invite_more + "</div>\n </div>\n</div>\n<!-- end admin_contact -->\n"
        }, {}
    ],
    121: [
        function(require, module, exports) {
            "use strict";
            var conciergeTemplate = SHOW_CONCIERGE ? '\n<div class="globalHeaderConcierge _showDescription"\n     role="button"\n     aria-label="' + L.menu_concierge + "\"\n     data-delay=\"0\"\n>\n    <a class=\"globalHeaderConcierge__icon icoFontAdminConciergeMenu\"\n       onclick=\"ga('send','event','Concierge','Click','ConciergeMenu');\"\n       href=\"" + L.concierge_lp_url + '"\n       target="_blank"\n       aria-hidden="true"\n    ></a>\n</div>' : "",
                kddiHelpTemplate = "kddi" === OEM ? '\n<li class="helpMenuItem">\n    <a class="helpMenuItem__anchor"\n       href="' + L.kddi_manual_path + '"\n       target="_blank"\n    >' + L.kddi_manual_name + "</a>\n</li>" : "",
                helpTemplate = "ja" === LANGUAGE ? '\n<li class="helpMenuItem">\n    <a class="helpMenuItem__anchor"\n       href="http://feedback-ja.chatwork.com/"\n       target="_blank"\n    >' + L.menu_feedback + "</a>\n</li>\n<li class=\"helpMenuItem\">\n    <a class=\"helpMenuItem__anchor\"\n       onclick=\"ga('send','event','ChatWorkAd','Click','InfoMenu');\"\n       href=\"http://www.chatwork.com/ja/lp/chatworkad/\"\n       target=\"_blank\"\n    >広告掲載のお問い合わせ</a>\n</li>" : '<li class="helpMenuItem">\n    <a id="_feedback"\n       class="helpMenuItem__anchor"\n    >' + L.menu_feedback + "</a>\n</li>";
            exports.headerTemplate = '\n<div id="_globalHeader" class="header">\n    <div id="_inner" class="globalHeader">\n        <div class="globalHeader__branding">\n            <h1 id="_logo" class="globalHeaderBranding">\n                <img class="globalHeaderBranding__' + OEM + 'SvgLogo"\n                     src="./imagenew/all/common/logo/img_logo_' + OEM + '.png"\n                     alt="ChatWork"\n                >\n\n                <img class="globalHeaderBranding__' + OEM + 'NoSvgLogo"\n                     src=""\n                     alt="ChatWork"\n                >\n            </h1>\n        </div>\n\n        <div id="_headerSearch" class="globalHeader__search">\n            <div class="globalHeaderSearch">\n                <input type="text"\n                       name="search"\n                       id="_search"\n                       class="_searchBox"\n                       placeholder="' + L.chat_search + '"\n                >\n            </div>\n        </div>\n\n        <div class="globalHeader__navigation">\n          ' + conciergeTemplate + '\n          <ul id="_adminNavi"\n              class="globalHeaderNavigation"\n              role="navigation"\n          >\n              <li id="_openTaskWindow"\n                  class="globalHeaderNavItem _showDescription"\n                  role="button"\n                  aria-label="' + L.menu_mytask + '"\n                  data-delay="0"\n              >\n                <span class="globalHeaderNavItem__button icoFontAdminTaskMenu"\n                      aria-hidden="true"\n                ></span>\n                <span id="_myAllTaskNum"\n                      class="globalHeaderNavItem__badge"\n                ></span>\n              </li>\n              <li role="button"\n                  id="_openFileWindow"\n                  class="globalHeaderNavItem _showDescription"\n                  aria-label="' + L.menu_file + '"\n                  data-delay="0"\n              >\n                <span class="globalHeaderNavItem__button icoFontAdminFileMenu"\n                      aria-hidden="true"\n                ></span>\n                <span id="_myFileNotice"\n                      class="globalHeaderNavItem__fileBadge"\n                >&nbsp;!&nbsp;</span>\n              </li>\n              <li role="button"\n                  id="_openContactWindow"\n                  class="globalHeaderNavItem _adminContact _showDescription"\n                  aria-label="' + L.menu_contact_admin + '"\n                  data-delay="0"\n              >\n                <span class="globalHeaderNavItem__button icoFontAdminContactMenu"\n                      aria-hidden="true"\n                ></span>\n                <span id="_myAllContactNum"\n                      class="globalHeaderNavItem__badge"\n                ></span>\n              </li>\n            </ul>\n\n            <div role="button"\n                 aria-label="' + L.menu_information + '"\n                 id="_openInfomation"\n                 data-delay="0"\n                 class="globalHeaderInformation _showDescription"\n            >\n              <span class="globalHeaderInformation__icon icoFontAdminInfoMenu"\n                    aria-hidden="true"\n              ></span>\n            </div>\n\n            <div id="_myStatusButton"\n                 class="globalHeaderMyAccount"\n            >\n                <div id="_myStatusIcon"\n                     class="globalHeaderMyAccount__avatar"\n                >\n                    <img class="globalHeaderMyAccount__avatarImage"\n                         src="' + S3_PATH + '/avatar/ico_avatar_loading.png"\n                    >\n                </div>\n\n                <p id="_myStatusName"\n                   class="globalHeaderMyAccount__name"\n                >' + L.loading + '</p>\n\n            </div>\n        </div>\n\n        <ul role="menu"\n            id="_myStatusBox"\n            class="myAccountMenu"\n        >\n            <li role="menuitem"\n                id="_myProfile"\n                class="myAccountMenu__item"\n            >\n                <a class="myAccountMenu__anchor">' + L.menu_profile_setting + '</a>\n            </li>\n\n            <li role="menuitem"\n                id="_setting"\n                class="myAccountMenu__item"\n            >\n                <a class="myAccountMenu__anchor">' + L.menu_personal_setting + '</a>\n            </li>\n\n            <li role="menuitem"\n                id="_openAdminMenu"\n                class="myAccountMenu__item"\n            >\n                <a id="_openServiceAdmin"\n                   class="myAccountMenu__anchor"\n                >' + L.menu_admin_setting + '</a>\n            </li>\n\n            <li role="menuitem"\n                id="_upgradePlan"\n                class="myAccountMenu__item"\n                style="display:none"\n            >\n                <a class="myAccountMenu__anchor">' + L.serviceadmin_upgrade + '</a>\n            </li>\n\n            <li role="menuitem"\n                id="_userAdminMenu"\n                class="myAccountMenu__item"\n                style="display:none"\n            >\n                <a class="myAccountMenu__anchor"\n                   href="' + PATH_CHATWORK_SERVICE + '/packages/chatwork/user_list.php"\n                   target="_blank">' + L.serviceadmin_user_list_label + "</a>\n            </li>\n\n            <li class=\"myAccountMenu__item\">\n                <a class=\"myAccountMenu__anchor\"\n                   onclick=\"ga('send', 'event', 'DownloadApp', 'Click', 'myStatusMenu');\"\n                   href=\"" + L.url_download_app + '"\n                   target="_blank"\n                >' + L.menu_download_app + '</a>\n            </li>\n\n            <li class="myAccountMenu__item">\n                <a role="menuitem"\n                   class="myAccountMenu__anchor"\n                   href="?act=logout"\n                >' + L.menu_logout + '</a>\n            </li>\n        </ul>\n    </div>\n\n    <div id="_informationBox" class="helpMenu">\n        <div id="_notificationArea" class="helpMenu__notification">\n            <div class="helpMenuNotification">\n\n                <p class="helpMenuNotification__title">\n                    <span class="helpMenuNotification__titleIcon icoFontInfo"></span>' + L.menu_announcement + '\n                </p>\n\n                <div id="_notificationContents" class="helpMenuNotification__body">\n                    <ul id="_notificationItemList">\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n\n        <ul class="helpMenu__Items">\n            <li class="helpMenuItem">\n                <a id="_userGuideLink"\n                   class="helpMenuItem__anchor"\n                >' + L.menu_userguide + '</a>\n            </li>\n\n            <li class="helpMenuItem">\n                <a id="_cheatSheetLink"\n                   class="helpMenuItem__anchor"\n                >' + L.menu_cheat_sheet + '</a>\n            </li>\n\n            <li class="helpMenuItem">\n                <a class="helpMenuItem__anchor"\n                   href="' + L.chatwork_help_page_path + '"\n                   target="_blank"\n                >' + L.menu_help + "</a>\n            </li>\n\n            " + kddiHelpTemplate + "\n            " + helpTemplate + '\n\n        </ul>\n\n        <div class="helpMenu__footer">\n\n            <small class="helpMenuCopyright">\n                &copy; ' + (new Date).getFullYear() + ' <a href="' + COMPANY_PATH + '" target="_blank">ChatWork</a>\n            </small>\n\n            <ul class="helpMenuSocialLink">\n                <li class="helpMenuSocialLink__item">\n                    <a class="_showDescription"\n                       href="https://facebook.com/' + FACEBOOK_ID + '"\n                       target="_blank"\n                       aria-label="Facebook"\n                       data-delay="0"\n                    ><span class="helpMenuSocialLink__icon ico27FacebookWh"></span></a>\n                </li>\n\n                <li class="helpMenuSocialLink__item">\n                    <a class="_showDescription"\n                       href="https://twitter.com/' + TWITTER_ID + '"\n                       target="_blank"\n                       aria-label="Twitter"\n                       data-delay="0"\n                    ><span class="helpMenuSocialLink__icon ico27TwitterWh"></span></a>\n                </li>\n\n                <li class="helpMenuSocialLink__item">\n                    <a class="_showDescription"\n                       href="https://plus.google.com/' + GOOGLE_PLUS_ID + '/"\n                       target="_blank"\n                       aria-label="Google+"\n                       data-delay="0"\n                    ><span class="helpMenuSocialLink__icon ico27GoogleWh"></span></a>\n                </li>\n\n                <li class="helpMenuSocialLink__item">\n                    <a class="_showDescription"\n                       href="' + L.fbconnect_blog_url + '"\n                       target="_blank"\n                       aria-label="Blog"\n                       data-delay="0"\n                    ><span class="helpMenuSocialLink__icon ico27BlogWh"></span></a>\n                </li>\n\n            </ul>\n        </div>\n    </div>\n\n    <div id="_searchResult"\n         class="searchResult"\n         style="display: none;"\n    >\n        <ul role="list"\n            id="_searchResultChatList"\n            class="searchResult__chatList"\n        ></ul>\n\n\n        <div id="_messageSearch"\n             class="searchResult__footer"\n        >\n  <span id="_messageSearchIcon"\n        class="searchResult__searchIcon icoFontSearch"\n  ></span>\n  <span id="_messageSearchHint"\n        class="searchResult__searchKeyword"\n  ></span>\n        </div>\n\n    </div>\n</div>';
        }, {}
    ],
    122: [
        function(require, module, exports) {
            "use strict";
            var loading_template_1 = require("./loading-template"),
                header_template_1 = require("./header-template"),
                side_content_template_1 = require("./side-content-template"),
                main_content_template_1 = require("./main-content-template"),
                float_window_template_1 = require("./float-window-template"),
                dialog_template_1 = require("./dialog-template"),
                tooltip_template_1 = require("./tooltip-template"),
                room_info_template_1 = require("./room-info-template"),
                member_edit_template_1 = require("./member-edit-template"),
                member_addition_template_1 = require("./member-addition-template"),
                cheat_sheet_template_1 = require("./cheat-sheet-template");
            exports.template = "\n" + loading_template_1.loadingTemplate + '\n<div id="_wrapper" class="wrapper" style="visibility:hidden">\n  ' + header_template_1.headerTemplate + '\n  <div id="_content" class="content">\n    <div id="_sideContent" class="sideContent">\n      ' + side_content_template_1.sideContentTemplate + '\n    </div><!-- .sideContent -->\n    <div id="_mainContent" class="mainContent">\n      ' + main_content_template_1.mainContentTemplate + "\n    </div><!-- .mainContent -->\n    " + float_window_template_1.floatWindowTemplate + "\n  </div>\n  " + dialog_template_1.dialogTemplate + "\n  " + tooltip_template_1.tooltipTemplate + "\n  " + room_info_template_1.roomInfoTemplate + "\n  " + member_edit_template_1.memberEditTemplate + "\n  " + member_addition_template_1.memberAdditionTemplate + "\n  " + cheat_sheet_template_1.cheatSheetTemplate + '\n <!-- start aleart -->\n <div id="_statusAlert" class="alertArea">\n  <div id="_statusAlertMessage" class="alert alertDanger"></div>\n </div>\n<!-- /start aleart -->\n</div>\n\n<div id="_hiddenIframe"></div>\n\n<div id="fb-root"></div>\n<div id="_audioList" style="display:none"></div>\n'
        }, {
            "./cheat-sheet-template": 118,
            "./dialog-template": 119,
            "./float-window-template": 120,
            "./header-template": 121,
            "./loading-template": 123,
            "./main-content-template": 124,
            "./member-addition-template": 125,
            "./member-edit-template": 126,
            "./room-info-template": 127,
            "./side-content-template": 128,
            "./tooltip-template": 129
        }
    ],
    123: [
        function(require, module, exports) {
            "use strict";
            exports.loadingTemplate = '\n<div id="_loader" class="loading">\n  <div class="loading__body">\n    <div class="loading__pieceTopLeft"></div>\n    <div class="loading__pieceTopRight"></div>\n    <div class="loading__pieceBottomRight"></div>\n    <div class="loading__pieceBottomLeft"></div>\n  </div>\n</div>'
        }, {}
    ],
    124: [
        function(require, module, exports) {
            "use strict";
            var chat_content_template_1 = require("./chat-content-template"),
                adTemplate = "free" === SERVICE_PLAN && ["zh-tw", "ja", "vi", "th", "es"].indexOf(LANGUAGE) > -1 ? "\n<!-- Ad Area -->\n<div class=\"promotionArea\">\n  <div class=\"promotionContent\">\n  <!-- ChatWorkRDAd -->\n    <div id='div-gpt-ad-1415949969404-1' style='width:300px;'></div>\n  </div>\n</div>\n<!-- /Ad Area -->\n" : "";
            exports.mainContentTemplate = '\n<!-- start main_content -->\n<h1 id="_roomTitle" class="contentHl mainContentHl"></h1>\n<!-- Chat Room Member Info -->\n<div id="_subRoomMemberArea" class="chatRoomMemberInfo">\n  <ul id="_subRoomMemberList" class="chatRoomMemberList" role="list">\n  </ul>\n  <div id="_openMemberDetail" class="_showDescription chatRoomMemberDetail chatRoomInfoBtn" role="button"\n       aria-label="' + L.chatroom_member_long + '">\n    <span class="chatRoomInfoBtnIcon icoFontUserList" aria-hidden="true"></span>\n    <p class="chatRoomInfoBtnLabel"></p>\n  </div>\n  <div id="_subEditMember" role="button" class="_showDescription chatRoomMemberEdit chatRoomInfoBtn"\n       aria-label="' + L.chatroom_btn_add_member_tooltip + '">\n    <span class="chatRoomInfoBtnIcon icoFontAddBtn" aria-hidden="true"></span>\n  </div>\n</div>\n<!-- /Chat Room Member Info -->\n<!-- Chat Room Menu -->\n<div class="chatRoomHeaderBtn btnGroup">\n  <div id="_chatFileAll" class="_button _showDescription btnLarge btnIconDouble" style="display:none"\n       aria-label="' + L.file + '">\n    <span class="icoFontFile icoSizeLarge"></span><span class="icoFontTriangleDown"></span>\n  </div>\n  <div id="_chatRoomSetting" class="_button _showDescription btnLarge btnIconDouble" style="display:none"\n       aria-label="' + L.chatroom_setting + '">\n    <span class="icoFontSetting icoSizeLarge"></span><span class="icoFontTriangleDown"></span>\n  </div>\n</div>\n<!-- /Chat Room Menu -->\n\n<div id="_chatContent" class="chatContent">\n\n  ' + chat_content_template_1.chatContentTemplate + '\n\n</div><!-- .chatContent -->\n\n<div id="_subContent" class="subContent">\n  <!-- start sub_content -->\n  <!-- Tab Navigation -->\n  <div id="_subContentArea" class="subContentArea">\n    <div id="_subContentAreaContent">\n      <!-- Chat Imfomation Area -->\n      <div class="subRoomInfomation">\n        <div id="_subRoomInfoArea" class="subContentSection">\n          <div id="_roomRequestArea" class="alert alertWarning" style="display:none"></div>\n          <div id="_subRoomInfoInner" class="subContentAreaInner">\n            <div id="_subEditRoomInfo" role="button" class="_showDescription _button btnNoPadding"\n                 aria-label="' + L.chatroom_info_edit + '" style="display:none">\n              <span class="icoFontActionEdit icoSizeLarge"></span>\n            </div>\n            <div id="_subRoomInfoTitle" class="chatroomTitle clearfix">\n              <img id="_subRoomIcon" class="avatar" src="' + S3_PATH + '/avatar/ico_avatar_loading.png"/>\n              <div class="chatroomTitleMeta">\n                <p id="_subRoomName"></p>\n              </div>\n            </div>\n            <div id="_subRoomProfileLinkArea" class="subRoomProfileLinkArea" style="display:none">\n              <div id="_subRoomProfileLink" class="_openProfile"><a>' + L.menu_profile_setting + '</a></div>\n            </div>\n            <div id="_subRoomDescriptionArea" class="subContentGroup" style="display:none">\n              <div id="_subRoomDescriptionWrapper" class="subRoomDescription">\n                <div id="_subRoomDescription" class="subRoomDescriptionInner"></div>\n              </div>\n            </div>\n            <div id="_subRoomJoinLinkArea" class="selected subRoomProfileLinkArea" style="display:none">\n              <a id="_subRoomJoinLink" class="subRoomProfileLinkAreaButton" target="_blank">' + L.invitelink + '<span\n               class="icoFontLinkBlank marginLeft"></span></a>\n            </div>\n          </div><!-- .subContentAreaInner -->\n        </div><!-- .subContentSection -->\n      </div><!-- .subRoomInfomation -->\n      <!-- /Chat Imfomation Area -->\n      <!-- Chat Task Area -->\n      <div class="subRoomTaskArea">\n        <div class="subContentLabel"><p>' + L.task + '<span id="_roomTaskNum"></span></p></div>\n        <div id="_subRoomTaskAddArea" class="subContentSection taskAddArea">\n          <div id="_taskAddArea" class="subContentAreaInner">\n            <div class="_taskDescriptionAddArea">\n              <div id="_taskDescriptionAdd" class="taskSendTextarea">\n                <textarea id="_taskNameInput" tabindex="3" placeholder="' + L.task_input_placeholder + '"></textarea>\n              </div>\n            </div>\n            <div id="_taskAddMeta" style="display:none">\n              <div id="_taskAssignAddArea" style="position:relative" class="taskAssignAddArea controlGroup">\n                <label class="controlLabel">' + L.task_inchargetip + '</label>\n                <div id="_taskAssignAdd" class="controlContent">\n                  <div id="_taskQuickWrapper">\n                    <div id="_assignBox" class="taskAssignBox"></div>\n                    <span id="_inchargeEmpty" class="emptyContent"\n                          style="display: none;">' + L.task_incharge_placeholder + '</span>\n                  </div>\n                  <div id="_assignButton" class="button btn24 btnNoPadding"><span\n                   class="icoFontAddBtn icoSizeLarge"></span><span class="icoTextHide">' + L.task_incharge + '</span></div>\n                </div>\n              </div>\n              <div id="_taskLimitAddArea" class="taskLimitAddArea controlGroup">\n                <label class="controlLabel">' + L.task_limittip + '</label>\n                <div id="_taskLimitAdd" class="controlContent">\n                  <div id="_limit" class="limitBox"></div>\n                  <span id="_limitEmpty" class="emptyContent" style="display: none;">' + L.task_limit_placeholder + '</span>\n                  <div id="_limitButton" role="button" aria-label="' + L.task_limit + '"\n                       class="_datePicker button btn24 btnNoPadding"><span class="icoFontCalender icoSizeLarge"></span>\n                  </div>\n                </div>\n              </div>\n              <div class="taskAddBtnArea">\n                <div id="_taskAddButton" role="button" tabindex="4" class="button btnPrimary cwTextUnselectable">\n                  ' + L.task_add_button + '\n                </div>\n                <div id="_taskCancelButton" role="button" tabindex="5" class="button cwTextUnselectable">\n                  ' + L.button_cancel + '\n                </div>\n              </div>\n            </div><!-- #_taskAddMeta -->\n          </div><!-- .taskContentArea -->\n        </div><!-- .taskAddArea -->\n        <div id="_subRoomMyTaskList" class="myListShow">\n          <input id="_subRoomMyTaskListShow" type="checkbox" checked="checked" style="display:none"/>\n        </div><!-- taskMyListShow -->\n        <div id="_subRoomTaskArea">\n          <ul id="_subRoomTaskList" class="subContentTask"></ul>\n        </div><!-- #_subRoomTaskArea -->\n      </div>\n      <!-- /Chat Task Area -->\n\n      ' + adTemplate + '\n\n    </div>\n  </div><!-- .subContentArea -->\n  <!-- end sub_content -->\n</div><!-- .subContent -->\n\n<!-- Live Notification -->\n<div id="_liveNotification" class="liveNotification" style="display: none">\n  <div class="liveNotificationHeader">' + L.live_invited + '</div>\n  <span id="_liveNotificationClose" class="linkIconStatus closeAction icoFontCancel"></span>\n  <div id="_liveNotificationMessage" class="liveNotificationMessage"></div>\n  <div class="liveNotificationLiveBtnArea">\n    <div id="_liveNotificationLiveButton" role="button" class="_joinLive button btnSuccess" data-live-id="">\n      <span class="icoFontVideoChat"></span>\n      <span>' + L.live_join + "</span>\n    </div>\n  </div>\n</div>\n<!-- /Live Notification -->\n<!-- end main_content -->\n"
        }, {
            "./chat-content-template": 117
        }
    ],
    125: [
        function(require, module, exports) {
            "use strict";
            exports.memberAdditionTemplate = '\n<div id="_memberAdditionMemberBox" class="roomMemberEditDialogContent" style="display:none">\n  <div class="controlContent">\n    <div class="controlContentBody memberTableSearch">\n      <input type="text" id="_memberAdditionContactFilter" class="_searchBox memberTableSearchForm" role="search" placeholder="' + L.chatroom_search_member + '">\n    </div><!-- /CONTACT LIST SEARCH -->\n    <div id="_memberAdditionContactTableBox" class="_contactTableBox controlContentBody memberTableSection roomContactListBox">\n      <div class="controlContentHeader clearfix">\n        <div class="memberTableFilter">\n          <div id="_memberAdditionSelectAllBtn" class="_button memberTableCheckAll">\n            <input type="checkbox" id="_memberAdditionSelectAllContact" class="_checkBox" data-label="' + L.checkall_full + '">\n          </div>\n          <ul id="_memberAdditionOrganizationFilter" class="organizationFilter" role="radiogroup">\n            <li>\n              <input type="radio" id="_memberAdditionOrgFilterSelectAll" value="all" name="__memberAddition_org_filter" checked="">\n              <label for="_memberAdditionOrgFilterSelectAll" data-delay="0">' + L.organization_filter_radio_all + '</label>\n            </li>\n            <li>\n              <input type="radio" id="_memberAdditionOrgFilterSelectOrganized" value="organized" name="__memberAddition_org_filter">\n              <label for="_memberAdditionOrgFilterSelectOrganized" data-delay="0">' + L.organization_filter_radio_organized + '</label>\n            </li>\n          </ul><!-- /ORGANIZED FILTER -->\n        </div>\n        <div id="_memberAdditionSelectRole" class="memberTableSelectRole"></div><!-- /ROLE SELECT -->\n      </div>\n      <div class="contactTableBox">\n        <table id="_memberAdditionContact" class="_memberTableContact memberTable"></table>\n      </div>\n      <div class="memberTableSectionFooter">\n        <p><a id="_memberAdditionMemberEdit">' + L.member_addition_edit_member_label + '</a></p>\n      </div>\n    </div><!-- /CONTACT LIST BOX -->\n    <div class="controlContentBody memberAdditionInvitationLinkSetting">\n      <div class="invitationLinkActivate">\n        <div class="invitationLinkActivateLabel">\n          <div class="invitationLinkActivateLabelCheckBox">\n            <input type="checkbox" id="_memberAdditionInvitationLinkSettingStatus" data-name="active_invitation_link" class="_checkBox" data-label="' + L.invitation_link + '" value="">\n          </div>\n          <p class="invitationLinkActivateLabelItem">\n            <a href="http://link.chat-work.com/h_invitation_link_' + ("ja" === LANGUAGE ? "ja" : "en") + '" class="_showDescription" aria-label="' + L.invitation_link_help_tool_tip + '" data-delay="0" target="_blank"><span class="icoFontHelp anchorIcon"></span></a>\n            <span> : </span>\n          </p>\n        </div>\n        <div class="invitationLinkActivateBody">\n          <div id="_memberAdditionInvitationLinkDisabled" class="invitationLinkDisabled">\n            <p class="invitationLinkDisabledBody">' + L.invitation_link_setting_status_disable + '</p>\n          </div><!-- INVITATION LINK DISABLED -->\n          <div id="_memberAdditionInvitationLinkActive" class="invitationLinkActive">\n            <div class="js_invitationLinkDisplay invitationLinkDisplay">\n              <div class="invitationLinkDisplayBody">\n                <div class="invitationLinkDisplayBodyItem">\n                  <input type="text" class="js_invitationLinkDisplayInput invitationLinkDisplayInput" readonly>\n                </div>\n                <div class="js_invitationLinkBtnCopy _button">' + L.invitation_link_code_copy + '</div>\n                <p class="js_invitationLinkOpenEditor invitationLinkDisplayBodyItem invitationLinkEditorDrawer">\n                  <span class="icoFontSetting icoSizeLarge"></span>\n                </p>\n              </div>\n            </div>\n            <div class="js_invitationLinkEditor">\n              <div class="invitationLinkEditorForm">\n                <p class="invitationLinkEditorBodyItem">\n                  <span class="js_invitationLinkURL"></span>\n                </p>\n                <input type="text" class="js_invitationLinkEditorInput" name="__cwform_link_code">\n                <div class="js_invitationLinkBtnEdited _button btnPrimary">' + L.button_complete + '</div>\n                <p class="js_invitationLinkCloseEditor invitationLinkEditorBodyItem invitationLinkEditorDrawer">\n                  <span class="icoFontCancel icoSizeLarge"></span>\n                </p>\n                <div class="invitationLinkEditorBodyItem">\n                  <img class="js_invitationLinkCodeLoading controlContentLoaderImg" src="./imagenew/all/common/loader/img_loader_gray.gif">\n                </div>\n                <div class="invitationLinkEditorAlert">\n                  <p class="invitationLinkEditorAlertItem"><span class="js_invitationLinkCodeUsed"></span></p>\n                </div>\n              </div>\n              <div class="invitationLinkEditorBody">\n                <input type="checkbox" id="_memberAdditionInvitationLinkJoinNeedAccept" name="__cwform_join_need_accept" data-label="' + L.invitation_link_setting_join_accept + '" value="send">\n              </div>\n            </div><!-- INVITATION LINK EDITOR -->\n          </div><!-- INVITATION LINK ACTIVE -->\n        </div><!-- INVITATION LINK ACTIVATE BODY -->\n      </div><!-- INVITATION LINK ACTIVATE -->\n    </div><!-- /INVITATION LINK SETTING -->\n  </div><!-- /CONTACT LIST SECTION -->\n  <input type="hidden" name="__cwform_public" id="_memberAdditionPublic" value="">\n</div><!-- /MEMBER ADDITION DIALOG -->\n'
        }, {}
    ],
    126: [
        function(require, module, exports) {
            "use strict";
            exports.memberEditTemplate = '\n<div id="_memberEditMemberBox" class="roomMemberEditDialogContent" style="display:none">\n  <div class="controlContent">\n    <div class="memberTableSearch">\n      <input type="text" id="_memberEditMemberFilter" class="_searchBox memberTableSearchForm" role="search" placeholder="' + L.chatroom_search_member + '">\n    </div><!-- /MEMBER SEARCH -->\n    <div class="memberTableSection">\n      <div id="_memberEditMemberTableBox" class="memberTableBox">\n        <table id="_memberEditMember" class="_memberTableMember memberTable"></table>\n      </div><!-- /MEMBER LIST BOX -->\n      <div class="memberTableSectionFooter">\n        <a id="_memberEditMemberAdd"><span class="icoFontAddBtn anchorIcon"></span>' + L.member_edit_add_member_label + '</a>\n      </div>\n    </div>\n  </div><!-- /MEMBER LIST SECTION -->\n  <div id="_memberEditMemberHidden"></div><!-- DATA STOCKER -->\n</div><!-- /MEMBER EDIT DIALOG -->\n'
        }, {}
    ],
    127: [
        function(require, module, exports) {
            "use strict";
            exports.roomInfoTemplate = '\n<div id="_roomInfoChatInfoBox" class="roomInfoChatInfoBox clearfix" style="display:none">\n  <div class="roomInfoIcon">\n    <img id="_roomInfoIconSelected" src="' + S3_PATH + '/icon/ico_group.png" class="roomInfoIconImage" alt="" />\n    <div id="_roomInfoIconFileUpload" class="roomInfoIconFileUpload">\n      <span class="ico35FileUpload"></span><p></p>\n    </div>\n    <div id="_roomIconSelectorBtn" class="groupchatIconEdit">' + L.menu_change + '</div>\n  </div> <!-- roomInfoIcon -->\n  <div class="roomInfoMeta">\n    <div class="roomInfoMetaContent clearfix">\n      <div class="controlLabel roomInfoMetaLabel">\n        <label for="_roomInfoName">' + L.chatroom_nametip + '</label>\n      </div>\n      <div class="roomInfoMetaInput">\n        <input type="text" name="__cwform_name" id="_roomInfoName" class="inputFull" />\n      </div>\n    </div><!-- /.roomInfoMetaContent -->\n    <div class="roomInfoMetaContent clearfix">\n      <div class="controlLabel roomInfoMetaLabel">\n        <label for="_roomInfoDescription">' + L.chatroom_desctip + '</label>\n      </div>\n      <div class="roomInfoMetaInput">\n        <textarea name="__cwform_description" id="_roomInfoDescription" class="roomInfoMetaTextarea" placeholder="' + L.chatroom_desc_explain + '"></textarea>\n      </div>\n    </div><!-- /.roomInfoMetaContent -->\n  </div><!-- /.roomInfoMeta -->\n  <!-- /SECTION CHATROOM INFO -->\n\n  <!-- Roominfo icon selector tooltip -->\n  <div id="_roomIconSelector" class="roomIconSelectorTip" style="display: none;">\n    <input type="hidden" name="__cwform_preset" id="_roomInfoIconSelectedValue" value="group">\n    <ul class="roomIconSelectorInput">\n      <li><input type="radio" id="_roomInfoIconTypePreset" class="_iconType roomInfoIconRadio" name="__cwform_icon_type" value="preset" checked="checked" /><label for="_roomInfoIconTypePreset">' + L.chatroom_icon_type_preset + '</label></li>\n      <li><input type="radio" id="_roomInfoIconTypeUpload" class="_iconType roomInfoIconRadio" name="__cwform_icon_type" value="upload" /><label for="_roomInfoIconTypeUpload">' + L.chatroom_icon_type_upload + '</label></li>\n    </ul>\n    <div id="_roomInfoIconDefault" class="roomInfoIconList">\n      <ul id="_roomInfoIconPreset">\n        <li><img src="' + S3_PATH + '/icon/ico_group.png" class="avatarSmall" alt="" data-pt="group" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_check.png" class="avatarSmall" alt="" data-pt="check" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_document.png" class="avatarSmall" alt="" data-pt="document" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_meeting.png" class="avatarSmall" alt="" data-pt="meeting" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_event.png" class="avatarSmall" alt="" data-pt="event" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_project.png" class="avatarSmall" alt="" data-pt="project" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_business.png" class="avatarSmall" alt="" data-pt="business" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_study.png" class="avatarSmall" alt="" data-pt="study" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_security.png" class="avatarSmall" alt="" data-pt="security" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_star.png" class="avatarSmall" alt="" data-pt="star" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_idea.png" class="avatarSmall" alt="" data-pt="idea" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_heart.png" class="avatarSmall" alt="" data-pt="heart" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_magcup.png" class="avatarSmall" alt="" data-pt="magcup" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_beer.png" class="avatarSmall" alt="" data-pt="beer" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_music.png" class="avatarSmall" alt="" data-pt="music" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_sports.png" class="avatarSmall" alt="" data-pt="sports" /></li>\n        <li><img src="' + S3_PATH + '/icon/ico_travel.png" class="avatarSmall" alt="" data-pt="travel" /></li>\n      </ul>\n    </div><!-- roomInfoIconList -->\n    <div id="_roomInfoIconUpload" class="roomInfoIconUpload">\n      <input type="file" id="_roomInfoIcon" class="_cwValidateFileImage" name="__cwform_icon" />\n      <p>' + L.profile_image_limit + '</p>\n    </div><!-- .roomInfoIconUpload -->\n  </div>\n  <!-- /Roominfo icon selector tooltip -->\n</div>\n\n<div id="_roomInfoMemberBox" class="roomMemberEditDialogContent" style="display:none">\n  <div class="controlContent">\n    <div class="controlContentBody memberTableSearch">\n      <input type="text" id="_roomInfoContactFilter" class="_searchBox memberTableSearchForm" role="search" placeholder="' + L.chatroom_search_member + '">\n    </div><!-- /CONTACT LIST SEARCH -->\n    <div id="_roomInfoContactTableBox" class="_contactTableBox controlContentBody memberTableSection roomContactListBox">\n      <div class="controlContentHeader clearfix">\n        <div class="memberTableFilter">\n          <div id="_roominfoSelectAllBtn" class="_button memberTableCheckAll">\n            <input type="checkbox" id="_roomInfoSelectAllContact" class="_checkBox" data-label="' + L.checkall_full + '">\n          </div>\n          <ul id="_roomInfoOrganizationFilter" class="organizationFilter" role="radiogroup">\n            <li>\n              <input type="radio" id="_roomInfoOrgFilterSelectAll" value="all" name="__roominfo_org_filter" checked="" />\n              <label for="_roomInfoOrgFilterSelectAll" data-delay="0">' + L.organization_filter_radio_all + '</label>\n            </li>\n            <li>\n              <input type="radio" id="_roomInfoOrgFilterSelectOrganized" value="organized" name="__roominfo_org_filter" />\n              <label for="_roomInfoOrgFilterSelectOrganized" data-delay="0">' + L.organization_filter_radio_organized + '</label>\n            </li>\n          </ul><!-- /ORGANIZATION FILTER -->\n        </div>\n        <div id="_roomInfoSelectRole" class="memberTableSelectRole"></div><!-- /ROLE SELECT -->\n      </div>\n      <div class="contactTableBox">\n        <table id="_roomInfoContact" class="_memberTableContact memberTable"></table>\n      </div>\n    </div> <!-- roomInfoMemberListBox -->\n    <!-- INVITATION LINK SETTING -->\n    <div class="controlContentBody addRoomInvitationLinkSetting">\n      <div class="invitationLinkActivate">\n        <div class="invitationLinkActivateLabel">\n          <div class="invitationLinkActivateLabelCheckBox">\n            <input type="checkbox" id="_addRoomInvitationLinkSettingStatus" data-name="active_invitation_link" class="_checkBox" data-label="' + L.invitation_link + '" value="">\n          </div>\n          <p class="invitationLinkActivateLabelItem">\n            <a href="http://link.chat-work.com/h_invitation_link_' + ("ja" === LANGUAGE ? "ja" : "en") + '" class="_showDescription" aria-label="' + L.invitation_link_help_tool_tip + '" data-delay="0" target="_blank"><span class="icoFontHelp anchorIcon"></span></a>\n            <span> : </span>\n          </p>\n        </div>\n        <div class="invitationLinkActivateBody">\n          <div id="_addRoomInvitationLinkDisabled" class="invitationLinkDisabled">\n            <p class="invitationLinkDisabledBody">' + L.invitation_link_setting_status_disable + '</p>\n          </div><!-- INVITATION LINK DISABLED -->\n          <div id="_addRoomInvitationLinkActive" class="invitationLinkActive">\n            <div class="js_invitationLinkDisplay invitationLinkDisplay">\n              <div class="invitationLinkDisplayBody">\n                <div class="invitationLinkDisplayBodyItem">\n                  <input type="text" class="js_invitationLinkDisplayInput invitationLinkDisplayInput" readonly>\n                </div>\n                <div class="js_invitationLinkBtnCopy _button">' + L.invitation_link_code_copy + '</div>\n                <p class="js_invitationLinkOpenEditor invitationLinkDisplayBodyItem invitationLinkEditorDrawer">\n                  <span class="icoFontSetting icoSizeLarge"></span>\n                </p>\n              </div>\n            </div>\n            <div class="js_invitationLinkEditor">\n              <div class="invitationLinkEditorForm">\n                <p class="invitationLinkEditorBodyItem">\n                  <span class="js_invitationLinkURL"></span>\n                </p>\n                <input type="text" class="js_invitationLinkEditorInput" name="__cwform_link_code">\n                <div class="js_invitationLinkBtnEdited _button btnPrimary">' + L.button_complete + '</div>\n                <p class="js_invitationLinkCloseEditor invitationLinkEditorBodyItem invitationLinkEditorDrawer">\n                  <span class="icoFontCancel icoSizeLarge"></span>\n                </p>\n                <div class="invitationLinkEditorBodyItem">\n                  <img class="js_invitationLinkCodeLoading controlContentLoaderImg" src="./imagenew/all/common/loader/img_loader_gray.gif">\n                </div>\n                <div class="invitationLinkEditorAlert">\n                  <p class="invitationLinkEditorAlertItem"><span class="js_invitationLinkCodeUsed"></span></p>\n                </div>\n              </div>\n              <div class="invitationLinkEditorBody">\n                <input type="checkbox" id="_addRoomInvitationLinkJoinNeedAccept" name="__cwform_join_need_accept" data-label="' + L.invitation_link_setting_join_accept + '" value="send">\n              </div>\n            </div><!-- INVITATION LINK EDITOR -->\n          </div><!-- INVITATION LINK ACTIVE -->\n        </div><!-- INVITATION LINK ACTIVATE BODY -->\n      </div><!-- INVITATION LINK ACTIVATE -->\n    </div><!-- /INVITATION LINK SETTING -->\n  </div>\n  <div id="_roomInfoMemberHidden"></div><!-- DATA STOCKER -->\n  <input type="hidden" name="__cwform_public" id="_roomInfoPublic" value="">\n</div><!-- /MEMBER BOX -->\n'
        }, {}
    ],
    128: [
        function(require, module, exports) {
            "use strict";
            exports.sideContentTemplate = '\n<div class="sideContentMenu">\n  <div id="_sideContentMenu__header" class="sideContentMenu__header">\n    <h2 id="_sideContentTitle"\n        class="sideContentMenu__title"\n    >\n      <span id="_sideContentTitleText">' + L.chat_menu_chatlist + '</span>\n    </h2>\n    <div id="_addButton"\n         class="sideContentMenu__addButton _button"\n         role="button"\n         aria-label="' + L.chatroom_create_title + "," + L.contact_add + '"\n    >\n        <span class="sideContentMenu__plusIcon icoFontAddBtn"></span>\n        <span class="sideContentMenu__triangleDownIcon icoFontTriangleDown"></span>\n    </div>\n  </div>\n\n  <div id="_chatFilterMenu"\n       class="chatFilterMenu"\n  >\n      <div id="_sideChatMoveMyChat"\n           class="chatFilterMenu__home _button"\n           role="button"\n           aria-label="' + L.menu_mychat_hint + '"\n      >\n          <span class="chatFilterMenu__homeIcon icoFontHome"></span>\n      </div>\n\n      <ul id="_chatFilterList"\n          class="chatFilterMenu__typeGroup"\n      >\n          <li id="_sideChatFilterUnread" aria-label="' + L.chat_filter_readonly + '">\n              <span class="chatFilterMenu__unreadIcon icoFontActionUnread"></span>\n              <p id="_chatUnreadStatus"\n                 class="chatFilterMenu__unreadCount"\n                 style="display: none;"\n              ></p>\n          </li>\n\n          <li id="_sideChatFilterTo" aria-label="' + L.chat_filter_toonly + '">\n              <span class="chatFilterMenu__mentionIcon icoFontTo"></span>\n              <p id="_chatToUnreadStatus"\n                 class="chatFilterMenu__mentionCount"\n                 style="display: none;"\n              ></p>\n          </li>\n\n          <li id="_sideChatFilterTask" aria-label="' + L.chat_filter_taskonly + '">\n              <span class="chatFilterMenu__taskIcon icoFontActionTask"></span>\n              <p id="_chatTaskStatus"\n                 class="chatFilterMenu__taskCount"\n                 style="display: none;"\n              ></p>\n          </li>\n      </ul>\n\n      <div id="_chatCategory"\n           class="chatFilterMenu__category _button"\n           role="button"\n           aria-label="' + L.chat_category_select + '"\n      >\n          <span class="chatFilterMenu__categoryIcon icoFontCategory"></span>\n      </div>\n  </div>\n\n  <div id="_roomListArea"\n       class="_overflow chatRoomListArea"\n  >\n    <div id="_categoryDisplay"\n         class="chatCategoryTitle"\n         style="display:none"\n    >\n      <span id="_categoryDisplayTitle"\n            class="categoryDisplayTitle"\n      ></span>\n      <span id="_categoryDisplayCancel"\n            class="icoFontCancel icoSizeLarge linkIconStatus categoryCancel"\n            role="button"\n            aria-label="' + L.button_cancel + '"\n      ></span>\n    </div>\n    <ul id="_roomListItems"\n        class="menuListTitle cwTextUnselectable"\n        role="list"\n    ></ul>\n\n    <div id="_chatListEmptyArea">\n        <div id="_chatListUnreadEmpty"\n             class="_chatListEmpty chatListEmptyArea"\n             style="display: none;"\n        >\n            <img src="./imagenew/common/empty/img_unread_empty.png" alt="">\n            <p>' + L.chat_filter_readonly_empty + '</p>\n        </div>\n\n        <div id="_chatListToEmpty"\n             class="_chatListEmpty chatListEmptyArea"\n             style="display: none;">\n            <img src="./imagenew/common/empty/img_to_empty.png" alt="">\n            <p>' + L.chat_filter_toonly_empty + '</p>\n        </div>\n\n        <div id="_chatListTaskEmpty"\n             class="_chatListEmpty chatListEmptyArea"\n             style="display: none;">\n            <img src="./imagenew/common/empty/img_side_task_empty.png" alt="">\n            <p>' + L.chat_filter_taskonly_empty + "</p>\n        </div>\n    </div><!-- /#_chatListEmptyArea -->\n  </div><!-- /#roomListArea -->\n</div>"
        }, {}
    ],
    129: [
        function(require, module, exports) {
            "use strict";
            var onBoardingTemplate = IS_BIWA_ONBOARDING_PHASE_1 ? '\n<div id="_tutorialStep" class="tutorialStep bobPhase1">\n <div class="tutorialContentArea">\n  <h3 id="_tutorialHeader" class="tutorialHeader"></h3>\n  <div id="_tutorialMessage"></div>\n </div>\n <div class="tooltipFooter">\n  <div id="_tutorialShowMovieButton" role="button">動画を見る</div>\n\n  <div id="tutorialMovieChat"    role="button" class="movie wistia_embed wistia_async_e37lim1y13 popover=true popoverContent=link autoplay=true"></div>\n  <div id="tutorialMovieMessage" role="button" class="movie wistia_embed wistia_async_0fr2n4mj6s popover=true popoverContent=link autoPlay=true"></div>\n  <div id="tutorialMovieTask"    role="button" class="movie wistia_embed wistia_async_vrawkswvzo popover=true popoverContent=link autoPlay=true"></div>\n  <div id="tutorialMovieContact" role="button" class="movie wistia_embed wistia_async_i6kxkml2qd popover=true popoverContent=link autoPlay=true"></div>\n\n  <div class="tutorialStepArea">\n   <div class="tutorialStepIndicator"> </div>\n   <a id="_tutorialNextButton" class="tutorialNextButton"><span class="label">' + L.button_next + '</span><span class="icoFontTriangleRight"></span></a>\n  </div>\n </div>\n</div>' : '\n<div id="_tutorialStep" class="tutorialStep">\n <div class="tutorialContentArea">\n  <div id="_tutorialMessage"></div>\n </div>\n <div class="tooltipFooter"><div id="_tutorialNextButton" role="button">' + L.button_next + "</div></div>\n</div>";
            exports.tooltipTemplate = '\n <!-- ここからエモーティコン用のツールチップ  -->\n <div id="_emoticonList" class="emoticonList" style="display: none;">\n  <ul id="_emoticonGallery" class="emoticonGallery clearfix"></ul>\n  <div id="_emoticonDescription" class="tooltipFooter"></div>\n </div><!-- #_emoticonList -->\n\n <div id="_quickReply" class="emoticonList" style="display: none;">\n  <ul id="_quickReplyGallery" class="emoticonGallery clearfix"></ul>\n  <div id="_quickReplyDescription" class="tooltipFooter"></div>\n </div><!-- #_quickReply -->\n\n <!-- ここからTO選択用のツールチップ  -->\n <div id="_toList" style="display: none;">\n  <div id="_toListFooter" class="tooltipFooter"><span id="_toListHint" style="display: none">' + L.chatsend_shift_multiselect + '</span><a id="_nickNameSetting">' + L.chatsend_nickname_setting + '</a></div>\n </div><!-- #_contactToList -->\n\n <div id="_joinLiveTip" style="display: none;">\n  <ul>\n   <li class="_joinLiveByVideo">' + L.live_video + '</li>\n   <li class="_joinLiveByVoice">' + L.live_voice + '</li>\n  </ul>\n </div>\n\n <!-- ここからタスクメンバー選択用のツールチップ  -->\n <div id="_taskAssignList" class="toolTiptaskAssignList" style="display: none;">\n </div><!-- #_taskAssignList -->\n\n <div id="_taskAssignQuickList" style="display: none"><div id="_assignQuickBox" class="taskAssignQuickBox cwNoWrap"></div></div>\n\n <!-- ここからタスクメンバー選択用のツールチップ  -->\n <div id="_taskEditList" style="display: none;">\n </div><!-- #_taskAssignList -->\n\n<!-- ここからファイルのドラッグ＆ドロップ用ツールチップ -->\n<div id="_fileDrop" class="fileDropTooltip" style="display: none;">\n <div id="_dropZone" class="fileDropZone">\n  <p>' + L.file_drop_area + '</p>\n </div>\n</div><!-- #_fileDrop -->\n\n<!-- ここからクリップボード画像の貼り付けツールチップ -->\n<div id="_imageFileDrop" class="fileDropTooltip" style="display: none;">\n  <div class="imageDropHeader">\n    <p class="imageDropTooltipTitle">' + L.imagedrop_tooltip_title + '</p>\n    <div id="_imageFileDropClose" role="button" class="imageFileDropClose _showDescription _button btnNoPadding" aria-label="' + L.button_close + '">\n      <span class="icoFontCancel icoSizeLarge"></span>\n     </div>\n  </div>\n  <div id="_imageDropZone" class="imageFileDropZone"></div>\n  <div class="imageDropFooter">\n    <span class="imageDropFooterText">' + L.imagedrop_tooltip_change_filename + '</span>\n    <input type="text" id="_imageDropFileNameInput" class="imageDropFileNameInput">\n    <span class="imageDropFooterText">.png</span>\n    <div id="_imageDropSendButton" role="button" class="button btnPrimary" aria-label="' + L.button_send + '">' + L.button_send + '</div>\n  </div>\n</div><!-- #_imageFileDrop -->\n\n<!-- ファイルの送信用補助レイヤ -->\n<div id="_dragZone" class="blackBackground" style="display: none;"></div>\n\n\n<!-- チュートリアル用 -->\n<div id="_expose" class="blackBackground" style="display: none;"></div>\n\n' + onBoardingTemplate + '\n\n<div id="_fileUploadTip" style="padding:20px; display: none;">\n <div style="width:350px;height:27px;text-align: center">\n  <form id="_fileHiddenForm" method="POST" enctype="multipart/form-data" action="' + S3_PATH + '" target="form_upload">\n   <div id="_fileHiddenValue"></div>\n   <input id="_fileInput" type="file" name="file" multiple="multiple"/>\n  </form>\n  <div id="_fileUploadSending" style="display: none"><img src="./imagenew/all/common/loader/img_loader_white.gif" alt="Loading" /></div>\n </div>\n</div>\n\n<!-- ここからカテゴリ用ツールチップ -->\n<div id="_chatCategoryList" style="display: none;">\n <div class="chatCategoryListArea">\n  <ul id="_chatCagegoryUserList" class="chatCategoryList"></ul>\n  <ul id="_chatCagegorySystemList" class="chatCategoryList">\n   <li class="_chatCategoryItem" data-cat-id="contact"><span class="_categoryName">' + L.directchat + '</span></li>\n   <li class="_chatCategoryItem" data-cat-id="group"><span class="_categoryName">' + L.groupchat + '</span></li>\n  </ul>\n </div>\n <div id="_chatCategoryAdd" class="tooltipFooter linkStatus"><span class="icoSizeLarge icoFontAddBtn"></span>' + L.chat_category_create + '</div>\n</div><!-- .toolTipCategory -->\n<!-- end side_content_tooltip -->\n\n <!-- ここからタスクメンバー選択用のツールチップ  -->\n <div id="_speakerTip" class="speakerTip" style="display:none">\n </div><!-- #_allMemberTip -->\n\n<!-- ここから引用用のツールチップ -->\n<div id="_quoteTip" class="quoteTip" style="display:none">\n <ul class="btnNavList">\n  <li id="_quotePartlyToMessage" role="button" class="button btn24 btnLarge">' + L.chat_partial_quote_message + '</li>\n  <li id="_quotePartlyToTask" role="button" class="button btn24 btnLarge">' + L.chat_partial_quote_task + '</li>\n </ul>\n</div>\n\n<!-- ここからメンバーのmore表示用チップ -->\n<div id="_showMoreMemberTip" style="display:none"></div>\n\n<!-- ここからタスク担当のメンバーのmore表示用チップ -->\n<div id="_showMoreAssignMemberTip" style="display:none"></div>\n\n<!-- ここからプロフィール表示用ツールチップ -->\n<div id="_profileTip"  class="speakerProfileTooltipArea" style="display: none;"></div>\n\n<!-- ホバー用ツールチップ -->\n<div id="_nameTip" style="display:none">\n <p id="_nameTipContent"></p>\n</div>\n\n<!-- 返信ツールチップ -->\n<div id="_replyMessageTip" style="display:none;">\n <p id="_replyMessageTipContent" class="replyMessageTooltipContent"></p>\n <div id="_replyMessageButtonArea"></div>\n</div>\n\n<!-- チャットファイルツールチップ -->\n<div id="_chatFileListTip" class="chatFileListTip" style="display: none;"></div>\n\n<!-- ファイルツールチップ詳細 -->\n<div id="_chatFileDetailTip" class="chatFileDetailTip" style="display: none;">\n <div class="_fileDetailPreview filePreviewArea"></div>\n <div class="fileInfoArea controlGroup">\n  <label class="controlLabel">' + L.file_name + '</label>\n  <div class="_fileDetailName controlContent autotrim"></div>\n  <label class="controlLabel">' + L.file_size + ':</label>\n  <div class="_fileDetailSize controlContent autotrim"></div>\n  <label class="controlLabel">' + L.file_upload_by + ':</label>\n  <div class="_fileDetailUploadBy controlContent autotrim"></div>\n  <label class="controlLabel">' + L.file_upload_datetime + ':</label>\n  <div class="_fileDetailUploadDate controlContent autotrim"></div>\n  <label class="controlLabel">' + L.chat + ':</label>\n  <div class="controlContent autotrim"><a class="_fileDetailChat _roomLink"></a></div>\n </div>\n</div>\n\n<div id="_profileAvatarUpload" class="profileAvatarUpload" style="display: none;">\n <form id="_profileAvatarForm" method="POST" enctype="multipart/form-data" action="./gateway.php?cmd=edit_profile_avatar_image&amp;_f=1&amp;myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '" target="_profileAvatarFrame">\n  <div class="profileAvatarUploadInner">\n   <span id="_profileAvatarImage"></span>\n   <div class="profileAvatarUploadInputArea">\n    <select id="_profileAvatarUploadType">\n     <option value=""> - ' + L.button_change_long + '</option>\n     <option value="upload">' + L.chatroom_icon_type_upload + '</option>\n    </select>\n    <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Avatar">\n     <span id="_profilePrivacyAvatar" class="icoFontPublic _privacyIcon" data-name="avatar_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n    </div>\n    <div id="_profileAvatarUploadInput" class="profileAvatarUploadInput"></div>\n   </div>\n  </div>\n  <div class="tooltipFooter">\n   <div id="_profileAvatarSubmit" class="_button btnPrimary">' + L.button_save_long + '</div>\n   <div id="_profileAvatarCancel" class="_button">' + L.button_cancel + '</div>\n  </div>\n  <input type="hidden" id="_profileAvatarPrivacyHidden" name="avatar_priv" />\n </form>\n</div>\n\n<div id="_profileCoverUpload" class="profileCoverUpload" style="display: none;">\n <form id="_profileCoverForm" method="POST" enctype="multipart/form-data" action="./gateway.php?cmd=edit_profile_cover_image&amp;_f=1&amp;myid=' + MYID + "&amp;_v=" + CLIENT_VER + "&amp;_t=" + ACCESS_TOKEN + '" target="_profileCoverFrame">\n  <div class="profileCoverUploadInner">\n   <div id="_profileCoverImage" class="profileCoverImageArea"></div>\n   <img src="./imagenew/all/common/profile/img_cover_size.png" alt="カバー画像のサイズは幅800px、縦250pxです" />\n   <div id="_profileCoverUploadInput" class="profileCoverUploadInput">\n    <input type="file" name="__cwform_cover_upload_file" class="_cwValidateFileImage" />\n    <p>' + L.profile_image_limit + '</p>\n   </div>\n   <div class="profilePrivacysetting _profilePrivacyBox linkIconStatus" data-key="Cover">\n    <span id="_profilePrivacyCover" class="icoFontPublic _privacyIcon" data-name="cover_priv" data-value="public"></span><span class="icoFontTriangleDown"></span>\n   </div>\n  </div><!-- .profileCoverUploadInner -->\n  <div class="tooltipFooter">\n   <div id="_profileCoverSubmit" class="_button btnPrimary">' + L.button_save_long + '</div>\n   <div id="_profileCoverCancel" class="_button">' + L.button_cancel + '</div>\n  </div>\n  <input type="hidden" id="_profileCoverPrivacyHidden" name="cover_priv" />\n </form>\n</div>\n'
        }, {}
    ],
    130: [
        function(require, module, exports) {
            "use strict";

            function AccountView(model) {
                var self = this,
                    show_limit_contact_base = {
                        contact: 80,
                        myrequest: 80,
                        request: 80,
                        norequest: 80
                    }, show_limit_contact = {};
                for (var idx in show_limit_contact_base) show_limit_contact[idx] = show_limit_contact_base[idx];
                self.model = model, self.tab_type = "invitemail", self.contact_dialog_shown = !1, self.checked_email_dat = {}, self.noexist_email_dat = {}, self.inviteEmailView = new InviteMailAccountView_1.InviteMailAccountView, self.prepare = function() {
                    function isDoubleClick(button) {
                        return button.data("_requestContact_doubleClick")
                    }

                    function disableDoubleClick(button) {
                        button.data("_requestContact_doubleClick", setTimeout(function() {
                            button.removeData("_requestContact_doubleClick")
                        }, 3e3))
                    }
                    boot_1.CW.view.registerKeyboardShortcut(67, !1, !1, !1, !1, function() {
                        self.openContactWindow()
                    }), $("#_openContactWindow").click(function() {
                        self.openContactWindow(), boot_1.AL.trackEvent("contact_list", "click", {
                            label: "contact_list_navigation"
                        })
                    });
                    var nametip = $("#_nameTip").cwToolTip({
                        theme: "black",
                        noAnimation: !0
                    });
                    self.inviteEmailView.prepare(), $C("#_wrapper").on("mouseover", "._avatarHoverTip", function() {
                        var img = $(this);
                        $C("#_nameTipContent").text(boot_1.AC.getName(img.attr("data-aid"))), nametip.open(img)
                    }).on("mouseout", "._avatarHoverTip", function() {
                        nametip.close()
                    }).on("click", "._avatarClickTip", function() {
                        var tipFrom = $(this),
                            account_id = tipFrom.attr("data-aid");
                        self.openProfileTip(account_id, tipFrom)
                    }).on("click", "._speakerName", function() {
                        return $(this).closest("._message").find("._speaker ._avatarClickTip").click(), !1
                    }).on("click", "._skypeCall", function() {
                        var skype_id = $(this).attr("data-skype-id");
                        document.location.href = "skype:" + skype_id + "?call"
                    }).on("click", "._openProfile", function() {
                        var aid = $(this).attr("data-aid");
                        aid && self.openProfileWindow(aid)
                    }).on("click", "._profileEdit", function() {
                        self.openProfileEditWindow()
                    }).on("click", "._requestContact", function() {
                        var button = $(this);
                        if (!isDoubleClick(button)) {
                            disableDoubleClick(button);
                            var aid = button.attr("data-aid"),
                                aid_list = [aid];
                            self.requestContact(aid_list, button.cwButton())
                        }
                    }).on("click", "._cancelMyRequest", function() {
                        var button = $(this);
                        if (!isDoubleClick(button)) {
                            disableDoubleClick(button);
                            var aid = button.closest("._contactPanel").attr("data-aid"),
                                button_wg = button.cwButton();
                            button_wg.disable(), boot_1.CW.post("gateway.php", {
                                cmd: "cancel_contact_request",
                                aid: aid
                            }, function() {
                                boot_1.CW.watch()
                            }, function(error_message) {
                                boot_1.CW.alert(error_message), button_wg.enable()
                            })
                        }
                    }).on("click", "._acceptContactRequest", function() {
                        var button = $(this);
                        if (!isDoubleClick(button)) {
                            disableDoubleClick(button);
                            var aid = button.attr("data-aid"),
                                button_wg = button.cwButton();
                            button_wg.disable(), boot_1.CW.post("gateway.php", {
                                cmd: "accept_contact_request",
                                a: [aid]
                            }, function(json) {
                                if (void 0 != json.error) {
                                    var title = L.contact_error_cantadd,
                                        message = L.contact_error_planlimit;
                                    message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message), button_wg.enable()
                                } else boot_1.CW.watch()
                            }, function(error_message) {
                                boot_1.CW.alert(error_message), button_wg.enable()
                            })
                        }
                    }).on("click", "._rejectContactRequest", function() {
                        var button = $(this);
                        if (!isDoubleClick(button)) {
                            disableDoubleClick(button);
                            var aid = button.attr("data-aid"),
                                button_wg = button.cwButton();
                            button_wg.disable(), boot_1.CW.confirm(L.contact_confirm_reject_request.replace(/%%name%%/, boot_1.AC.getName(aid)), function() {
                                boot_1.CW.post("gateway.php", {
                                    cmd: "reject_contact_request",
                                    aid: aid
                                }, function() {
                                    boot_1.CW.watch()
                                }, function(error_message) {
                                    boot_1.CW.alert(error_message), button_wg.enable()
                                })
                            }, function() {
                                button_wg.enable()
                            })
                        }
                    }).on("click", "._deleteContact", function() {
                        var button = $(this);
                        if (!isDoubleClick(button)) {
                            disableDoubleClick(button);
                            var aid = button.closest("._contactPanel").attr("data-aid"),
                                button_wg = button.cwButton();
                            button_wg.disable(), boot_1.CW.view.confirmDelete(L.contact_confirm_delete.replace(/%%name%%/, boot_1.AC.getName(aid)), function() {
                                boot_1.CW.post("gateway.php", {
                                    cmd: "delete_contact",
                                    aid: aid
                                }, function() {
                                    boot_1.CW.watch()
                                }, function(error_message) {
                                    boot_1.CW.alert(error_message), button_wg.enable()
                                })
                            }, function() {
                                button_wg.enable()
                            })
                        }
                    }).on("click", "#_addNoContactMember", function() {
                        if (!isDoubleClick($(this))) {
                            disableDoubleClick($(this));
                            var button = $(this).cwButton(),
                                room_id = button.$el.attr("data-rid"),
                                room = boot_1.RL.rooms[room_id];
                            if (room) {
                                var aid_list = [];
                                for (var aid in room.member_dat) boot_1.AC.isContact(aid) || aid_list.push(aid);
                                aid_list.length > 0 && self.requestContact(aid_list, button)
                            }
                        }
                    }), $("#_myProfile").click(function() {
                        self.openProfileWindow(boot_1.AC.myid)
                    }), $(".cw_user_add_desc").click(function() {
                        boot_1.CW.view.showUserAdmin()
                    })
                };
                var is_prepared_edit_profile = !1;
                self.prepareEditProfile = function() {
                    if (!is_prepared_edit_profile) {
                        is_prepared_edit_profile = !0;
                        var avatar_upload_tip = $("#_profileAvatarUpload").cwToolTip();
                        $("#_profileAvatarUploadType").cwSelectBox({
                            parentFloatBox: avatar_upload_tip.$el,
                            update: function(value) {
                                switch (value) {
                                    case "upload":
                                        $("#_profileAvatarUploadInput").html('<input type="file" name="__cwform_avatar_upload_file" class="_cwValidateFileImage" /><div>' + L.profile_image_limit + "</div>");
                                        break;
                                    default:
                                        $C("#_profileAvatarUploadInput").quickEmpty()
                                }
                            }
                        }), $("#_profileEditAvatarControl").click(function() {
                            avatar_upload_tip.open($(this))
                        }), $("#_profileAvatarSubmit").click(function() {
                            $("#_profileAvatarForm").submit()
                        }), $("#_profileAvatarCancel").click(function() {
                            avatar_upload_tip.close()
                        }), $("#_profileAvatarForm").submit(function() {
                            $("#_profileAvatarPrivacyHidden").val(String($("#_profilePrivacyAvatar").attr("data-value"))), avatar_upload_tip.close(), boot_1.CW.showProgress(L.saving)
                        }), boot_1.CW.view.onIframeReady(function() {
                            $("#_profileAvatarFrame").load(function() {
                                boot_1.CW.hideProgress();
                                var content = common_1.unescape_html($(this).contents().find("body").html());
                                if (content.length > 0) {
                                    content = content.match(/\{.+\}/)[0];
                                    var json_raw = $.parseJSON(content);
                                    json_raw.status.success ? boot_1.CW.watch() : boot_1.CW.alert(L.raise_error)
                                }
                            })
                        });
                        var cover_upload_tip = $("#_profileCoverUpload").cwToolTip();
                        $("#_profileEditCoverControl").click(function() {
                            cover_upload_tip.open($(this))
                        }), $("#_profileCoverSubmit").click(function() {
                            $("#_profileCoverForm").submit()
                        }), $("#_profileCoverCancel").click(function() {
                            cover_upload_tip.close()
                        }), $("#_profileCoverForm").submit(function() {
                            $("#_profileCoverPrivacyHidden").val(String($("#_profilePrivacyCover").attr("data-value"))), cover_upload_tip.close(), boot_1.CW.showProgress(L.saving)
                        }), boot_1.CW.view.onIframeReady(function() {
                            $("#_profileCoverFrame").load(function() {
                                boot_1.CW.hideProgress();
                                var content = common_1.unescape_html($(this).contents().find("body").html());
                                if (content.length > 0) {
                                    content = content.match(/\{.+\}/)[0];
                                    var json_raw = $.parseJSON(content);
                                    json_raw.status.success ? boot_1.CW.watch() : boot_1.CW.alert(L.raise_error)
                                }
                            })
                        });
                        var privacy_list = [{
                            value: "public",
                            label: '<span class="icoFontPublic"></span> ' + L.profile_setting_privacy_public
                        }, {
                            value: "contact",
                            label: '<span class="icoFontContact"></span> ' + L.profile_setting_privacy_contact
                        }];
                        $("#_profileEditContent").on("click", "._profilePrivacyBox", function() {
                            var box = $(this),
                                pvdrop_selected = box.attr("data-key");
                            $.cwDropDown.isInit(this) || $(this).cwDropDown({
                                offsetLeft: 2,
                                useHtmlLabel: !0,
                                list: privacy_list,
                                select: function(value) {
                                    self.setPrivacySettingIcon(pvdrop_selected, value), this.close()
                                }
                            }).open()
                        }), $("#_profileAvatarUpload").on("click", "._profilePrivacyBox", function() {
                            var box = $(this),
                                pvdrop_selected = box.attr("data-key");
                            $.cwDropDown.isInit(this) || $(this).cwDropDown({
                                parentFloatBox: avatar_upload_tip.$el,
                                useHtmlLabel: !0,
                                offsetLeft: 2,
                                list: privacy_list,
                                select: function(value) {
                                    self.setPrivacySettingIcon(pvdrop_selected, value), this.close()
                                }
                            }).open()
                        }), $("#_profileCoverUpload").on("click", "._profilePrivacyBox", function() {
                            var box = $(this),
                                pvdrop_selected = box.attr("data-key");
                            $.cwDropDown.isInit(this) || $(this).cwDropDown({
                                parentFloatBox: cover_upload_tip.$el,
                                offsetLeft: 2,
                                useHtmlLabel: !0,
                                list: privacy_list,
                                select: function(value) {
                                    self.setPrivacySettingIcon(pvdrop_selected, value), this.close()
                                }
                            }).open()
                        }), boot_1.CW.is_business && $("#_profileInputOrgName").click(function() {
                            $("#_profileSelectOrgnameTypeIndividual").click()
                        }), $("#_profileInputChatWorkId").keyup(function() {
                            self.checkCWID($(this).val())
                        }).blur(function() {
                            self.checkCWID($(this).val())
                        })
                    }
                };
                var last_checked_cwid = "",
                    type_timer = null;
                self.checkCWID = function(cwid_base) {
                    var cwid = cwid_base.trim();
                    if (cwid != last_checked_cwid) {
                        if (last_checked_cwid = cwid, type_timer && (clearTimeout(type_timer), type_timer = null), boot_1.AC.getChatWorkId(boot_1.AC.myid) == cwid) return $("#_profileCWIDLoading").hide(), $("#_profileCWIDStatus").text(""), void(self.is_valid_cwid = !0);
                        if (!cwid) return $("#_profileCWIDLoading").hide(), void $("#_profileCWIDStatus").text("");
                        if (cwid.length > 50) return $("#_profileCWIDLoading").hide(), $("#_profileCWIDStatus").text(L.error_maxlength.replace("%%length%%", 50)).css("color", "red"), void(self.is_valid_cwid = !1);
                        if (!cwid.match(/^[-_a-zA-Z0-9]+$/)) return $("#_profileCWIDLoading").hide(), $("#_profileCWIDStatus").text(L.error_invalidchar).css("color", "red"), void(self.is_valid_cwid = !1);
                        $("#_profileCWIDLoading").show(), $("#_profileCWIDStatus").text(""), type_timer = setTimeout(function() {
                            $("#_profileCWIDLoading").show(), boot_1.CW.get("gateway.php", {
                                cmd: "check_chatwork_id",
                                cwid: cwid
                            }, function(json) {
                                $("#_profileCWIDLoading").hide(), json.used ? ($("#_profileCWIDStatus").text(L.error_already_used).css("color", "red"), self.is_valid_cwid = !1) : ($("#_profileCWIDStatus").text(L.available).css("color", "green"), self.is_valid_cwid = !0)
                            })
                        }, 1e3)
                    }
                }, self.deleteContact = function(aid) {
                    boot_1.CW.view.confirmDelete(L.contact_confirm_delete.replace(/%%name%%/, boot_1.AC.getName(aid)), function() {
                        boot_1.CW.post("gateway.php", {
                            cmd: "delete_contact",
                            aid: aid
                        }, function() {
                            boot_1.CW.watch()
                        })
                    })
                }, self.updateAvatar = function(aid_list) {
                    for (var i in aid_list) $("._avatarAid" + aid_list[i]).each(function() {
                        this.src = boot_1.CW.getAvatarPanel(aid_list[i], {
                            src: !0
                        })
                    })
                }, self.updateCover = function(aid_list) {
                    for (var i in aid_list) $("._coverAid" + aid_list[i]).each(function() {
                        this.src = boot_1.CW.getCoverPanel(aid_list[i], {
                            src: !0
                        })
                    })
                }, self.updateName = function(aid_list) {
                    for (var i in aid_list) $("._nameAid" + aid_list[i]).each(function() {
                        $(this).text(boot_1.AC.getName(aid_list[i]))
                    }), $(".cw_onm" + aid_list[i]).each(function() {
                        $(this).text(boot_1.AC.getOrgName(aid_list[i]))
                    }), $(".cw_cwid" + aid_list[i]).each(function() {
                        $(this).text(boot_1.AC.getChatWorkId(aid_list[i]))
                    })
                }, self.showAddContactMessage = function(success_list) {
                    var message_list = [];
                    for (var idx in success_list) switch (success_list[idx]) {
                        case "request_contact":
                            message_list.push(L.contact_myrequest);
                            break;
                        case "invite_contact":
                            message_list.push(L.contact_invite)
                    }
                    message_list && boot_1.CW.alert(message_list.join(L.word_separator) + L.contact_is_completed)
                }, self.showChatWorkIdRequestDialog = function(account_dat) {
                    var aid = account_dat.aid;
                    self.openProfileWindow(aid)
                }, self.getNoRequestDat = function(room_id) {
                    var account_dat = {}, rooms_dat = {};
                    boot_1.RL.rooms[room_id] ? rooms_dat[room_id] = boot_1.RL.rooms[room_id] : rooms_dat = boot_1.RL.rooms;
                    for (var rid in rooms_dat) {
                        var room = boot_1.RL.rooms[rid];
                        for (var aid in room.member_dat) self.model.myid == aid || self.model.isContact(aid) || self.model.myrequest_dat[aid] || (account_dat[aid] = self.model.account_dat[aid])
                    }
                    return account_dat
                }, self.buildMyStatus = function() {
                    var myicon = boot_1.CW.getAvatarPanel(self.model.myid, {
                        size: "small",
                        hovertip: !1,
                        clicktip: !1
                    });
                    $("#_myStatusIcon").html(myicon), $("#_myStatusName").html(boot_1.CW.getName(self.model.myid) + '<span class="openAction icoFontTriangleDown"></span>'), boot_1.CW.view.endInitLoad()
                }, self.buildMyContact = function() {
                    self.buildContactWindow()
                };
                var profiletip = null;
                self.openProfileTip = function(account_id, tip_from) {
                    profiletip || (profiletip = $("#_profileTip").cwToolTip({
                        open: function() {
                            this.$el.html(self.getContactPanel(this.data.account_id))
                        }
                    }), profiletip.$el.on("click", "._moveButton", function() {
                        profiletip.close()
                    })), profiletip.data.account_id = account_id, profiletip.open(tip_from)
                };
                var profile_window = null;
                self.openProfileWindow = function(account_id) {
                    null === profile_window && (profile_window = $("#_profileContent").cwDialog({
                        width: 815,
                        open: function(aid) {
                            self.assignDetailInfo(this.$el, aid), this.setOption({
                                title: boot_1.AC.getName(aid)
                            })
                        },
                        openCallback: function() {
                            this.$el.scrollTop(0)
                        }
                    }), profile_window.$el.on("click", "._moveButton", function() {
                        profile_window.close()
                    })), profile_window.open(account_id)
                }, self.closeProfileWindow = function() {
                    profile_window.close()
                }, self.openProfileEditWindow = function() {
                    self.prepareEditProfile();
                    var account_id = boot_1.AC.myid;
                    $("#_profileEditContent").cwDialog({
                        title: boot_1.AC.getName(account_id),
                        width: 815,
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    var error_list = [],
                                        name = $("#_profileInputName").val().trim();
                                    $("#_profileInputName").val(name), name || error_list.push(L.profile_error_no_displayname);
                                    var cwid = $("#_profileInputChatWorkId").val().trim();
                                    if ($("#_profileInputChatWorkId").val(cwid), cwid && (self.is_valid_cwid || error_list.push(L.profile_error_invalid_cwid)), error_list.length) boot_1.CW.alert(error_list.join("\n"));
                                    else {
                                        var sparam = {
                                            cmd: "send_profile_setting"
                                        }, content = $("#_profileEditContent");
                                        content.find("[data-name]").each(function() {
                                            var item = $(this),
                                                data_val = item.attr("data-value");
                                            if (void 0 == data_val && (data_val = item.val()), $.cwCheckBox.isInit(this)) {
                                                var check = item.cwCheckBox();
                                                check.isChecked() && (sparam[check.$el.attr("data-name")] = check.getVal())
                                            } else "radio" == item.attr("type") ? item[0].checked && (sparam[item.attr("data-name")] = data_val) : sparam[item.attr("data-name")] = data_val
                                        }), void 0 == sparam.allow_search && (sparam.allow_search = "0"), boot_1.CW.post("gateway.php", sparam, function(json) {
                                            var map = {
                                                name: "nm",
                                                orgname: "onm",
                                                department: "dp",
                                                title: "tt",
                                                cwid: "cwid",
                                                skype: "sp",
                                                twitter: "tw",
                                                facebook: "fb",
                                                address: "ad",
                                                email: "mail",
                                                introduction: "intro",
                                                tel_extension: "etel",
                                                tel_mobile: "mtel",
                                                tel_organization: "otel",
                                                url: "url"
                                            }, account_dat = {}, priv_key = "";
                                            for (var mkey in map) json[mkey] && (account_dat[map[mkey]] = json[mkey]), priv_key = mkey + "_priv", json[priv_key] && (account_dat[map[mkey] + "_priv"] = json[priv_key]);
                                            boot_1.AC.setAccountDat(boot_1.AC.myid, account_dat), self.assignDetailInfo(profile_window.$el, boot_1.AC.myid), profile_window.setOption({
                                                title: boot_1.AC.getName(boot_1.AC.myid)
                                            }), void 0 != json.allow_search && (boot_1.ST.data.allow_search = parseInt(json.allow_search, 10)), boot_1.CW.watch()
                                        }, function() {
                                            boot_1.CW.alert(L.raise_error)
                                        }), this.close()
                                    }
                            }
                        },
                        open: function() {
                            self.closeProfileWindow(), boot_1.CW.is_business ? (boot_1.CW.is_admin && $("#_profileCommonOrgNameLink").show(), $("#_profileEditOrgNameLoading").show(), boot_1.CW.post("gateway.php", {
                                cmd: "get_common_organizatin_info"
                            }, function(json) {
                                $("#_profileEditOrgNameLoading").hide(), "" !== json.onm ? ($("#_profileEditOrgName ._profileSelectOrgNameType").show(), $("#_profileSelectOrgnameTypeCommonLabel").text(json.onm)) : $("#_profileEditOrgName ._profileSelectOrgNameType").hide(), json.use_common ? ($("#_profileSelectOrgnameTypeCommon").prop("checked", !0), $("#_profileInputOrgName").val("")) : ($("#_profileSelectOrgnameTypeIndividual").prop("checked", !0), $("#_profileInputOrgName").val(boot_1.AC.getOrgName(account_id)))
                            })) : $("#_profileInputOrgName").val(boot_1.AC.getOrgName(account_id)), $("#_profileEditAvatar").html(boot_1.CW.getAvatarPanel(account_id, {
                                size: "huge",
                                clicktip: !1,
                                hovertip: !1
                            })), $("#_profileEditCover").html(boot_1.CW.getCoverPanel(account_id)), $("#_profileAvatarImage").html(boot_1.CW.getAvatarPanel(account_id, {
                                size: "large",
                                clicktip: !1,
                                hovertip: !1
                            })), $("#_profileCoverImage").html(boot_1.CW.getCoverPanel(account_id)), $("#_profileInputName").val(boot_1.AC.getName(account_id)), "1" == boot_1.ST.data.allow_search ? $("#_profileAllowSearch").cwCheckBox().check() : $("#_profileAllowSearch").cwCheckBox().unCheck(), $("#_profileInputChatWorkId").val(boot_1.AC.getChatWorkId(account_id)), $("#_profileInputIntroduction").val(boot_1.AC.getIntroduction(account_id)), $("#_profileInputFacebook").val(boot_1.AC.getFacebook(account_id)), $("#_profileInputTwitter").val(boot_1.AC.getTwitter(account_id)), $("#_profileInputSkype").val(boot_1.AC.getSkype(account_id)), $("#_profileInputDepartment").val(boot_1.AC.getDepartment(account_id)), $("#_profileInputTitle").val(boot_1.AC.getTitle(account_id)), $("#_profileInputAddress").val(boot_1.AC.getAddress(account_id)), $("#_profileInputUrl").val(boot_1.AC.getUrl(account_id)), $("#_profileInputEmail").val(boot_1.AC.getEmail(account_id)), $("#_profileInputOrgTel").val(boot_1.AC.getOrgTel(account_id)), $("#_profileInputExtensionTel").val(boot_1.AC.getExtensionTel(account_id)), $("#_profileInputtMobileTel").val(boot_1.AC.getMobileTel(account_id)), self.setPrivacySettingIcon("Avatar", boot_1.AC.getAvatarPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Cover", boot_1.AC.getCoverPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("OrgName", boot_1.AC.getOrgNamePriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Department", boot_1.AC.getDepartmentPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Title", boot_1.AC.getTitlePriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Url", boot_1.AC.getUrlPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Address", boot_1.AC.getAddressPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Introduction", boot_1.AC.getIntroductionPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Skype", boot_1.AC.getSkypePriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Twitter", boot_1.AC.getTwitterPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Facebook", boot_1.AC.getFacebookPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("Email", boot_1.AC.getEmailPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("OrgTel", boot_1.AC.getOrgTelPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("ExtensionTel", boot_1.AC.getExtensionTelPriv(boot_1.AC.myid)), self.setPrivacySettingIcon("MobileTel", boot_1.AC.getMobileTelPriv(boot_1.AC.myid));
                            var photo_edit_bar = $("#_profileEditContent").find("._profilePhotoEditBar");
                            photo_edit_bar.hide(), setTimeout(function() {
                                photo_edit_bar.fadeIn()
                            }), self.checkCWID(boot_1.AC.getChatWorkId(account_id))
                        },
                        close: function() {
                            self.openProfileWindow(boot_1.AC.myid)
                        }
                    }).open()
                }, self.setPrivacySettingIcon = function(profile_key, privacy_setting) {
                    return privacy_setting && $("#_profilePrivacy" + profile_key).removeClass().addClass("icoFont" + common_1.ucfirst(privacy_setting)).attr("data-value", privacy_setting), this
                };
                var contact_window_allcheck_button, contact_window = null,
                    contact_window_allcheck = null,
                    contact_window_pager_num = 0,
                    contact_window_pager_index = 0,
                    contact_window_pager_view_num = boot_1.TM.contactwindow_pager_view_num,
                    contact_window_pager = null,
                    checked_contact_flag = {};
                self.prepareContactWindow = function() {
                    contact_window = $("#_contactWindow").cwFloatWindow({
                        width: 920,
                        title: L.menu_contact_admin,
                        open: function() {
                            self.selectDefaultTabInContactWindow()
                        }
                    }), $("#_contactWindowTab").on("click", "li", function() {
                        return "_contactWindowTabContact" === this.id && self.reachedContactLimit() ? (boot_1.CW.view.showContactLimitErrorDialog(), !1) : ($C("#_contactWindowTab li").removeClass("floatTabSelect"), $C("#_contactWindowSearch").focus(), self.tab_type = $(this).addClass("floatTabSelect").attr("data-type"), self.clearSearchContact(), contactfilter.setVal(""), $C("#_contactWindowBox").scrollTop(0), void("_contactWindowTabInviteEmail" === this.id ? boot_1.AL.trackEvent("contact_list", "open", {
                            label: "mail_invitation"
                        }) : "_contactWindowTabContact" === this.id ? boot_1.AL.trackEvent("contact_list", "open", {
                            label: "new_contact"
                        }) : "_contactWindowTabMyContact" === this.id ? boot_1.AL.trackEvent("contact_list", "open", {
                            label: "contact_list"
                        }) : "_contactWindowTabMyRequest" === this.id ? boot_1.AL.trackEvent("contact_list", "open", {
                            label: "request_contact_list"
                        }) : "_contactWindowTabRequest" === this.id ? boot_1.AL.trackEvent("contact_list", "open", {
                            label: "unapproval_contact_list"
                        }) : "_contactWindowTabNoRequest" === this.id && boot_1.AL.trackEvent("contact_list", "open", {
                            label: "unconnected_contact_list"
                        })))
                    });
                    var contactfilter = $("#_contactWindowSearch").cwSearchBox({
                        update: function() {
                            "addcontact" == self.tab_type ? self.searchContact("word", this.getVal()) : self.buildContactWindow()
                        }
                    });
                    $("#_addContactByMail").hide();
                    var action_buttons = $("#_contactWindowCheckActionArea").find("._button").cwButton();
                    $C("#_contactWindowList").on("click", "._contactList", function() {
                        $C("#_contactWindowList").find("._contactList").removeClass("adminDetailSelected");
                        var contact = $(this);
                        contact.addClass("adminDetailSelected"), self.buildContactDetail(contact.attr("data-aid")), boot_1.AL.trackEvent("contact_list", "click", {
                            label: "contact_list_user"
                        })
                    }).on("cwCheckBox_update", function(event, is_check, account_id) {
                        is_check ? checked_contact_flag[account_id] = is_check : checked_contact_flag[account_id] && delete checked_contact_flag[account_id];
                        var contact_num = $C("#_contactWindowList").find("._contactList").length,
                            check_num = Object.keys(checked_contact_flag).length;
                        check_num ? (check_num == contact_num ? contact_window_allcheck.check() : contact_window_allcheck.partialCheck(), action_buttons.enable()) : (contact_window_allcheck.unCheck(), action_buttons.disable())
                    }).on("click", "._inviteContact", function() {
                        var invite_mail_list = search_stat.inviteMailList;
                        invite_mail_list.length > 0 && (boot_1.CW.showProgress(L.contact_doing_invite), boot_1.CW.post("gateway.php", {
                            cmd: "invite_contact",
                            e: invite_mail_list,
                            nm: boot_1.AC.getName(boot_1.AC.myid),
                            av: boot_1.CW.getAvatarPanel(boot_1.AC.myid, {
                                src: !0
                            })
                        }, function() {
                            boot_1.CW.hideProgress(), boot_1.CW.alert(L.contact_done_invite), self.clearSearchContact(), self.buildContactWindow()
                        }, function(error_message) {
                            boot_1.CW.hideProgress(), boot_1.CW.alert(error_message)
                        }))
                    }), contact_window_allcheck = $C("#_contactWindowCheckAll").cwCheckBox(), contact_window_allcheck_button = $("#_contactWindowCheckAllButton").cwButton({
                        click: function() {
                            contact_window_allcheck.toggle()
                        },
                        disable: function() {
                            contact_window_allcheck.disable()
                        },
                        enable: function() {
                            contact_window_allcheck.enable()
                        }
                    }), $C("#_contactWindowCheckAll").cwCheckBox({
                        update: function(is_checked, value, is_partial) {
                            var contact_window_allcheck = this;
                            is_partial || (contact_window_allcheck.isChecked() ? $C("#_contactWindowList").find("._cwCBUnchecked").each(function() {
                                $(this).cwCheckBox().check()
                            }) : $C("#_contactWindowList").find("._cwCBChecked").each(function() {
                                $(this).cwCheckBox().unCheck()
                            }))
                        }
                    }), $("#_contactDetailClose").click(function() {
                        $C("#_contactWindowList").find("._contactList").removeClass("adminDetailSelected"), $C("#_contactDetailArea").attr("data-aid", "").hide(), $C("#_contactDetailBlankArea").show()
                    }), $("#_contactWindowCancel").cwButton({
                        click: function() {
                            var aid_list = [];
                            for (var aid in checked_contact_flag) aid_list.push(aid);
                            aid_list.length > 0 && (boot_1.CW.showProgress(L.canceling), boot_1.CW.post("gateway.php", {
                                cmd: "cancel_contact_request",
                                a: aid_list
                            }, function() {
                                boot_1.CW.hideProgress()
                            }, function(error_message) {
                                boot_1.CW.hideProgress(), boot_1.CW.alert(error_message)
                            }))
                        }
                    }), $("#_contactWindowDelete").cwButton({
                        click: function() {
                            var aid_list = [];
                            for (var aid in checked_contact_flag) aid_list.push(aid);
                            boot_1.CW.view.confirmDelete(L.contact_multi_delete_confirm.replace(/%%num%%/, aid_list.length), function() {
                                aid_list.length > 0 && (boot_1.CW.showProgress(L.deleting), boot_1.CW.post("gateway.php", {
                                    cmd: "delete_contact",
                                    a: aid_list
                                }, function() {
                                    boot_1.CW.hideProgress(), boot_1.CW.watch();
                                }, function(error_message) {
                                    boot_1.CW.hideProgress(), boot_1.CW.alert(error_message)
                                }))
                            })
                        }
                    }), $("#_contactWindowAccept").cwButton({
                        click: function() {
                            var aid_list = [];
                            for (var aid in checked_contact_flag) aid_list.push(aid);
                            aid_list.length > 0 && (boot_1.CW.showProgress(L.accepting), boot_1.CW.post("gateway.php", {
                                cmd: "accept_contact_request",
                                a: aid_list
                            }, function(json) {
                                if (void 0 != json.error) {
                                    var title = L.contact_error_cantadd,
                                        message = L.contact_error_planlimit;
                                    message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message)
                                }
                                boot_1.CW.hideProgress()
                            }, function(error_message) {
                                boot_1.CW.hideProgress(), boot_1.CW.alert(error_message)
                            }))
                        }
                    }), $("#_contactWindowAdd").cwButton({
                        click: function() {
                            var aid_list = [];
                            for (var aid in checked_contact_flag) aid_list.push(aid);
                            aid_list.length > 0 && self.requestContact(aid_list, this)
                        }
                    });
                    var contactpager_list = ["first", "prev", "next", "last"];
                    contact_window_pager = $("#_contactWindowPager").cwButtonBar({
                        update: function(idx) {
                            switch (contactpager_list[idx]) {
                                case "first":
                                    contact_window_pager_index = 0;
                                    break;
                                case "prev":
                                    contact_window_pager_index--, contact_window_pager_index < 0 && (contact_window_pager_index = 0);
                                    break;
                                case "next":
                                    contact_window_pager_index++, contact_window_pager_index >= contact_window_pager_num && (contact_window_pager_index = contact_window_pager_num - 1);
                                    break;
                                case "last":
                                    contact_window_pager_index = contact_window_pager_num - 1
                            }
                            self.buildContactWindow({
                                resetPager: !1
                            }), $C("#_contactWindowBox").scrollTop(0)
                        }
                    })
                }, self.requestContact = function(aid_list, button, success_callback) {
                    button || (button = {
                        enable: function() {},
                        disable: function() {}
                    });
                    var add_contact = function() {
                        var callback = {
                            common: function() {
                                button.enable()
                            },
                            success: success_callback
                        };
                        button.disable(), self.addContact(aid_list, callback)
                    };
                    aid_list.length > 1 ? boot_1.CW.view.confirm(L.contact_multi_add_confirm.replace(/%%num%%/, aid_list.length), add_contact) : 1 == aid_list.length && add_contact()
                }, self.addContact = function(aid_list, callback) {
                    aid_list.length > 1 && boot_1.CW.showProgress(L.contact_multi_adding), boot_1.CW.post("gateway.php", {
                        cmd: "request_contact",
                        a: aid_list
                    }, function(json) {
                        if (void 0 != json.error) {
                            var title = L.contact_error_cantadd,
                                message = L.contact_error_planlimit;
                            message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message), callback.common()
                        } else {
                            for (var i = 0; i < json.requested_list.length; i++) {
                                var aid = json.requested_list[i];
                                self.model.myrequest_dat[aid] = {
                                    nm: boot_1.AC.getName(aid),
                                    mg: void 0
                                }
                            }
                            boot_1.CW.watch()
                        }
                        boot_1.CW.hideProgress(), callback.success && callback.success()
                    }, function(error_message) {
                        boot_1.CW.alert(error_message), callback.common(), boot_1.CW.hideProgress()
                    })
                }, self.openContactWindow = function() {
                    contact_window || self.prepareContactWindow(), contact_window.open(), self.inviteEmailView.init(), self.buildContactWindow()
                };
                var addcontact_search_xhr = null,
                    addcontact_search_timer = null,
                    search_stat_default = {
                        isSearched: !1,
                        isLoading: !1,
                        lastType: "",
                        lastQuery: "",
                        accountIdList: [],
                        inviteMailList: []
                    }, search_stat = $.extend({}, search_stat_default);
                self.getSearchStat = function() {}, self.searchContact = function(type, query) {
                    if (search_stat.lastType != type || search_stat.lastQuery != query) {
                        switch (self.clearSearchContact(), search_stat.isLoading = !0, search_stat.lastType = type, search_stat.lastQuery = query, search_stat.accountIdList = [], search_stat.inviteMailList = [], type) {
                            case "word":
                                query ? addcontact_search_timer = setTimeout(function() {
                                    addcontact_search_timer = null, addcontact_search_xhr = boot_1.CW.post("r/gateway.php", {
                                        cmd: "search_contact",
                                        q: query
                                    }, function(json) {
                                        if (void 0 != json.error) {
                                            var title = L.contact_error_cantadd,
                                                message = L.contact_error_planlimit;
                                            message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message)
                                        } else {
                                            for (var account_id in json.account_dat) boot_1.AC.myid != account_id && search_stat.accountIdList.push(account_id), boot_1.AC.isUnknown(account_id) && boot_1.AC.setAccountDat(account_id, json.account_dat[account_id]);
                                            if (json.error_dat && json.error_dat.noexist)
                                                for (var noexist_list = json.error_dat.noexist, i = 0, noex_len = noexist_list.length; i < noex_len; i++) {
                                                    var mail = noexist_list[i];
                                                    search_stat.inviteMailList.push(mail)
                                                }
                                        }
                                        search_stat.isSearched = !0, search_stat.isLoading = !1, self.buildContactWindow()
                                    })
                                }, 1e3) : (search_stat.isSearched = !1, search_stat.isLoading = !1, self.buildContactWindow());
                                break;
                            case "mail":
                                var address_list = query.split("\n");
                                addcontact_search_xhr = boot_1.CW.post("gateway.php", {
                                    cmd: "check_address",
                                    a: address_list
                                }, function(json) {
                                    if (void 0 != json.error) {
                                        var title = L.contact_error_cantadd,
                                            message = L.contact_error_planlimit;
                                        message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message)
                                    } else {
                                        for (var email in json.address_dat) {
                                            var account_id = json.address_dat[email].aid;
                                            search_stat.accountIdList.push(account_id), boot_1.AC.isUnknown(account_id) && boot_1.AC.setAccountDat(account_id, json.address_dat[email])
                                        }
                                        var error_list = [];
                                        if (void 0 != json.error_dat) {
                                            var error_alert_message = "";
                                            for (var key in json.error_dat) {
                                                var error_mail_num = json.error_dat[key].length;
                                                if ("noexist" == key)
                                                    for (var i = 0; i < error_mail_num; i++) search_stat.inviteMailList.push(json.error_dat[key][i]);
                                                else {
                                                    error_list = error_list.concat(json.error_dat[key]), error_alert_message && (error_alert_message += "\n\n");
                                                    var another_length = 0,
                                                        for_length = 0;
                                                    error_mail_num > 3 ? (for_length = 3, another_length = error_mail_num - 3) : for_length = error_mail_num;
                                                    for (var error_mail_list = "", i = 0; i < for_length; i++) error_mail_list && (error_mail_list += ","), error_mail_list += json.error_dat[key][i];
                                                    error_alert_message += error_mail_list, another_length > 0 && (error_alert_message += L.contact_rest_number.replace(/%%rest_number%%/, another_length)), "invalid" == key ? error_alert_message += L.contact_error_is_not_mailaddress : "limited" == key ? error_alert_message += L.contact_error_is_over_contactnum : "external" == key && (error_alert_message += L.contact_error_is_disable_external)
                                                }
                                            }
                                            error_alert_message && boot_1.CW.alert(error_alert_message)
                                        }
                                        search_stat.isSearched = !0, search_stat.isLoading = !1, self.buildContactWindow()
                                    }
                                })
                        }
                        self.buildContactWindow()
                    }
                }, self.clearSearchContact = function() {
                    addcontact_search_xhr && (addcontact_search_xhr.abort(), addcontact_search_xhr = null), addcontact_search_timer && clearTimeout(addcontact_search_timer), contact_window_allcheck.unCheck(!0), checked_contact_flag = {}, search_stat = $.extend({}, search_stat_default)
                }, self.selectDefaultTabInContactWindow = function() {
                    var id = self.inviteEmailView.tabId;
                    0 === $C("#" + id).length && (id = "_contactWindowTabContact"), self.reachedContactLimit() && (id = "_contactWindowTabMyContact"), $C("#" + id).click()
                }, self.buildContactWindow = function(user_option) {
                    var option = $.extend({
                        resetPager: !0
                    }, user_option);
                    option.resetPager && (contact_window_pager_index = 0);
                    var request_num = Object.keys(self.model.request_dat).length;
                    if (request_num > 0 ? $("#_myAllContactNum").text(request_num).show() : $("#_myAllContactNum").hide(), contact_window && contact_window.isOpen()) {
                        checked_contact_flag = {};
                        var account_list = search_stat.accountIdList,
                            invite_mail_list = search_stat.inviteMailList,
                            html = "",
                            is_sorted = !1,
                            filter_word_list = [],
                            empty_result_message = "",
                            aid_check = function(aid, filter_word_list) {
                                return aid != self.model.myid && !(filter_word_list.length > 0 && !self.model.isMatchedWithKeyList(filter_word_list, aid))
                            };
                        "invitemail" === self.tab_type && 0 === $C("#" + self.inviteEmailView.tabId).length && (self.tab_type = "addcontact"), contact_window_allcheck_button.disable(), $C("#_contactWindowNavigation ._contactWindowNavigationItem").hide(), "invitemail" == self.tab_type ? (self.inviteEmailView.show(), $C("#_contactWindowNavigation").hide(), $C("#_contactDetailAreaWrapper").hide(), $C("#_contactWindowBox").hide()) : ($C("#_contactWindowNavigation").show(), $C("#_contactDetailAreaWrapper").show(), $C("#_contactWindowBox").show(), self.inviteEmailView.hide());
                        var word;
                        switch (self.tab_type) {
                            case "addcontact":
                                empty_result_message = L.contact_search_introduction, $C("#_addContactType").show(), $C("#_contactWindowAdd").show().cwButton().disable(), $C("#_contactWindowSearch").attr("placeholder", L.contact_search_placeholder);
                                for (var tmp_account_list = [], i = 0, acc_len = account_list.length; i < acc_len; i++) {
                                    var aid = account_list[i];
                                    boot_1.AC.isContact(aid) || boot_1.AC.request_dat[aid] || boot_1.AC.myrequest_dat[aid] || tmp_account_list.push(aid)
                                }
                                account_list = tmp_account_list;
                                break;
                            case "contact":
                                empty_result_message = L.contact_search_not_found, $C("#_contactWindowSearch").attr("placeholder", L.contact_search), word = $C("#_contactWindowSearch").val().toLowerCase(), search_stat.isSearched = !1, word && (filter_word_list = boot_1.CW.splitWithSpace(word), search_stat.isSearched = !0), account_list = [];
                                for (var i = 0, cnt_len = self.model.contact_list.length; i < cnt_len; i++) {
                                    var aid = self.model.contact_list[i];
                                    aid_check(aid, filter_word_list) && account_list.push(aid)
                                }
                                $C("#_contactWindowDelete").show().cwButton().disable();
                                break;
                            case "myrequest":
                                $C("#_contactWindowSearch").attr("placeholder", L.contact_search), word = $C("#_contactWindowSearch").val().toLowerCase(), search_stat.isSearched = !1, word && (filter_word_list = boot_1.CW.splitWithSpace(word), search_stat.isSearched = !0), account_list = [];
                                for (var aid in self.model.myrequest_dat) aid_check(aid, filter_word_list) && account_list.push(aid);
                                $C("#_contactWindowCancel").show().cwButton().disable();
                                break;
                            case "request":
                                $C("#_contactWindowSearch").attr("placeholder", L.contact_search), word = $C("#_contactWindowSearch").val().toLowerCase(), search_stat.isSearched = !1, word && (filter_word_list = boot_1.CW.splitWithSpace(word), search_stat.isSearched = !0), account_list = [];
                                for (var aid in self.model.request_dat) aid_check(aid, filter_word_list) && account_list.push(aid);
                                $C("#_contactWindowAccept").show().cwButton().disable();
                                break;
                            case "norequest":
                                $C("#_contactWindowSearch").attr("placeholder", L.contact_search), word = $C("#_contactWindowSearch").val().toLowerCase(), search_stat.isSearched = !1, word && (filter_word_list = boot_1.CW.splitWithSpace(word), search_stat.isSearched = !0), account_list = [];
                                var norequest_dat = self.getNoRequestDat();
                                for (var aid in norequest_dat) aid_check(aid, filter_word_list) && account_list.push(aid);
                                html += '<div class="contactAddAllHint">' + L.contact_add_all_hint + "</div>", $C("#_contactWindowAdd").show().cwButton().disable()
                        }
                        search_stat.isLoading ? html += '<div class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + L.loading + "</div>" : 0 == account_list.length && 0 == invite_mail_list.length && (html += search_stat.isSearched ? '<div class="emptyAdminContent"><img src="./imagenew/common/empty/img_contact_empty.png" alt="" /><p>' + L.contact_error_search_user_not_found + "</p></div>" : '<div class="emptyAdminContent"><img src="./imagenew/common/empty/img_contact_empty.png" alt="" /><p>' + empty_result_message + "</p></div>"), is_sorted || account_list.sort(function(a, b) {
                            return self.model.getName(a).localeCompare(self.model.getName(b))
                        }), self.model.contact_list.length > 1 ? $C("#_contactWindowListNum").text("(" + (self.model.contact_list.length - 1).toLocaleString() + ")") : $C("#_contactWindowListNum").text("");
                        var myrequest_num = Object.keys(self.model.myrequest_dat).length;
                        if (myrequest_num > 0) $C("#_contactWindowTabMyRequest").show(), $C("#_contactWindowMyRequestNum").text("(" + myrequest_num.toLocaleString() + ")");
                        else if ($C("#_contactWindowTabMyRequest").hide(), "myrequest" == self.tab_type) return void self.selectDefaultTabInContactWindow();
                        if (request_num > 0) $C("#_contactWindowTabRequest").show(), $C("#_contactWindowRequestNum").html('<span class="contactRequestNum">' + request_num.toLocaleString() + "</span>").show();
                        else if ($C("#_contactWindowTabRequest").hide(), "request" == self.tab_type) return void self.selectDefaultTabInContactWindow();
                        var norequest_num = Object.keys(self.getNoRequestDat()).length;
                        if (norequest_num > 0) $C("#_contactWindowTabNoRequest").show(), $C("#_contactWindowNoRequestNum").text("(" + norequest_num.toLocaleString() + ")");
                        else if ($C("#_contactWindowTabNoRequest").hide(), "norequest" == self.tab_type) return void self.selectDefaultTabInContactWindow();
                        var invite_length = invite_mail_list.length;
                        if (invite_length > 0) {
                            html += '<li class="inviteMailNotFound subContentShadow"><p class="alert alertWarning">' + L.contact_mail_not_found + "</p><ul>";
                            for (var i = 0; i < invite_length; i++) {
                                var mail = invite_mail_list[i];
                                html += "<li>" + common_1.escape_html(mail) + "</li>"
                            }
                            html += '</ul><div class="btnInviteContentArea"><div class="_inviteContact button btnPrimary">' + L.contact_do_invite + "</div></div></li>"
                        }
                        var disp_contact_list = [],
                            filtererd_length = account_list.length;
                        if (contact_window_pager_num = parseInt(filtererd_length / contact_window_pager_view_num, 10), filtererd_length % contact_window_pager_view_num !== 0 && contact_window_pager_num++, filtererd_length >= contact_window_pager_view_num) {
                            var idx_start = contact_window_pager_index * contact_window_pager_view_num,
                                idx_end = idx_start + contact_window_pager_view_num;
                            idx_end > filtererd_length && (idx_end = filtererd_length);
                            for (var idx = idx_start; idx < idx_end; idx++) disp_contact_list.push(account_list[idx])
                        } else disp_contact_list = account_list;
                        var disp_len = disp_contact_list.length;
                        disp_len > 0 && contact_window_allcheck_button.enable();
                        for (var detail_contact_id = $C("#_contactDetailArea").attr("data-contact-id"), detail_contact_is_found = !1, contact_option = {
                                profileLink: !1,
                                shortButton: !1,
                                footerButton: !0,
                                showCover: !1,
                                showMoveChat: !0,
                                showLive: !0,
                                showDeleteContact: !1,
                                showCheckBox: !0,
                                isChecked: !1
                            }, i = 0; i < disp_len; i++) {
                            var aid = disp_contact_list[i];
                            html += '<li class="_contactList subContentShadow" data-aid="' + aid + '">' + self.getContactPanel(aid, contact_option) + "</li>", detail_contact_id == aid && (detail_contact_is_found = !0)
                        }
                        detail_contact_is_found || $C("#_contactDetailClose").click(), contact_window_allcheck.unCheck(!0), $C("#_contactWindowList").html(html), account_list.length ? $C("#_contactWindowPagerIndex").text((contact_window_pager_index + 1).toString() + " / " + contact_window_pager_num) : $C("#_contactWindowPagerIndex").text(""), contact_window_pager.enableButtonAll(), 0 == contact_window_pager_index && contact_window_pager.disableButton(0).disableButton(1), contact_window_pager_num - contact_window_pager_index <= 1 && contact_window_pager.disableButton(2).disableButton(3), "invitemail" == self.tab_type ? self.inviteEmailView.giveFocus() : $C("#_contactWindowSearch").focus()
                    }
                }, self.buildContactDetail = function(account_id) {
                    var account_dat = boot_1.AC.account_dat[account_id];
                    account_dat && ($C("#_contactDetailBlankArea").hide(), $C("#_contactDetailArea").show(), self.assignDetailInfo($C("#_contactDetailArea"), account_id))
                };
                var loading_profile_aid = 0;
                self.assignDetailInfo = function(wrapper, aid) {
                    if (loading_profile_aid) return !1;
                    if (!boot_1.AC.hasDetailData(aid)) {
                        wrapper.hide();
                        var get_priv_setting = !1;
                        return aid == boot_1.AC.myid && (get_priv_setting = !0), loading_profile_aid = aid, boot_1.AC.refreshAccountDetailData(aid, get_priv_setting, function() {
                            loading_profile_aid = 0, self.assignDetailInfo(wrapper, aid)
                        }), !1
                    }
                    wrapper.find("._profileName").html(boot_1.CW.getName(aid)), wrapper.find("._profileAvatar").html(boot_1.CW.getAvatarPanel(aid, {
                        size: "huge",
                        clicktip: !1,
                        hovertip: !1
                    })), wrapper.find("._profileCover").html(boot_1.CW.getCoverPanel(aid)), wrapper.find("._profileContactDetailCover").html(boot_1.CW.getCoverPanel(aid)), wrapper.find("._profileOrgName").html(boot_1.CW.getOrgName(aid));
                    var cwidlink = boot_1.CW.getChatWorkIdLink(aid);
                    cwidlink ? wrapper.find("._profileChatWorkIdLink").html(L.profile_chatworkidtip + cwidlink).show() : wrapper.find("._profileChatWorkIdLink").hide();
                    var intro = boot_1.AC.getIntroduction(aid);
                    intro ? wrapper.find("._profileNameDescription").html("<pre>" + boot_1.CW.renderMessage(intro) + "</pre>").show() : wrapper.find("._profileNameDescription").hide(), wrapper.find("._profileDepartment").text(boot_1.AC.getDepartment(aid)), wrapper.find("._profileTitle").text(boot_1.AC.getTitle(aid)), wrapper.find("._profileAddress").text(boot_1.AC.getAddress(aid));
                    var url = boot_1.AC.getUrl(aid);
                    if (url.match(/^(https?|ftp)(:\/\/[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$,%#]+)$/)) {
                        var escaped_url = common_1.escape_html(url);
                        wrapper.find("._profileUrl").html('<a href="' + escaped_url + '" target="_blank">' + escaped_url + "</a>")
                    } else wrapper.find("._profileUrl").text(url);
                    var email = boot_1.AC.getEmail(aid);
                    if (email.match(/^[A-Za-z0-9]+[\w-]+@[\w\.-]+\.\w{2,}$/)) {
                        var escaped_mail = common_1.escape_html(email);
                        wrapper.find("._profileEmail").html('<a href="mailto:' + escaped_mail + '">' + escaped_mail + "</a>")
                    } else wrapper.find("._profileEmail").text(email);
                    wrapper.find("._profileOrgTel").text(boot_1.AC.getOrgTel(aid)), wrapper.find("._profileExtensionTel").text(boot_1.AC.getExtensionTel(aid)), wrapper.find("._profileMobileTel").text(boot_1.AC.getMobileTel(aid));
                    var sns_html = "",
                        escaped_facebook = common_1.escape_html(boot_1.AC.getFacebook(aid)),
                        escaped_twitter = common_1.escape_html(boot_1.AC.getTwitter(aid)),
                        skype = boot_1.AC.getSkype(aid),
                        escaped_skype = common_1.escape_html(skype);
                    escaped_facebook && (sns_html = '<li><span class="icoFontFacebook"></span><span class="icoTextHide">facebook</span><a href="https://www.facebook.com/' + escaped_facebook + '" target="_blank">' + escaped_facebook + "</a></li>"), escaped_twitter && (sns_html += '<li><span class="icoFontTwitter"></span><span class="icoTextHide">twitter</span><a href="http://twitter.com/' + escaped_twitter + '" target="_blank">' + escaped_twitter + "</a></li>"), skype && (sns_html += '<li><span class="icoFontSkype"></span><span class="icoTextHide">skype</span><a href="skype:' + escaped_skype + '?call">' + escaped_skype + "</a></li>"), wrapper.find("._profileSNS").html(sns_html);
                    var contact_action = self.getContactButton(aid, {
                        shortButton: !1,
                        showMoveChat: !0,
                        showLive: !0,
                        showDeleteContact: !1
                    });
                    aid == boot_1.AC.myid && (contact_action = '<div class="_profileEdit button">' + L.profile_edit + "</div>" + contact_action), wrapper.find("._profileButton").html(contact_action), wrapper.show()
                }, self.getContactPanel = function(account_id, user_option) {
                    var option = $.extend({
                        profileLink: !0,
                        showButton: !0,
                        footerButton: !0,
                        showCover: !0,
                        showLive: !0,
                        showCheckBox: !1,
                        isChecked: !1
                    }, user_option),
                        cwlink_label = "",
                        cwlink = boot_1.CW.getChatWorkIdLink(account_id);
                    cwlink && (cwlink_label = '<dd id="profileTipChatWorkId">' + L.profile_chatworkidtip + "<span>" + cwlink + "</span></dd>");
                    var direct_call = "",
                        room_id = boot_1.AC.getRoomId(account_id);
                    room_id && option.showLive && ("ipad" === MOBILE ? direct_call = '<div class="btnGroup"><div class="button btnDisable"><span class="icoFontVideoChat icoSizeLarge"></span><span class="icoTextHide">' + L.live_join + "</span></div></div>" : account_id != boot_1.AC.myid && (direct_call = '<div class="btnGroup"><div class="_joinLive button" data-aid="' + account_id + '"><span class="icoFontVideoChat icoSizeLarge"></span><span class="icoTextHide">' + L.live_join + "</span></div></div>"));
                    var contact_action = "";
                    option.showButton ? (option.showLive = !1, contact_action = self.getContactButton(account_id, option)) : contact_action = "";
                    var name = "";
                    option.profileLink && !boot_1.AC.isUndisclosed(account_id) ? (contact_action += '<div class="_profileTipButton _openProfile _moveButton button" data-aid="' + account_id + '">' + L.menu_profile_setting + "</div>", name = '<span class="_profileTipButton _openProfile profileTipName anchorText" data-aid="' + account_id + '">' + boot_1.CW.getName(account_id) + "</span>") : name = option.showCheckBox ? '<span class="_profileTipCheckLabel">' + boot_1.CW.getName(account_id) + "</span>" : boot_1.CW.getName(account_id);
                    var cover = "";
                    option.showCover && (cover = boot_1.CW.getCoverPanel(account_id));
                    var button = "",
                        footer = "";
                    option.showButton && contact_action && (option.footerButton ? footer = '<div class="tooltipFooter"><div class="btnGroup"><div class="_profileTipButton">' + contact_action + "</div></div></div>" : button = '<div class="btnGroup">' + contact_action + "</div>");
                    var checkbox = "";
                    option.showCheckBox && (checkbox = $.cwCheckBox.create(option.isChecked, "", account_id, {
                        class: "_contactPanelCheck"
                    }));
                    var requestMessage = "";
                    if ("request" === self.tab_type && boot_1.AC.getRequestMessage(account_id)) {
                        var $requestMessage = $("<div>").addClass("speakerProfileTooltipMessage").append($("<pre>").addClass("message").text(boot_1.AC.getRequestMessage(account_id)));
                        requestMessage = $("<div>").append($requestMessage).html()
                    }
                    return '<div class="_contactPanel" data-aid="' + account_id + '">' + ('<div class="profileImgToolTip">' + cover + '<div class="profileTooltipAvater">' + boot_1.CW.getAvatarPanel(account_id, {
                        hovertip: !1,
                        clicktip: !1,
                        size: "large"
                    }) + "</div>") + "</div>" + ('<div class="speakerProfileTooltipContent clearfix">' + checkbox + "<dl>") + ("<dt>" + name + "</dt>") + ('<dd id="_profileTipOrgName">' + boot_1.CW.getOrgName(account_id) + "</dd>" + cwlink_label + direct_call + button + "</dl>") + ("</div>" + requestMessage + footer)
                }, self.getContactButton = function(account_id, user_option) {
                    var option = $.extend({
                        shortButton: !1,
                        showMoveChat: !0,
                        showLive: !0,
                        showDeleteContact: !1
                    }, user_option),
                        contact_action = "",
                        room_id = boot_1.AC.getRoomId(account_id);
                    if (room_id) {
                        if (option.showLive && ("ipad" === MOBILE ? contact_action += '<div class="button btnDisable"><span class="icoFontVideoChat"></span><span class="icoTextHide">' + L.live_join + "</span></div>" : account_id != boot_1.AC.myid && (contact_action += '<div class="_joinLive button" data-aid="' + account_id + '"><span class="icoFontVideoChat"></span><span class="icoTextHide">' + L.live_join + "</span></div>")), option.showMoveChat) {
                            var chat_jump_text = L.directchat;
                            account_id == boot_1.AC.myid && (chat_jump_text = L.mychat), contact_action += '<div class="_roomLink _moveButton button" data-rid="' + room_id + '">' + chat_jump_text + "</div>"
                        }
                        account_id != boot_1.AC.myid && option.showDeleteContact && (contact_action += option.shortButton ? '<div class="_deleteContact _actionButton button"><span class="icoFontActionDelete"></span><span class="icoTextHide">' + L.button_delete + "</span></div>" : '<div class="_deleteContact _actionButton button">' + L.contact_delete + "</div>")
                    } else boot_1.AC.myrequest_dat[account_id] ? contact_action = option.shortButton ? '<div class="_cancelMyRequest _actionButton button">' + L.button_cancel + "</div>" : '<div class="_cancelMyRequest _actionButton button">' + L.contact_request_cancel + "</div>" : boot_1.AC.request_dat[account_id] ? contact_action = option.shortButton ? '<div class="_acceptContactRequest _actionButton button btnPrimary" data-aid="' + account_id + '">' + L.button_accept + "</div>" + ('<div class="_rejectContactRequest _actionButton button" data-aid="' + account_id + '">' + L.button_reject + "</div>") : '<div class="_acceptContactRequest _actionButton button btnPrimary" data-aid="' + account_id + '">' + L.button_accept_long + "</div>" + ('<div class="_rejectContactRequest _actionButton button" data-aid="' + account_id + '">' + L.button_reject_long + "</div>") : boot_1.AC.isDeleted(account_id) || boot_1.AC.isUndisclosed(account_id) || (contact_action = option.shortButton ? '<div class="_requestContact _actionButton button btnPrimary" data-aid="' + account_id + '">' + L.button_add + "</div>" : '<div class="_requestContact _actionButton button btnPrimary" data-aid="' + account_id + '">' + L.contactpanel_add_contact + "</div>");
                    return contact_action
                }, self.reachedContactLimit = function() {
                    var limit_num = boot_1.CW.contact_limit_num;
                    return limit_num && self.model.contact_list.length - 1 >= limit_num
                }
            }
            var InviteMailAccountView_1 = require("./InviteMailAccountView"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.AccountView = AccountView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "./InviteMailAccountView": 136
        }
    ],
    131: [
        function(require, module, exports) {
            "use strict";

            function ChatSendView(model) {
                var self = this;
                self.model = model;
                var chat_ctrl, chat_shift, chat_alt, chat_command, nickname_dialog, sending, file_send_retry_count = 0,
                    chattext = $C("#_chatText"),
                    fsa = $("#_fileSendStatusArea"),
                    fst = $("#_fileStatus"),
                    csa = $("#_chatSendArea"),
                    cta = $("#_chatTextArea"),
                    send_type = "chat",
                    press_key = 0,
                    reset_send_file = function() {
                        common_1._has_fileapi || (fst.stop().fadeOut(function() {
                            $C("#_file").stop().fadeIn()
                        }), $C("#_fileHiddenForm")[0].reset()), file_send_retry_count = 0, sending = !1
                    };
                self.prepare = function() {
                    self.prepareSendArea(), self.prepareTo(), self.prepareEmoticonImage(), self.prepareSendFile(), $("#_emoticon").click(function() {
                        boot_1.AL.trackEvent("message_input", "open", {
                            label: "emoticon_balloon"
                        }), emo_tip || self.prepareEmoticon(), emo_tip.open($(this))
                    }), messageTextarea_1.messageArea.clearCaretPos(), $("#_mainContentExpandLeft").click(function() {
                        boot_1.RL.view.toggleFold()
                    }), "free" === SERVICE_PLAN ? ($("#_mainContentExpandRight").hide(), $(".chatSendAreaContent").css("margin-right", "4px")) : $("#_mainContentExpandRight").click(function() {
                        boot_1.RS.view.toggleFold()
                    }), boot_1.CW.view.registerKeyboardShortcut(37, !0, !1, !1, !1, function() {
                        boot_1.RL.view.toggleFold()
                    }).registerKeyboardShortcut(37, !1, !1, !1, !0, function() {
                        boot_1.RL.view.toggleFold()
                    }).registerKeyboardShortcut(39, !0, !1, !1, !1, function() {
                        boot_1.RS.view.toggleFold()
                    }).registerKeyboardShortcut(39, !1, !1, !1, !0, function() {
                        boot_1.RS.view.toggleFold()
                    }).registerKeyboardShortcut(77, !1, !1, !1, !1, function() {
                        messageTextarea_1.messageArea.focus()
                    }), $C("#_editCancel").click(function() {
                        self.clearChatEdit(), self.setChatText(""), messageTextarea_1.messageArea.blur()
                    }), self.prepareTimeLine()
                };
                var timeline_actionbar = null;
                self.prepareTimeLine = function() {
                    var message_wrapper = $("#_timeLine,#_messageSearchResult,#_taskDetailTimeLine,#_replyMessageTip"),
                        timeline = $C("#_timeLine"),
                        messageSearchResult = $("#_messageSearchResult"),
                        action_func = {
                            reply: function(message_id) {
                                var chat_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                                if (chat_dat) {
                                    messageTextarea_1.messageArea.focus();
                                    var name;
                                    name = boot_1.CW.is_business && boot_1.ST.data.private_nickname && !boot_1.RM.isInternal() ? boot_1.AC.getDefaultNickName(chat_dat.aid) : boot_1.AC.getNickName(chat_dat.aid), self.setChatText("[" + L.chatsend_reply + " aid=" + chat_dat.aid + " to=" + boot_1.RM.id + "-" + message_id + "] " + name + "\n", !0), boot_1.AL.trackEvent("message_action", "click", {
                                        label: "reply_action"
                                    })
                                }
                            },
                            edit: function(message_id) {
                                if (!boot_1.RM.timeline.chat_id2chat_dat[message_id]) return boot_1.CW.alert(L.chatsend_error_no_exist_for_edit), !1;
                                self.setChatEdit(message_id, boot_1.RM);
                                var elm = chattext[0];
                                if (elm.createTextRange) {
                                    var range = elm.createTextRange();
                                    range.move("character", elm.value.length), range.select()
                                } else elm.setSelectionRange && elm.setSelectionRange(elm.value.length, elm.value.length);
                                boot_1.AL.trackEvent("message_action", "click", {
                                    label: "edit_message_action"
                                })
                            },
                            task: function(message_id) {
                                this.$el.parents("#_messageSearchResultBox").length ? boot_1.AL.trackEvent("message_search", "click", {
                                    label: "task_in_message_search"
                                }) : boot_1.AL.trackEvent("message_action", "click", {
                                    label: "task_action"
                                });
                                var chat_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                                if (void 0 == chat_dat && (chat_dat = boot_1.SC.view.msg_dat[message_id]), chat_dat) {
                                    void 0 != chat_dat.rid && boot_1.RL.selectRoom(chat_dat.rid);
                                    var quoted_msg = "[" + L.chatsend_quote + " aid=" + chat_dat.aid + " time=" + chat_dat.tm + "]" + chat_dat.msg + "[/" + L.chatsend_quote + "]\n";
                                    return boot_1.RS.view.setTask(quoted_msg, null, null, !0, !0), $C("#_subContentArea").scrollTo($C("#_taskAddArea")), !1
                                }
                            },
                            unread: function(message_id) {
                                boot_1.AL.trackEvent("message_action", "click", {
                                    label: "unread_message_action"
                                });
                                var cur_room = boot_1.RM;
                                boot_1.CW.get("gateway.php", {
                                    cmd: "read",
                                    room_id: cur_room.id,
                                    last_chat_id: message_id,
                                    unread: 1
                                }, function(json) {
                                    cur_room.id == boot_1.RM.id && (cur_room.read_num = json.read_num, cur_room.build({
                                        readLock: !0
                                    }))
                                })
                            },
                            link: function(message_id) {
                                this.$el.parents("#_messageSearchResultBox").length ? boot_1.AL.trackEvent("message_search", "click", {
                                    label: "message_link_in_message_search"
                                }) : boot_1.AL.trackEvent("message_action", "click", {
                                    label: "message_link_action"
                                });
                                var message = this.findItemById(message_id),
                                    room_id = message.attr("data-rid");
                                boot_1.RM.id != room_id && boot_1.RL.selectRoom(room_id), messageTextarea_1.messageArea.focus(), self.setChatText(CHATWORK_HOME + "/#!rid" + room_id + "-" + message_id + "\n", !0)
                            },
                            delete: function(message_id) {
                                boot_1.AL.trackEvent("message_action", "click", {
                                    label: "delete_message_action"
                                });
                                var file_id = 0,
                                    is_task = !1,
                                    match = boot_1.RM.timeline.chat_id2chat_dat[message_id].msg.match(/^\[info\][\s\S]+\[download:([0-9]+)\][^\[]+\[\/download\]\[\/info\]$/);
                                if (match ? (file_id = match[1], boot_1.FL.file_id2file_dat[file_id] && "open" == boot_1.FL.file_id2file_dat[file_id].st || (file_id = 0)) : (match = boot_1.RM.timeline.chat_id2chat_dat[message_id].msg.match(/^\[info\].+\[task aid=[0-9,]+ st=open lt=[0-9]+\][\s\S]+\[\/task\]\[\/info\]$/), match && (is_task = !0)), file_id) {
                                    var file_dat = boot_1.FL.file_id2file_dat[file_id];
                                    $("#_plainDialogBody").html('<div class="deleteContent"><p class="deleteLabel">' + L.chatsend_delete_filetip + '</p><span class="deleteMeta">' + common_2.escape_html(file_dat.fn) + "</span></div>");
                                    var disable_delete_button_click = !1;
                                    $("#_plainDialog").cwDialog({
                                        title: L.chatsend_confirm_delete_with_file,
                                        width: 500,
                                        height: "auto",
                                        buttonLabels: [L.button_cancel, L.chatsend_button_delete_with_file, L.chatsend_button_delete_message_only],
                                        buttonDelete: [1, 2],
                                        buttonCancel: 0,
                                        buttonClick: function(index) {
                                            var this_dialog = this;
                                            switch (index) {
                                                case 1:
                                                    if (disable_delete_button_click) return;
                                                    disable_delete_button_click = setTimeout(function() {
                                                        disable_delete_button_click = !1
                                                    }, 5e3), boot_1.FL.deleteFile(file_id, function() {
                                                        disable_delete_button_click = clearTimeout(disable_delete_button_click), self.model.deleteChat(message_id, boot_1.RM.id), this_dialog.close()
                                                    }, function() {
                                                        disable_delete_button_click = clearTimeout(disable_delete_button_click), boot_1.CW.alert(L.file_delete_error_try_again)
                                                    });
                                                    break;
                                                case 2:
                                                    self.model.deleteChat(message_id, boot_1.RM.id), this_dialog.close()
                                            }
                                        }
                                    }).open()
                                } else if (is_task) {
                                    var task_id_list = [];
                                    for (var task_id in boot_1.TK.task_id2task_dat) {
                                        var task_dat = boot_1.TK.task_id2task_dat[task_id];
                                        "deleted" != task_dat.st && task_dat.cid && task_dat.cid == message_id && task_id_list.push(task_id)
                                    }
                                    var task_len = task_id_list.length;
                                    if (task_len > 0) {
                                        for (var task_html = "", i = 0; i < task_len; i++) {
                                            var task_id = task_id_list[i],
                                                task_dat = boot_1.TK.task_id2task_dat[task_id];
                                            task_html += boot_1.TK.view.getTaskPanel(task_dat, {
                                                type: "preview"
                                            })
                                        }
                                        $("#_plainDialogBody").html('<div class="deleteContent"><p class="deleteLabel">' + L.chatsend_delete_tasktip + '</p><pre><div class="deleteMeta">' + task_html + "</div></pre></div>");
                                        var pdialog = $("#_plainDialog");
                                        pdialog.cwDialog({
                                            title: L.chatsend_confirm_delete_with_task,
                                            width: 500,
                                            buttonLabels: [L.button_cancel, L.chatsend_button_delete_with_task, L.chatsend_button_delete_message_only],
                                            buttonDelete: [1, 2],
                                            buttonCancel: 0,
                                            buttonClick: function(index) {
                                                switch (index) {
                                                    case 1:
                                                        boot_1.TK.deleteTask(task_id_list), self.model.deleteChat(message_id, boot_1.RM.id), this.close();
                                                        break;
                                                    case 2:
                                                        self.model.deleteChat(message_id, boot_1.RM.id), this.close()
                                                }
                                            }
                                        }).open(), pdialog.scrollTop(0)
                                    } else boot_1.CW.view.confirmDelete(L.chatsend_confirm_delete, function() {
                                        self.model.deleteChat(message_id, boot_1.RM.id)
                                    })
                                } else boot_1.CW.view.confirmDelete(L.chatsend_confirm_delete, function() {
                                    self.model.deleteChat(message_id, boot_1.RM.id)
                                })
                            },
                            copy: function(message_id) {
                                boot_1.AL.trackEvent("message_action", "click", {
                                    label: "copy_message_action"
                                });
                                var msg_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                                msg_dat && $("#_textCopyDialog").cwDialog({
                                    width: "auto",
                                    height: 280,
                                    title: L.chat_action_copy_title,
                                    autoOpen: !0,
                                    modal: !0,
                                    open: function() {
                                        var txt = $("#_textCopyDialogText");
                                        txt.val(msg_dat.msg), $("#_copyMessage").quickEmpty(), $("#_textCopyButton").show();
                                        var clip_button = $("#_copyToClipBoard");
                                        clip_button.attr("data-clipboard-target", "#_textCopyDialogText");
                                        var clip = new Clipboard("#_copyToClipBoard");
                                        clip.on("success", function() {
                                            $("#_copyMessage").text(L.text_copied)
                                        }), setTimeout(function() {
                                            txt[0].select()
                                        })
                                    }
                                })
                            },
                            move: function(message_id) {
                                boot_1.AL.trackEvent("message_search", "click", {
                                    label: "message_jump_in_search"
                                });
                                var message = this.findItemById(message_id),
                                    room_id = message.attr("data-rid");
                                room_id && message_id && boot_1.RL.selectRoom(room_id, message_id)
                            },
                            quote: function(message_id) {
                                this.$el.parents("#_messageSearchResultBox").length ? boot_1.AL.trackEvent("message_search", "click", {
                                    label: "quote_in_message_search"
                                }) : boot_1.AL.trackEvent("message_action", "click", {
                                    label: "quote_action"
                                });
                                var chat_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                                void 0 == chat_dat && (chat_dat = boot_1.SC.view.msg_dat[message_id]), chat_dat && (void 0 != chat_dat.rid && boot_1.RL.selectRoom(chat_dat.rid), messageTextarea_1.messageArea.focus(),
                                    self.setChatText("[" + L.chatsend_quote + " aid=" + chat_dat.aid + " time=" + chat_dat.tm + "]" + chat_dat.msg + "[/" + L.chatsend_quote + "]\n", !0))
                            }
                        };
                    timeline_actionbar = timeline.cwActionBar({
                        itemSelector: "._message",
                        hoverSelector: "._chatTimeLineMessageBox",
                        hoverClass: "chatTimeLineMessageHover",
                        checkIgnoreItem: function(item) {
                            if ("1" === item.attr("data-deleted")) return !0
                        },
                        idKey: "data-mid",
                        descriptionDelay: boot_1.TM.messagetip_delay,
                        open: function(message_id) {
                            var type_list, more_type_list, chat_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                            chat_dat && chat_dat.id != self.model.chatedit_id ? chat_dat.aid != boot_1.AC.myid ? (type_list = ["reply", "quote", "task", "link"], more_type_list = ["copy", "unread"]) : (type_list = ["quote", "task", "edit", "link"], more_type_list = ["copy", "unread", "delete"]) : (type_list = [], more_type_list = []), this.setActionList(type_list), this.setMoreActionList(more_type_list)
                        }
                    }), ["reply", "quote", "task", "edit", "link", "copy", "unread", "delete"].forEach(function(type) {
                        var ctype = common_2.ucfirst(type);
                        timeline_actionbar.addAction(type, {
                            label: L["chat_action_" + type],
                            description: L["chat_action_" + type + "_desc"],
                            iconClass: "icoFontAction" + ctype,
                            click: function(action_type) {
                                return function() {
                                    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i];
                                    action_func[action_type].apply(this, args)
                                }
                            }(type)
                        })
                    });
                    var message_actionbar = messageSearchResult.cwActionBar({
                        itemSelector: "._message",
                        hoverSelector: "._chatTimeLineMessageBox",
                        hoverClass: "chatTimeLineMessageHover",
                        idKey: "data-mid",
                        actionList: ["move", "quote", "task", "link"],
                        descriptionDelay: boot_1.TM.messagetip_delay
                    });
                    ["quote", "task", "move", "link"].forEach(function(type) {
                        var ctype = common_2.ucfirst(type);
                        message_actionbar.addAction(type, {
                            label: L["chat_action_" + type],
                            description: L["chat_action_" + type + "_desc"],
                            iconClass: "icoFontAction" + ctype,
                            click: function() {
                                for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i];
                                action_func[type].apply(this, args), boot_1.SC.view.closeMessageSearchWindow()
                            }
                        })
                    });
                    var more_assign_tip = null;
                    message_wrapper.on("mouseover", "._timeStamp", function() {
                        var timeStamp = $(this),
                            time = timeStamp.attr("data-tm"),
                            utime = timeStamp.attr("data-utm"),
                            is_deleted = timeStamp.attr("data-deleted");
                        $.cwMessageTip.isInit(timeStamp[0]) || timeStamp.cwMessageTip({
                            useHtml: !0,
                            message: function() {
                                var text = L.chat_post_label + ": " + boot_1.CW.getDate(time);
                                if (utime) {
                                    var edit_label = L.chat_edit_label;
                                    "1" === is_deleted && (edit_label = L.chat_delete_label), text += "<br />" + edit_label + ": " + boot_1.CW.getDate(utime)
                                }
                                return text
                            }
                        }).open()
                    }).on("click", "._showMore", function() {
                        var task = $(this).closest("._task"),
                            message = task.closest("._message"),
                            message_id = message.attr("data-mid"),
                            room_id = message.attr("data-rid");
                        task.find("._taskBody").removeClass("taskBodyHide"), task.find("._showMore").hide(), boot_1.RL.rooms[room_id].timeline.view.task_showmore_flag[message_id] = !0
                    }).on("click", "._replyMessage", function() {
                        var reply = $(this);
                        if (0 !== reply.closest("#_replyMessageTip").length) {
                            var current_reply = replytip.tipFrom,
                                rid = current_reply.attr("data-rid"),
                                mid = current_reply.attr("data-mid");
                            return boot_1.RL.selectRoom(rid, mid, {
                                highlight: !1,
                                smoothScroll: !0,
                                messageHashUpdate: !1,
                                jumpToCallback: function() {
                                    $("#_messageId" + mid).find("._replyMessage[data-mid=" + reply.attr("data-mid") + "]").click()
                                }
                            }), replytip.close(), !1
                        }
                        replytip.open(reply)
                    }).on("mouseup", "._message", function(e) {
                        var msg = $(this),
                            qt = self.getTextSelection().trim();
                        if (qt) {
                            var message_id = parseInt(msg.attr("data-mid"), 10),
                                chat_dat = boot_1.RM.timeline.chat_id2chat_dat[message_id];
                            if (void 0 == chat_dat);
                            else {
                                quote_text = "[" + L.chatsend_quote + " aid=" + chat_dat.aid + " time=" + chat_dat.tm + "]" + qt + "[/" + L.chatsend_quote + "]\n";
                                var qtip = $C("#_quoteTip").cwToolTip();
                                qtip.isOpen() ? ($.cwFloatBox.skip(), setTimeout(function() {
                                    var qt = self.getTextSelection().trim();
                                    qt || qtip.close()
                                })) : qtip.open({
                                    x: e.clientX,
                                    y: e.clientY - 7
                                })
                            }
                        }
                    }).on("click", "._moveArrow", function() {
                        var message = $(this).closest("._message"),
                            room_id = message.attr("data-rid");
                        boot_1.RL.rooms[room_id].timeline.view.clearHighlight(message)
                    }).on("mouseup", "._speakerName", function() {
                        return $(this).closest("._message").find("._speaker ._avatarClickTip").triggerHandler("click"), !1
                    }).on("click", "._showMoreMemberTask", function() {
                        more_assign_tip || (more_assign_tip = $("#_showMoreAssignMemberTip").cwListTip({
                            search: !0,
                            useHtmlLabel: !0,
                            multiSelect: !1,
                            selectable: !1,
                            list: function() {
                                for (var mem_list = this.data.link.attr("data-aid-list").split(","), list = [], mem_length = mem_list.length, idx = 0; idx < mem_length; idx++) {
                                    var account_id = mem_list[idx],
                                        name = boot_1.AC.getName(account_id);
                                    list.push({
                                        keys: boot_1.AC.getSearchKeys(account_id),
                                        value: account_id,
                                        label: boot_1.CW.getAvatarPanel(account_id, {
                                            clicktip: !1,
                                            size: "small"
                                        }) + '<p class="autotrim">' + common_2.escape_html(name) + "</p>"
                                    })
                                }
                                return list
                            },
                            select: function(account_id) {
                                boot_1.AC.view.openProfileWindow(account_id), this.close()
                            }
                        }));
                        var link = $(this);
                        more_assign_tip.data.link = link, more_assign_tip.open(link)
                    }).on("copy", "._message", function(e) {
                        var selection = window.getSelection ? window.getSelection() : document.getSelection ? document.getSelection() : void 0;
                        if (selection) {
                            var range = selection.getRangeAt(0),
                                fragment = range.cloneContents(),
                                wrapperTag = document.createElement("div");
                            wrapperTag.appendChild(fragment.cloneNode(!0));
                            var copiedTag = $(wrapperTag),
                                mentions = copiedTag.find(".chatTimeLineTo"),
                                replies = copiedTag.find(".chatTimeLineReply");
                            if (mentions.length || replies.length) {
                                var actionArea = copiedTag.find(".actionArea");
                                actionArea.length && (actionArea.before("\n"), actionArea.remove());
                                var timeStamp = copiedTag.find(".timeStamp");
                                timeStamp.length && timeStamp.before("\n"), mentions.each(function(index, element) {
                                    var mention = $(element),
                                        toId = mention.next().attr("data-aid");
                                    mention.text("[To:" + toId + "]")
                                }), replies.each(function(index, element) {
                                    var replay = $(element),
                                        avatarId = replay.next().attr("data-aid"),
                                        roomId = replay.attr("data-rid"),
                                        messageId = replay.attr("data-mid");
                                    replay.text("[" + L.chatsend_reply + " aid=" + avatarId + " to=" + roomId + "-" + messageId + "]")
                                }), e.preventDefault();
                                var orgEvent = e.originalEvent,
                                    clipboardData = orgEvent.clipboardData;
                                clipboardData.setData("text", copiedTag.text())
                            }
                        }
                    }), $C("#_wrapper").on("click", "._messageLink", function() {
                        var reply = $(this);
                        replytip.open(reply)
                    }), timeline.scroll(function() {
                        if (boot_1.RM.timeline) {
                            var top = timeline.scrollTop();
                            if (top < 10 && (boot_1.RM.timeline.has_old ? boot_1.RM.timeline.loadOld() : boot_1.RM.timeline.build({
                                everScroll: !0
                            })), boot_1.RM.timeline.view.has_new) {
                                var bottom_scroll = $("#_messageIdEnd").offset().top < csa.offset().top + 50;
                                bottom_scroll && boot_1.RM.timeline.build({
                                    everScroll: !0
                                })
                            }
                        }
                    }).on("click", "._editCancel", function() {
                        $C("#_editCancel").click()
                    }).on("mouseup", "._avatarHoverTip", function() {
                        return !1
                    }).on("mouseup", "._messageActionNav", function() {
                        return !1
                    });
                    var reply_rid = 0,
                        reply_mid = 0,
                        reply_build = function(tipFrom, loaded) {
                            reply_rid = 0, reply_mid = 0;
                            var message_id = tipFrom.attr("data-mid"),
                                room_id = tipFrom.attr("data-rid"),
                                chat_dat = null,
                                room = boot_1.RL.rooms[room_id];
                            if (room && (room.prepareBuild(), chat_dat = room.timeline.chat_id2chat_dat[message_id]), $C("#_replyMessageButtonArea").hide(), chat_dat) {
                                reply_rid = room.id, reply_mid = chat_dat.id;
                                var html = room.timeline.view.getMessagePanel(chat_dat, {
                                    idPrefix: "replyTip"
                                });
                                $C("#_replyMessageTipContent").html(html);
                                var button_html = '<div class="tooltipFooter"><div class="_replyMoveButton _roomLink button" data-rid="' + reply_rid + '" data-mid="' + reply_mid + '">' + L.jump_to_message + "</div></div>";
                                $C("#_replyMessageButtonArea").html(button_html).show()
                            } else room ? loaded ? $C("#_replyMessageTipContent").html(L.chat_error_not_found) : (room.load({
                                jumpTo: message_id,
                                autoBuild: !1
                            }, function() {
                                reply_build(tipFrom, !0), replytip.move(tipFrom)
                            }), $C("#_replyMessageTipContent").html('<div class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_white.gif" />' + L.chat_loading + "</div>")) : $C("#_replyMessageTipContent").html(L.chat_error_not_found)
                        }, replytip = $("#_replyMessageTip").cwToolTip({
                            width: 400,
                            open: function(tipFrom) {
                                reply_build(tipFrom)
                            },
                            postOpen: function() {
                                $C("#_replyMessageTipContent").scrollTop(0)
                            },
                            close: function() {
                                reply_rid = 0, reply_mid = 0
                            }
                        });
                    replytip.$el.on("click", "._messageLink", function() {
                        replytip.close();
                        var reply = $(this),
                            current_reply = replytip.tipFrom,
                            rid = current_reply.attr("data-rid"),
                            mid = current_reply.attr("data-mid");
                        boot_1.RL.selectRoom(rid, mid, {
                            highlight: !1,
                            smoothScroll: !0,
                            messageHashUpdate: !1,
                            jumpToCallback: function() {
                                $("#_messageId" + mid).find("._messageLink[data-mid=" + reply.attr("data-mid") + "]").click()
                            }
                        })
                    }).on("click", "._replyMoveButton", function() {
                        replytip.close()
                    });
                    var quote_text = "";
                    $("#_quotePartlyToMessage").click(function() {
                        boot_1.AL.trackEvent("message_action", "click", {
                            label: "part_message_quote_action"
                        }), $C("#_quoteTip").cwToolTip().close(), self.setChatText(quote_text, !0), messageTextarea_1.messageArea.focus()
                    }), $("#_quotePartlyToTask").click(function() {
                        boot_1.AL.trackEvent("message_action", "click", {
                            label: "part_task_quote_action"
                        }), $C("#_quoteTip").cwToolTip().close(), boot_1.RS.view.setTask(quote_text, null, null, !0, !0)
                    })
                }, self.prepareSendArea = function() {
                    var imagedrop_tip = $("#_imageFileDrop").cwToolTip({
                        open: function() {
                            $("#_dragZone").show(), setTimeout(function() {
                                $("#_imageDropFileNameInput").focus()
                            })
                        },
                        close: function() {
                            $("#_dragZone").hide()
                        }
                    });
                    $("#_imageFileDrop").on("click", "#_imageFileDropClose", function() {
                        imagedrop_tip.close(), $(this).removeData("send_file")
                    }).on("click", "#_imageDropSendButton", function() {
                        var name = $("#_imageDropFileNameInput").val(),
                            file = $(this).data("send_file");
                        file.name = name + "." + file.name.split(".").pop(), self.sendFiles(boot_1.RM.id, [file]), imagedrop_tip.close(), $(this).removeData("send_file")
                    }).on("keypress", "#_imageDropFileNameInput", function(e) {
                        13 === e.keyCode && $("#_imageDropSendButton").click()
                    }), $("#_imageDropFileNameInput").on("change", this, function() {
                        var file = $("#_imageDropSendButton").data("send_file");
                        file.name = $(this).val() + "." + file.type.match(/(^image\/)(.+)/)[2]
                    }), $("#_sendEnterAction").cwCheckBox({
                        update: function() {
                            boot_1.AL.trackEvent("message_input", "open", {
                                label: "message_enter_action"
                            });
                            var change = !1;
                            this.isChecked() ? "br" == boot_1.ST.data.enter_action && (change = !0, boot_1.ST.data.enter_action = "send") : "send" == boot_1.ST.data.enter_action && (change = !0, boot_1.ST.data.enter_action = "br"), change && ("send" == boot_1.ST.data.enter_action ? this.check() : this.unCheck(), self.updatePlaceholder(), boot_1.CW.post("gateway.php", {
                                cmd: "send_chat_setting",
                                data: {
                                    enter_action: boot_1.ST.data.enter_action
                                }
                            }))
                        }
                    }), $("#_sendEnterActionArea").click(function() {
                        return $("#_sendEnterAction").cwCheckBox().toggle(), $(this).cwMessageTip().refresh(), !1
                    }).cwMessageTip({
                        closeOnClick: !1,
                        message: function() {
                            var msg = L.chatsend_enter_action_explain + ": ";
                            return msg += $("#_sendEnterAction").cwCheckBox().isChecked() ? L.on : L.off
                        }
                    }), messageTextarea_1.messageArea.clearValue(), self.model.chatedit_id = 0, $C("#_sendButton").click(function() {
                        self.sendMessage(), boot_1.AL.trackEvent("message_input", "click", {
                            label: "send_message"
                        })
                    }).keydown(function(e) {
                        if (9 != e.keyCode) return 13 == e.keyCode && self.sendMessage(), !1
                    }), messageTextarea_1.messageArea.bindEvent("change", function() {
                        self.resizeChatArea(), messageTextarea_1.messageArea.updateCaretPos()
                    }), messageTextarea_1.messageArea.bindEvent("keydown", function(e) {
                        self.chatTextKeyDown(e), self.resizeChatArea()
                    }), messageTextarea_1.messageArea.bindEvent("keyup", function(e) {
                        self.chatTextKeyUp(e), self.resizeChatArea()
                    }), messageTextarea_1.messageArea.bindEvent("focus", function() {
                        self.expandChatArea(!0)
                    }), messageTextarea_1.messageArea.bindEvent("blur", function() {
                        messageTextarea_1.messageArea.updateCaretPos(), self.expandChatArea(!1)
                    }), messageTextarea_1.messageArea.blur(), messageTextarea_1.messageArea.bindPasteImageEvent(function(item) {
                        var file = item.getAsFile(),
                            type = item.type.split("/").pop(),
                            src = URL.createObjectURL(file);
                        $("#_imageDropZone").html('<img src="' + src + '">');
                        var default_filename = "screenshot_" + boot_1.CW.getDate(common_2.time(), "Y_m_d");
                        $("#_imageDropFileNameInput").val(default_filename), file.name = default_filename + "." + type, $("#_imageDropSendButton").data("send_file", file), imagedrop_tip.open($("#_file"))
                    })
                }, self.updatePlaceholder = function() {
                    if (boot_1.RM && boot_1.RM.view.disabled_send) return void messageTextarea_1.messageArea.clearPlaceholder();
                    var message = L.chatsend_chat_explain;
                    message += "send" == boot_1.ST.data.enter_action ? L.chatsend_enter_action_explain_enter : L.chatsend_enter_action_explain_enter_send, messageTextarea_1.messageArea.setPlaceholder(message)
                }, self.getTextSelection = function() {
                    function rec(elem) {
                        return $(elem).contents().map(function() {
                            return 3 === this.nodeType ? this.nodeValue : 1 === this.nodeType && "img" === this.nodeName.toLocaleLowerCase() ? this.getAttribute("alt") || "" : 1 === this.nodeType && "a" === this.nodeName.toLocaleLowerCase() ? this.getAttribute("href") || "" : rec(this)
                        }).get()
                    }
                    var text = "";
                    try {
                        text = window.getSelection().getRangeAt(0).toString();
                        var fragment = window.getSelection().getRangeAt(0).cloneContents();
                        text = rec(fragment).join("")
                    } catch (e) {
                        text = ""
                    }
                    return text
                }, self.getSendType = function() {
                    return send_type
                }, self.prepareEmoticonImage = function() {
                    for (var html = "", i = 0; i < boot_1.CW.emoticon.length; i++) {
                        var emo = boot_1.CW.emoticon[i];
                        html += '<li><img src="image/emoticon/' + emo.src + '" title="' + emo.title + '" alt="' + emo.key + '"/></li>'
                    }
                    $("#_emoticonGallery").html(html)
                };
                var emo_tip = null;
                self.prepareEmoticon = function() {
                    var emoticon_hint = "";
                    emoticon_hint = common_1._is_mac ? L.chatsend_shift_and_command_hint : L.chatsend_shift_and_ctrl_hint, emo_tip = $("#_emoticonList").cwToolTip({
                        open: function() {
                            $C("#_emoticonDescription").text(emoticon_hint)
                        }
                    }), $C("#_emoticonList").on("mouseenter", "li", function() {
                        var img = $(this).find("img");
                        $C("#_emoticonDescription").text(img.attr("title") + " " + img.attr("alt"))
                    }).on("mouseleave", "li", function() {
                        $C("#_emoticonDescription").text(emoticon_hint)
                    }).on("click", "li", function() {
                        boot_1.CW.view.key.ctrl || boot_1.CW.view.key.command ? (emo_tip.close(), self.sendMessage($(this).find("img").prop("alt"), !0)) : (messageTextarea_1.messageArea.focus(), self.setChatText($(this).find("img").prop("alt"), !0), boot_1.CW.view.key.shift || emo_tip.close())
                    })
                }, self.prepareTo = function() {
                    var to_listtip = $("#_toList").cwListTip({
                        fixHeight: !0,
                        search: !0,
                        multiSelect: !1,
                        selectOptionArea: '<span id="_toListSelectAll" class="linkStatus">' + L.selectall_full + "</span>",
                        useHtmlLabel: !0,
                        selectable: !1,
                        placeHolder: L.chatroom_search_member,
                        list: function() {
                            if (!boot_1.RM) return [];
                            var mem_list = boot_1.RM.getSortedMemberList(),
                                list = [],
                                mem_length = mem_list.length;
                            this.data.aid2name = {};
                            for (var idx = 0; idx < mem_length; idx++) {
                                var account_id = mem_list[idx];
                                if (account_id != boot_1.AC.myid) {
                                    var name;
                                    name = boot_1.CW.is_business && boot_1.ST.data.private_nickname && !boot_1.RM.isInternal() ? boot_1.AC.getDefaultNickName(account_id) : boot_1.AC.getNickName(account_id), this.data.aid2name[account_id] = name, list.push({
                                        keys: boot_1.AC.getSearchKeys(account_id),
                                        value: account_id,
                                        label: boot_1.CW.getAvatarPanel(account_id, {
                                            clicktip: !1,
                                            size: "small"
                                        }) + '<p class="autotrim">' + common_2.escape_html(name) + "</p>"
                                    })
                                }
                            }
                            return list
                        },
                        select: function(account_id) {
                            var name = this.data.aid2name[account_id];
                            self.setChatText("[To:" + account_id + "] " + name + "\n", !0), boot_1.CW.view.key.shift || boot_1.CW.view.key.ctrl ? this.searchbox.$el.focus() : (this.close(), messageTextarea_1.messageArea.focus())
                        }
                    });
                    $("#_to").click(function() {
                        to_listtip.open($(this)), boot_1.AL.trackEvent("message_input", "open", {
                            label: "to_balloon"
                        })
                    }), $("#_toListSelectAll").click(function() {
                        for (var mem_list = to_listtip.getList(), to_text = "", i = 0, mem_length = mem_list.length; i < mem_length; i++) {
                            var account_id = mem_list[i].value,
                                name = to_listtip.data.aid2name[account_id];
                            to_text += "[To:" + account_id + "] " + name + "\n"
                        }
                        self.setChatText(to_text, !0), to_listtip.close(), messageTextarea_1.messageArea.focus()
                    }), to_listtip.ul.on("mouseenter", "li", function() {
                        $C("#_nickNameSetting").hide(), $C("#_toListHint").show()
                    }).on("mouseleave", "li", function() {
                        $C("#_nickNameSetting").show(), $C("#_toListHint").hide()
                    }), $("#_nickNameSetting").click(function() {
                        self.openSettingNickname(boot_1.RM.id), $("#_toList").cwListTip().close()
                    })
                }, self.prepareSendFile = function() {
                    sending = !1;
                    var upload_tip;
                    if (common_1._has_fileapi) {
                        $("#_file").click(function() {
                            boot_1.AL.trackEvent("message_input", "click", {
                                label: "upload_file"
                            }), $C("#_fileUploadTip").show(), $C("#_fileInput").click()
                        });
                        var elem_dragging = !1,
                            dropbox_hided = !0,
                            dropbox_showing = null,
                            filedrop_tip = $("#_fileDrop").cwToolTip({
                                open: function() {
                                    dropbox_hided = !1, $C("#_dragZone").show(), $C("#_dropZone").css("background-color", "#fff")
                                },
                                close: function() {
                                    $C("#_dragZone").hide(), dropbox_hided = !0
                                }
                            });
                        $(document.body).on("dragstart", function() {
                            elem_dragging = !0
                        }).on("dragover", function(e) {
                            e.stopPropagation(), e.preventDefault(), e.originalEvent.dataTransfer.dropEffect = "none"
                        }).on("dragenter", function() {
                            return !elem_dragging && ( !! $C("#_file").isVisible() && (dropbox_showing || (dropbox_showing = setTimeout(function() {
                                dropbox_hided && filedrop_tip.open($("#_file")), dropbox_showing = null
                            })), !1))
                        }).on("dragend", function() {
                            elem_dragging = !1
                        }), $C("#_dragZone").on("dragleave", function() {
                            return !elem_dragging && (dropbox_showing || filedrop_tip.close(), !1)
                        }).on("drop", function(e) {
                            return e.stopPropagation(), e.preventDefault(), !1
                        }), $C("#_dropZone").on("dragover", function() {
                            return !elem_dragging && ($C("#_dropZone").css("background-color", "#E9F4F5"), !1)
                        }).on("dragleave", function() {
                            return !elem_dragging && ($C("#_dropZone").css("background-color", "#fff"), !1)
                        }).on("dragover", function(e) {
                            e.stopPropagation(), e.preventDefault(), e.originalEvent.dataTransfer.dropEffect = "copy"
                        }).on("drop", function(e) {
                            if (e.stopPropagation(), e.preventDefault(), elem_dragging) return !1;
                            var files = e.originalEvent.dataTransfer.files;
                            return self.sendFiles(boot_1.RM.id, files), setTimeout(function() {
                                filedrop_tip.close(), dropbox_hided = !0
                            }), !1
                        })
                    } else upload_tip = $("#_fileUploadTip").cwToolTip(), $C("#_file").click(function() {
                        boot_1.AL.trackEvent("message_input", "click", {
                            label: "upload_file"
                        }), upload_tip.open($(this))
                    }), boot_1.CW.view.onIframeReady(function() {
                        $("#_fileFrame").on("load", function() {
                            try {
                                var content = common_2.unescape_html($(this).contents().find("body").html());
                                if (!(content.length > 0)) throw "error";
                                content = content.match(/\{.+\}/)[0];
                                var json = $.parseJSON(content);
                                void 0 != json.result.is_storage_limit ? boot_1.CW.showStorageLimitDialog("file") : !json.status.success && json.status.message ? boot_1.CW.alert(json.status.message) : 1 == json.status.success && (boot_1.FL.updateStorageInfo(json.result.storage, json.result.storage_limit, json.result.limit_time, json.result.is_limit), boot_1.CW.watch())
                            } catch (e) {
                                if (sending) {
                                    if (file_send_retry_count++, !(file_send_retry_count > 1)) return void setTimeout(function() {
                                        $C("#_fileInput").trigger("change")
                                    }, 1e3);
                                    var msg = L.upload_cancel_send_message.replace(/%%size%%/g, common_2.bytename(boot_1.FL.storage.available)),
                                        link_label = "";
                                    "free" == boot_1.CW.plan ? (msg += L.storage_cancel_send_object_suffix_upgrade, link_label = L.storage_cancel_upgrade_label) : boot_1.CW.is_business && !boot_1.CW.is_admin ? (msg += L.storage_cancel_send_object_suffix_tell_admin, $("#cw_upload_error_button").hide()) : (msg += L.storage_cancel_send_object_suffix_add_storage, link_label = L.storage_cancel_add_storage_label), $("#cw_upload_error_body").html(msg), $("#cw_upload_error_link").val(link_label), $("#cw_upload_error_dialog").dialog("open")
                                }
                            }
                            sending && $(this).prop("src", ""), reset_send_file()
                        })
                    });
                    $C("#_fileInput").change(function() {
                        var fileinfo_list = [];
                        if (common_1._has_fileapi) fileinfo_list = this.files;
                        else {
                            if (sending) return;
                            fileinfo_list = [{
                                name: this.value.replace(/\\/g, "/").replace(/.*\//, ""),
                                size: 0
                            }]
                        }
                        common_1._has_fileapi || upload_tip.close(), sending = !0, self.sendFiles(boot_1.RM.id, fileinfo_list)
                    }), $("#cw_upload_error_dialog").dialog({
                        width: 600,
                        height: "auto",
                        title: L.storage_cancel_send_cancel.replace(/%%object%%/, L.file),
                        autoOpen: !1,
                        modal: !0,
                        hide: "fade",
                        resizable: !1,
                        buttons: [boot_1.DIALOG_CLOSE_BUTTON]
                    }), $("#cw_upload_error_link").click(function() {
                        $("#cw_upload_error_dialog").dialog("close"), "free" == boot_1.CW.plan ? boot_1.CW.view.showServiceAdmin("upgrade") : boot_1.CW.view.showOptionPlanPrice()
                    })
                }, self.testShowSendFiles = function(filename, size, loaded_percent) {
                    var fileinfo = {
                        name: filename,
                        size: size
                    }, progress = $('<li><p class="fileSendStatusMeta autotrim">' + common_2.escape_html(fileinfo.name) + " (" + common_2.bytename(fileinfo.size) + ')</p><div class="fileSendStatusBarArea"><div class="_fileSendStatusBarProgress fileSendStatusBar fileSendStatusBarProgress"></div></div><p class="_fileSendProgress fileSendProgress">0%</p>' + ('<span class="_fileSendCancel icoFontCancel icFileSendCancel"></span><span class="icoTextHide">' + L.button_cancel + "</span></li>"));
                    fsa.append(progress).show(), progress.find("._fileSendProgress").text(loaded_percent + "%"), progress.find("._fileSendStatusBarProgress").css("width", loaded_percent + "%"), boot_1.CS.view.resizeChatArea(!0), progress.find("._fileSendCancel").click(function() {
                        progress.fadeOut("fast", function() {
                            progress.remove(), boot_1.CS.view.resizeChatArea(!0)
                        })
                    })
                }, self.sendFiles = function(room_id, files) {
                    for (var executable_extensions = ["ade", "adp", "bat", "chm", "cmd", "com", "cpl", "exe", "hta", "ins", "isp", "jse", "lib", "mde", "msc", "msp", "mst", "pif", "scr", "sct", "shb", "sys", "vb", "vbe", "vbs", "vxd", "wsc", "wsf", "wsh", "lnk"], i = 0; i < files.length; i++) {
                        var fileinfo = files[i],
                            extension = "",
                            match = fileinfo.name.match(/\.([^\.]+)$/);
                        match && (extension = match[1].toLowerCase());
                        var max_filesize = 5368709120;
                        if (fileinfo.size >= max_filesize) return boot_1.CW.alert(L.error_upload_over_max_filesize.replace(/%%max_size%%/g, common_2.bytename(max_filesize)).replace(/%%size%%/g, common_2.bytename(fileinfo.size))), void reset_send_file();
                        if (executable_extensions.indexOf(extension) !== -1) return boot_1.CW.alert(L.error_upload_executable), void reset_send_file()
                    }
                    for (var upload_list = [], i_1 = 0; i_1 < files.length; i_1++) {
                        var fileinfo_1 = files[i_1];
                        upload_list.push({
                            key: i_1,
                            name: fileinfo_1.name,
                            size: fileinfo_1.size
                        })
                    }
                    boot_1.CW.post("gateway.php", {
                        cmd: "get_s3_post_object",
                        room_id: room_id,
                        list: upload_list,
                        noredirect: common_1._has_fileapi,
                        region: "tokyo"
                    }, function(json) {
                        for (var i = 0, info_len = json.upload_info.length; i < info_len; i++) {
                            var info_dat = json.upload_info[i];
                            if (common_1._has_fileapi) {
                                var fd = new FormData;
                                fd.append("key", info_dat.uri), fd.append("AWSAccessKeyId", info_dat.accesskey), fd.append("acl", info_dat.acl), fd.append("policy", info_dat.policy), fd.append("signature", info_dat.signature), fd.append("Content-Type", "application/octet-stream"), fd.append("Content-Disposition", info_dat.disposition), fd.append("x-amz-server-side-encryption", "AES256"), info_dat.auth_token && fd.append("x-amz-security-token", info_dat.auth_token), fd.append("file", files[info_dat.key]),
                                function(fileinfo, info_dat) {
                                    var user_aborted = !1,
                                        ajax = $.ajax({
                                            url: S3_PATH,
                                            type: "POST",
                                            data: fd,
                                            processData: !1,
                                            contentType: !1,
                                            xhr: function() {
                                                var xhr = new window.XMLHttpRequest;
                                                return xhr.upload.addEventListener("progress", function(e) {
                                                    if (e.lengthComputable) {
                                                        var loaded_percent = parseInt(e.loaded / e.total * 100, 10);
                                                        progress.find("._fileSendProgress").text(loaded_percent + "%"), progress.find("._fileSendStatusBarProgress").css("width", loaded_percent + "%")
                                                    }
                                                }), xhr
                                            },
                                            success: function() {
                                                progress.find("._fileSendProgress").text("100%"), progress.find("._fileSendStatusBarProgress").css("width", "100%"), boot_1.CW.get(info_dat.redirect, {}, function() {
                                                    progress.fadeOut("fast", function() {
                                                        progress.remove(), boot_1.CS.view.resizeChatArea(!0)
                                                    })
                                                }, function() {
                                                    boot_1.CW.view.alert(L.error_upload + L._chatwork_path_help_file_upload_error, "", !0), progress.remove(), boot_1.CS.view.resizeChatArea(!0)
                                                })
                                            },
                                            error: function() {
                                                user_aborted || boot_1.CW.view.alert(L.error_upload + L._chatwork_path_help_file_upload_error, "", !0), progress.remove(), boot_1.CS.view.resizeChatArea(!0)
                                            }
                                        }),
                                        progress = $('<li><p class="fileSendStatusMeta autotrim">' + common_2.escape_html(fileinfo.name) + " (" + common_2.bytename(fileinfo.size) + ')</p><div class="fileSendStatusBarArea"><div class="_fileSendStatusBarProgress fileSendStatusBar fileSendStatusBarProgress"></div></div><p class="_fileSendProgress fileSendProgress">0%</p>' + ('<span class="_fileSendCancel icoFontCancel icFileSendCancel"></span><span class="icoTextHide">' + L.button_cancel + "</span></li>"));
                                    fsa.append(progress).show(), fst.fadeIn(), progress.slideDown("fast", function() {
                                        boot_1.CS.view.resizeChatArea(!0)
                                    }), progress.find("._fileSendCancel").click(function() {
                                        user_aborted = !0, ajax.abort()
                                    })
                                }(files[info_dat.key], info_dat)
                            } else {
                                $C("#_file").stop().fadeOut(function() {
                                    fst.stop().fadeIn()
                                });
                                var file_html = '<input type="hidden" name="key" value="' + info_dat.uri + '"/>' + ('<input type="hidden" name="AWSAccessKeyId" value="' + info_dat.accesskey + '"/>') + ('<input type="hidden" name="acl" value="' + info_dat.acl + '"/>') + ('<input type="hidden" name="success_action_redirect" value="' + info_dat.redirect + '"/>') + ('<input type="hidden" name="policy" value="' + info_dat.policy + '"/>') + ('<input type="hidden" name="signature" value="' + info_dat.signature + '"/>') + '<input type="hidden" name="Content-Type" value="application/octet-stream"/>' + ('<input type="hidden" name="Content-Disposition" value="' + common_2.escape_html(info_dat.disposition) + '"/>') + '<input type="hidden" name="x-amz-server-side-encryption" value="AES256"/>';
                                info_dat.auth_token && (file_html += '<input type="hidden" name="x-amz-security-token" value="' + info_dat.auth_token + '"/>'), $("#_fileHiddenValue").html(file_html), $("#_fileHiddenForm").submit()
                            }
                        }
                    }, function(error) {
                        error.indexOf("is_storage_limit") !== -1 ? boot_1.CW.showStorageLimitDialog("file") : $.isArray(error) ? boot_1.CW.alert(L.error_upload + " " + error.join("\n")) : boot_1.CW.alert(L.error_upload)
                    })
                }, self.initChatText = function() {
                    messageTextarea_1.messageArea.clearValue(), self.expandChatArea(!1), boot_1.CS.clearChatEdit(), messageTextarea_1.messageArea.blur(), boot_1.RS.view.initTaskArea()
                }, self.sendMessage = function(message, not_clear) {
                    if (!boot_1.RM.id) return void boot_1.CW.alert(L.error_no_select);
                    if (!boot_1.RM.view.disabled_send && (void 0 == message && (message = messageTextarea_1.messageArea.getValue()), message = S(message).trimRight().s, 0 != message.length)) {
                        var room_id = boot_1.RM.id;
                        messageTextarea_1.messageArea.focus();
                        var edit_id;
                        not_clear || (edit_id = self.model.chatedit_id, self.clearChatEdit(edit_id), self.setChatText(""), boot_1.CS.deleteChatDraft(boot_1.RM.id)), message = boot_1.CS.convertToSend(message);
                        var cur_room = boot_1.RM,
                            sending_id = 0;
                        edit_id || (sending_id = cur_room.addSendingChat(message)), self.model.sendMessage(room_id, message, {
                            read: 1,
                            edit_id: edit_id
                        }, function(json) {
                            if (sending_id) {
                                cur_room.setMessageIdForSendingId(sending_id, json.new_message_id);
                                var force_update_message_after_time_msec = 900;
                                setTimeout(function() {
                                    cur_room.message_id2sending_id[json.new_message_id] && boot_1.CW.watch()
                                }, force_update_message_after_time_msec)
                            }
                            edit_id && cur_room.timeline.editChat(edit_id, message), cur_room.id == boot_1.RM.id && cur_room.build(), $.support.isWindowsFirefox && messageTextarea_1.messageArea.clearValue()
                        }, function(error) {
                            sending_id && cur_room.deleteSendingChat(sending_id), error ? boot_1.CW.alert(error) : boot_1.CW.alert(L.chatsend_error_send), boot_1.RL.selectRoom(cur_room.id), self.setChatText(message)
                        })
                    }
                }, self.chatTextKeyDown = function(e) {
                    if (chat_ctrl = "undefined" == typeof e.modifiers ? e.ctrlKey : e.modifiers & Event.CONTROL_MASK, chat_shift = "undefined" == typeof e.modifiers ? e.shiftKey : e.modifiers & Event.SHIFT_MASK, chat_alt = "undefined" == typeof e.modifiers ? e.altKey : e.modifiers & Event.ALT_MASK, chat_command = "undefined" == typeof e.modifiers ? e.metaKey : e.modifiers & Event.META_MASK, window.press_key = press_key = e.keyCode, 38 == press_key) {
                        var last_chat_id = boot_1.RM.timeline.getLastChatId();
                        messageTextarea_1.messageArea.isEmpty() && boot_1.RM.timeline.chat_id2chat_dat[last_chat_id].aid == boot_1.AC.myid && self.setChatEdit(last_chat_id, boot_1.RM)
                    } else 27 == press_key && self.clearChatEdit(); if ("send" == boot_1.ST.data.enter_action) {
                        if (13 == press_key) {
                            if (!(chat_shift || chat_ctrl || chat_alt || chat_command)) return e.preventDefault(), !1;
                            if (chat_command) return self.chatTextKeyUp({
                                keyCode: 13
                            }), e.preventDefault(), !1
                        }
                    } else if (13 == press_key && (chat_ctrl || chat_shift || chat_alt || chat_command)) return chat_command && self.chatTextKeyUp({
                        keyCode: 13
                    }), e.preventDefault(), !1;
                    boot_1.RM && self.raiseRoomToTop(boot_1.RM.id)
                }, self.chatTextKeyUp = function(e) {
                    var up_key = e.keyCode;
                    if (13 == up_key && 13 == press_key) {
                        if ("send" == boot_1.ST.data.enter_action) chat_shift || chat_ctrl || chat_alt || chat_command ? (chat_ctrl || chat_alt || chat_command) && messageTextarea_1.messageArea.insertValue("\n") : self.sendMessage();
                        else if (chat_ctrl || chat_shift || chat_alt || chat_command) return self.sendMessage(), !1;
                        messageTextarea_1.messageArea.replaceCodeBlock()
                    }
                    messageTextarea_1.messageArea.isEmpty() && boot_1.CS.clearChatEdit(), 27 == press_key && 27 == up_key && messageTextarea_1.messageArea.blur()
                };
                var expanded_room_id = 0;
                self.expandChatArea = function(flag) {
                    boot_1.RM && boot_1.RM.id != expanded_room_id && (!boot_1.RM.view.disabled_send && flag ? (expanded_room_id = boot_1.RM.id, self.resizeChatArea(!0)) : (expanded_room_id = 0, self.resizeChatArea(!0)))
                };
                var timeline_min_height = boot_1.TM.timeline_min_height,
                    chattext_min_content_height = boot_1.TM.chattext_min_content_height,
                    chatSendArea_expandto_height_default = boot_1.TM.chatSendArea_expandto_height_default,
                    chatSendArea_initial_height = boot_1.TM.chatSendArea_initial_height,
                    chattext_padding_height = cta.innerHeight() - messageTextarea_1.messageArea.getHeight(),
                    mainContent_title_outer_height = $("#_roomTitle").outerHeight(!0),
                    chatText_line_height = 30,
                    latest_content_height = 0;
                self.resizeChatArea = function(force_build) {
                    fsa.isVisible() && 0 == fsa.find("li").length && (fsa.hide(), fst.fadeOut(), $C("#_fileInput").val(""));
                    var current_send_area_height = csa.height(),
                        current_height = messageTextarea_1.messageArea.getHeight(),
                        current_scrolltop = cta.scrollTop();
                    messageTextarea_1.messageArea.setHeight(0);
                    var content_height = messageTextarea_1.messageArea.getScrollHeight();
                    if (content_height < chattext_min_content_height && (content_height = chattext_min_content_height), !force_build && latest_content_height == content_height) return messageTextarea_1.messageArea.setHeight(current_height), void(0 != current_scrolltop && cta.scrollTop(current_scrolltop));
                    var fileSendStatusArea_height = fsa.outerHeight(),
                        chatSendToolbar_height = $C("#_chatSendToolbar").outerHeight(),
                        new_height = content_height + chattext_padding_height + chatSendToolbar_height + fileSendStatusArea_height,
                        min_height = 0;
                    min_height = expanded_room_id ? chatSendArea_expandto_height_default + fileSendStatusArea_height : chatSendArea_initial_height + fileSendStatusArea_height, new_height < min_height && (new_height = min_height);
                    var mainContent_height = $C("#_mainContent").height();
                    if (mainContent_height - new_height < timeline_min_height ? cta.css({
                        height: mainContent_height - timeline_min_height - chattext_padding_height - chatSendToolbar_height - fileSendStatusArea_height,
                        "overflow-y": "scroll"
                    }) : cta.css({
                        height: "",
                        "overflow-y": "hidden"
                    }), force_build || current_send_area_height != new_height) {
                        var chattext_height = new_height - chatSendToolbar_height - fileSendStatusArea_height - chattext_padding_height;
                        messageTextarea_1.messageArea.setHeight(chattext_height);
                        var sendArea_outer_height = csa.outerHeight(),
                            timeline_height = mainContent_height - mainContent_title_outer_height - sendArea_outer_height,
                            tl = $C("#_timeLine"),
                            current_timeline_height = tl.height(),
                            current_timeline_scrolltop = tl.scrollTop();
                        tl.height(timeline_height), tl.scrollTop(current_timeline_scrolltop + (current_timeline_height - timeline_height))
                    } else messageTextarea_1.messageArea.setHeight(current_height);
                    latest_content_height < content_height ? cta.scrollTop(current_scrolltop + chatText_line_height) : cta.scrollTop(current_scrolltop), latest_content_height = content_height
                }, self.disableChatArea = function() {
                    $C("#_chatSendTool").hide(), $C("#_sendEnterActionArea").hide(), $C("#_editCancel").click(), $C("#_sendButton").cwButton().disable(), messageTextarea_1.messageArea.setPlaceholder(L.chatsend_not_allow_send_messages)
                }, self.enableChatArea = function() {
                    $C("#_chatSendTool").show(), $C("#_sendEnterActionArea").show(), $C("#_sendButton").cwButton().enable(), self.updatePlaceholder()
                }, self.setChatText = function(text, insert) {
                    self.expandChatArea(!0), boot_1.RM && insert && self.raiseRoomToTop(boot_1.RM.id), text = boot_1.CS.convertToEdit(text), insert ? messageTextarea_1.messageArea.insertValue(text) : messageTextarea_1.messageArea.setValue(text), self.resizeChatArea(!0), messageTextarea_1.messageArea.scrollBottom()
                }, self.setChatEdit = function(chat_id, room) {
                    if (self.model.chatedit_id != chat_id) {
                        if (self.model.chatedit_id = chat_id, self.setChatEditColor(chat_id), !room) return !1;
                        if (room.timeline.chat_id2chat_dat[chat_id]) {
                            var draft = (boot_1.CS.getChatDraft(room.id) || {}).text;
                            self.setChatText(draft || room.timeline.chat_id2chat_dat[chat_id].msg)
                        }
                        messageTextarea_1.messageArea.focus()
                    }
                    boot_1.RM.timeline.build()
                }, self.setChatEditColor = function() {
                    $C("#_editInfo").show(), $C("#_externalInfo").hide(), $C("#_sendButton").cwButton({
                        text: L.button_save
                    }), cta.addClass("chatSendTextareaEdit")
                }, self.clearChatEdit = function(no_build) {
                    self.model.chatedit_id && ($C("#_editInfo").hide(), self.setChatText(""), cta.data("external") === !0 && $C("#_externalInfo").show(), cta.removeClass("chatSendTextareaEdit"), $C("#_sendButton").cwButton({
                        text: L.button_send
                    }), self.model.chatedit_id = 0, no_build || boot_1.RM.timeline.build())
                }, self.raiseRoomToTop = function(room_id) {
                    messageTextarea_1.messageArea.isEmpty() && (boot_1.RL.setLastUpdateTime(room_id, common_2.time()), boot_1.RL.build(), $C("#_roomListArea").scrollTop(0))
                }, self.prepareSettingNickname = function() {
                    nickname_dialog = $("#_nicknameDialog").cwDialog({
                        title: L.nickname_title,
                        width: 520,
                        autoOpen: !1,
                        hide: "fade",
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            if (0 === idx) {
                                var updated = !1,
                                    nickname_dat = {};
                                $("#_nicknameList").find("input").each(function() {
                                    var nickname = $(this).val(),
                                        aid = this.id.substr(9);
                                    boot_1.AC.getNickName(aid, !0) != nickname && (nickname_dat[aid] = nickname, updated = !0)
                                }), updated && boot_1.CW.post("gateway.php", {
                                    cmd: "send_nickname",
                                    n: nickname_dat
                                }, function(json) {
                                    for (var aid in json.nickname_dat) boot_1.AC.setNickName(aid, json.nickname_dat[aid])
                                }), this.close()
                            }
                        },
                        open: function(room_id) {
                            var html = "",
                                mem_list = [],
                                member_dat = boot_1.RL.rooms[room_id].member_dat;
                            for (var aid in member_dat) aid != boot_1.AC.myid && mem_list.push(aid);
                            mem_list.sort(function(a, b) {
                                return a == boot_1.AC.myid ? -1 : b == boot_1.AC.myid ? 1 : boot_1.AC.getMentionNum(b) - boot_1.AC.getMentionNum(a)
                            });
                            for (var idx_1 = 0, mem_len = mem_list.length; idx_1 < mem_len; idx_1++) {
                                var aid = mem_list[idx_1];
                                html += "<tr><td>" + boot_1.CW.getAvatarPanel(aid, {
                                    size: "medium",
                                    clicktip: !1,
                                    hovertip: !1
                                }) + "</td>" + ('<td class="name"><span class="autotrim">' + boot_1.CW.getName(aid) + "</span></td>") + '<td class="nickname">' + ('<input type="text" id="_nickname' + aid + '" value="' + common_2.escape_html(boot_1.AC.getNickName(aid, !0)) + '"/>') + "</td></tr>"
                            }
                            $("#_nicknameList").html(html).scrollTop(0)
                        }
                    })
                }, self.openSettingNickname = function(room_id) {
                    nickname_dialog || self.prepareSettingNickname(), nickname_dialog.open(room_id)
                }
            }
            var Clipboard = require("clipboard"),
                common_1 = require("../lib/common"),
                common_2 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot"),
                messageTextarea_1 = require("../lib/messageTextarea"),
                S = require("string");
            exports.ChatSendView = ChatSendView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../lib/common": 69,
            "../lib/messageTextarea": 111,
            clipboard: 11,
            string: 46
        }
    ],
    132: [
        function(require, module, exports) {
            "use strict";

            function ChatWorkView(model) {
                var self = this;
                self.model = model, self.resize_delay_timer = null, self.is_biwa = !0, self.key = {}, self.keyfunc = {};
                var init_hash = "",
                    ip_error_alerted = !1,
                    unloading = !1,
                    user_guide_dialog = null,
                    announce_dialog = null,
                    storage_limit_dialog = null,
                    feedback_complete_dialog = null,
                    limit_error_dialog = null;
                self.prepare = function() {
                    self.prepareHiddenIframe(), $C("#_wrapper").on("mouseenter", "._showDescription", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this),
                                option = {
                                    message: function() {
                                        return item.hasClass("_showDescription") ? item.attr("aria-label") : ""
                                    }
                                }, delay = item.attr("data-delay");
                            void 0 != delay ? option.delay = parseInt(delay, 10) : option.delay = boot_1.TM.messagetip_delay, item.cwMessageTip(option).open()
                        }
                    }).on("mouseenter", "._externalMark", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this),
                                option = {
                                    message: L.chatroom_not_only_internal,
                                    offsetLeft: boot_1.TM.extermal_marktip_offset_left
                                };
                            item.cwMessageTip(option).open()
                        }
                    }).on("mouseenter", "._pin", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this),
                                option = {
                                    message: L.pin_hint,
                                    delayQuickMode: !1,
                                    delay: boot_1.TM.messagetip_delay
                                };
                            item.cwMessageTip(option).open()
                        }
                    }).on("click", "._joinLive", function() {
                        join_live_tip || self.prepareLive(), join_live_tip.open($(this))
                    }).on("click", "._profileTipCheckLabel", function() {
                        $(this).closest("._contactPanel").find("._cwCB").click()
                    }), $C("body").on("click", "._previewLink", function() {
                        var link = $(this);
                        return self.openPreviewLinkDialog(link.attr("data-type"), common_2.urldecode(link.attr("data-url")), link.attr("data-user-id"), link.attr("data-content-id")), !1
                    }).on("keypress", "form input[type=text]", function(e) {
                        if (13 == e.keyCode) return !1
                    }), $("#_openInfomation").click(function() {
                        self.openInformationPanel()
                    }), $C("#_notificationAnnounceLink").click(function() {
                        self.openAnnounceDialog(this.id, boot_1.ST.announce_dat.body)
                    }), $("#_feedback").click(function() {
                        $("#_feedbackDialog").cwDialog({
                            title: L.menu_feedback,
                            width: "auto",
                            height: "auto",
                            autoOpen: !0,
                            buttonLabels: [L.button_send, L.button_cancel],
                            buttonCancel: 1,
                            buttonSubmit: 0,
                            buttonClick: function(index) {
                                switch (index) {
                                    case 0:
                                        var feedback_message = $("#_feedbackMessage"),
                                            msg = feedback_message.val();
                                        msg && (boot_1.CW.showProgress(L.sending), this.close(), boot_1.CW.sendFeedback({
                                            message: msg,
                                            version: 2,
                                            success: function() {
                                                boot_1.CW.hideProgress(), feedback_message.val(""), self.openFeedbackCompleteDialog()
                                            },
                                            error: function() {
                                                boot_1.CW.hideProgress(), boot_1.CW.alert(L.raise_error)
                                            }
                                        }))
                                }
                            }
                        }), $.cwFloatBox.close($C("#_informationBox"))
                    }), $("#_userGuideLink").click(function() {
                        self.openUserGuideDialog(), $.cwFloatBox.close($C("#_informationBox"))
                    }), $("#_cheatSheetLink").click(function() {
                        boot_1.CHEATSHEET.view.open(), $.cwFloatBox.close($C("#_informationBox"))
                    }), (boot_1.canPlayOgg || boot_1.canPlayMp3) && (self.embedAudio("BG_call"), $("#_audio_BG_call").on("ended", function() {
                        this.play()
                    })), init_hash = document.location.hash, $C("body").on("offline", function() {
                        boot_1.CW.setConnectionError()
                    }).on("change", "._cwValidateFileImage", function() {
                        var result = $.cwValidate.File.hasError(this, {
                            maxsize: 716800,
                            onlyimage: !0
                        });
                        if (result) {
                            var error_message = result.join("\n");
                            boot_1.CW.alert(error_message)
                        }
                    }), $(window).on("beforeunload", function() {
                        unloading = !0, setTimeout(function() {
                            unloading = !1
                        }, 3e3)
                    }).on("resize", function() {
                        null === self.resize_delay_timer && (self.resize_delay_timer = setTimeout(self.model.resizeLayout, 300))
                    });
                    var shortcut_on = !0,
                        on_focus = null;
                    $C("document").on("focus", "input,textarea", function() {
                        shortcut_on = !1, on_focus = $(this)
                    }).on("blur", "input,textarea", function() {
                        shortcut_on = !0, on_focus = null
                    }).keydown(function(e) {
                        if (self.key.ctrl = "undefined" == typeof e.modifiers ? e.ctrlKey : e.modifiers & Event.CONTROL_MASK, self.key.shift = "undefined" == typeof e.modifiers ? e.shiftKey : e.modifiers & Event.SHIFT_MASK, self.key.alt = "undefined" == typeof e.modifiers ? e.altKey : e.modifiers & Event.ALT_MASK, self.key.command = "undefined" == typeof e.modifiers ? e.metaKey : e.modifiers & Event.META_MASK, shortcut_on ? on_focus && 0 != on_focus.offset().top && (shortcut_on = !1) : on_focus && 0 == on_focus.offset().top && (shortcut_on = !0), shortcut_on && !$.cwDialog.isShown() && !$.cwFloatWindow.isShown()) {
                            var map = self.getKeyCombinationMap(e.keyCode, self.key.ctrl, self.key.shift, self.key.alt, self.key.command);
                            if (void 0 != self.keyfunc[map]) return $C("#_wrapper").click(), self.keyfunc[map](), !1
                        }
                        if (27 == e.keyCode) return !1
                    }).keyup(function(e) {
                        self.key.ctrl = "undefined" == typeof e.modifiers ? e.ctrlKey : e.modifiers & Event.CONTROL_MASK, self.key.shift = "undefined" == typeof e.modifiers ? e.shiftKey : e.modifiers & Event.SHIFT_MASK, self.key.alt = "undefined" == typeof e.modifiers ? e.altKey : e.modifiers & Event.ALT_MASK, self.key.command = "undefined" == typeof e.modifiers ? e.metaKey : e.modifiers & Event.META_MASK
                    }), $(window).blur(function() {
                        self.key.ctrl = !1, self.key.shift = !1, self.key.alt = !1, self.key.command = !1
                    }), $("#_openServiceAdmin").click(function() {
                        self.showServiceAdmin()
                    }), $("#_openServiceAdminUpgrade").click(function() {
                        self.showServiceAdmin("upgrade")
                    }), $("#_storageLimitLink").click(function() {
                        storage_limit_dialog.close(), "free" == self.model.plan ? self.showServiceAdmin("upgrade") : self.showOptionPlanPrice()
                    }), self.onEndInitLoad(function() {
                        self.resizeLayout(), $("#_loader").fadeOut("slow"), $("#_wrapper").css({
                            visibility: "visible"
                        });
                        for (var cookie_list = ["ui_roomfilter", "ui_fold_roomlist", "ui_fold_roomsub", "ui_chatlist_width", "ui_subcontent_width", "ui_category"], i = 0, clen = cookie_list.length; i < clen; i++) {
                            var ckey = cookie_list[i],
                                cval = Cookies.get(ckey);
                            void 0 !== cval && Cookies.set(ckey, cval, {
                                expires: 3650
                            })
                        }
                    })
                };
                var join_live_tip = null;
                self.prepareLive = function() {
                    join_live_tip = $("#_joinLiveTip").cwToolTip({
                        open: function(tipFrom) {
                            this.data.live_id = tipFrom.attr("data-live-id"), this.data.account_id = tipFrom.attr("data-aid")
                        }
                    });
                    var open_live_window = function(type) {
                        var url;
                        join_live_tip.data.live_id ? url = boot_1.CW.getLiveUrlById(join_live_tip.data.live_id, type) : join_live_tip.data.account_id && (url = boot_1.CW.getLiveUrl(boot_1.AC.getRoomId(join_live_tip.data.account_id), [boot_1.AC.myid, join_live_tip.data.account_id], type)), window.open(url, "cwlive", "menubar=0,toolbar=0,titlebar=0,status=0,scrollbars=0,resizable=1"), join_live_tip.close()
                    };
                    join_live_tip.$el.on("click", "._joinLiveByVideo", function() {
                        open_live_window("video")
                    }).on("click", "._joinLiveByVoice", function() {
                        open_live_window("voice")
                    })
                }, self.prepareHiddenIframe = function() {
                    for (var hidden_iframe_list = [{
                        id: "_roomInfoFrame",
                        name: "form_update_room"
                    }, {
                        id: "_updateInvitationLinkSettingIframe",
                        name: "form_update_invitation_link_setting"
                    }, {
                        id: "_updateRoomPermissionSettingIframe",
                        name: "form_update_room_permission_setting"
                    }, {
                        id: "_formSetting",
                        name: "form_setting"
                    }, {
                        id: "_fileFrame",
                        name: "form_upload"
                    }, {
                        id: "_profileAvatarFrame",
                        name: "_profileAvatarFrame"
                    }, {
                        id: "_profileCoverFrame",
                        name: "_profileCoverFrame"
                    }, {
                        id: "_downloadFrame",
                        name: "_downloadFrame"
                    }], iframe_html = "", i = 0, if_len = hidden_iframe_list.length; i < if_len; i++) {
                        var ifr = hidden_iframe_list[i];
                        iframe_html += '<iframe id="' + ifr.id + '" name="' + ifr.name + '" src="" style="display: none"></iframe>'
                    }
                    setTimeout(function() {
                        $("#_hiddenIframe").html(iframe_html);
                        for (var i = 0, len = iframe_func_list.length; i < len; i++) iframe_func_list[i]();
                        iframe_func_list = [], iframe_loaded = !0
                    }, 3e3), $("#_liveNotificationClose").click(self.closeLiveNotification), $C("#_liveNotificationLiveButton").click(function() {
                        boot_1.CW.stopSound("BG_call")
                    })
                }, self.openLiveNotification = function(live_id, room_id) {
                    var room = boot_1.RL.rooms[room_id],
                        aid = room.getAccountId(),
                        message = "";
                    message = aid ? L.live_call_direct.replace(/%%name%%/, boot_1.AC.getName(aid)) : L.live_call_chat.replace(/%%name%%/, boot_1.AC.getName(aid)).replace(/%%chat_name%%/, room.getName()), $C("#_liveNotificationMessage").text(message), $C("#_liveNotification").slideDown(), $C("#_liveNotificationLiveButton").attr("data-live-id", live_id), boot_1.CW.playSound("BG_call")
                }, self.closeLiveNotification = function() {
                    $C("#_liveNotification").slideUp(), boot_1.CW.stopSound("BG_call")
                };
                var iframe_loaded = !1,
                    iframe_func_list = [];
                self.onIframeReady = function(func) {
                    iframe_loaded ? func() : iframe_func_list.push(func)
                };
                var dialog_id = 0;
                self.alert = function(msg, ok_callback, is_html) {
                    var alert_body_id = "_alertDialogBody" + dialog_id,
                        alertDialog = $('<div id="_alertDialog' + dialog_id + '" class="dialog dialogPadding">' + ('<pre id="' + alert_body_id + '" class="alertDialogBody"></pre></div>'));
                    $C("body").append(alertDialog);
                    var len;
                    is_html ? len = common_1.mlength($("#" + alert_body_id).html(msg).text()) : ($("#" + alert_body_id).text(msg), len = common_1.mlength(msg));
                    var width = 400;
                    len > 50 && (width = 500), alertDialog.cwDialog({
                        width: width,
                        minHeight: 100,
                        height: "auto",
                        autoOpen: !0,
                        buttonLabels: [L.button_ok],
                        buttonSubmit: 0,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    "function" == typeof ok_callback && ok_callback(), this.close()
                            }
                        },
                        close: function() {
                            alertDialog.remove()
                        }
                    }), dialog_id++
                };
                var set_confirm_dialog = function(args) {
                    var confirm_body_id = "_confirmDialogBody" + dialog_id,
                        confirmDialog = $('<div id="_confirmDialog' + dialog_id + '" class="dialog dialogPadding">\n          <pre id="' + confirm_body_id + '" class="confirmDialogBody"></pre></div>');
                    $C("body").append(confirmDialog);
                    var len;
                    args.is_html ? len = common_1.mlength($("#" + confirm_body_id).html(args.msg).text()) : ($("#" + confirm_body_id).text(args.msg), len = common_1.mlength(args.msg));
                    var width = len > 50 ? 500 : 400;
                    confirmDialog.cwDialog({
                        width: width,
                        minHeight: 100,
                        height: "auto",
                        autoOpen: !0,
                        buttonLabels: [L.button_cancel, args.primary_button_label || L.button_ok],
                        buttonSubmit: 1,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    "function" == typeof args.cancel_callback && args.cancel_callback(), this.close();
                                    break;
                                case 1:
                                    args.ok_callback(), this.close()
                            }
                        },
                        close: function() {
                            confirmDialog.remove()
                        }
                    }), dialog_id++
                };
                self.confirmSending = function(msg, ok_callback, cancel_callback, is_html) {
                    set_confirm_dialog({
                        msg: msg,
                        ok_callback: ok_callback,
                        cancel_callback: cancel_callback,
                        is_html: is_html,
                        primary_button_label: L.button_send
                    })
                }, self.confirm = function(msg, ok_callback, cancel_callback, is_html) {
                    set_confirm_dialog({
                        msg: msg,
                        ok_callback: ok_callback,
                        cancel_callback: cancel_callback,
                        is_html: is_html
                    })
                }, self.confirmDelete = function(msg, ok_callback, cancel_callback, is_html, button_label) {
                    var confirm_body_id = "_confirmDialogBody" + dialog_id,
                        confirmDialog = $('<div id="_confirmDialog' + dialog_id + '" class="dialog dialogPadding">' + ('<pre id="' + confirm_body_id + '" class="confirmDialogBody"></pre></div>'));
                    $C("body").append(confirmDialog);
                    var confirm_body = $("#" + confirm_body_id),
                        len = common_1.mlength(msg);
                    is_html ? len = common_1.mlength(confirm_body.html(msg).text()) : confirm_body.text(msg), button_label || (button_label = L.button_delete_long);
                    var width = 300;
                    len > 50 && (width = 500), confirmDialog.cwDialog({
                        width: width,
                        minHeight: 100,
                        height: "auto",
                        autoOpen: !0,
                        buttonLabels: [L.button_cancel, button_label],
                        buttonDelete: 1,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    "function" == typeof cancel_callback && cancel_callback(), this.close();
                                    break;
                                case 1:
                                    this.isAgreed() && (ok_callback(), this.close())
                            }
                        },
                        close: function() {
                            confirmDialog.remove()
                        }
                    }), dialog_id++
                };
                var progress_dialog = null;
                self.showProgress = function(msg) {
                    $("#_progressDialogBody").html('<div style="padding:10px" class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + msg + "</div>"), progress_dialog = $("#_progressDialog").cwDialog({
                        autoOpen: !0,
                        closeOnEscape: !1
                    })
                }, self.hideProgress = function() {
                    progress_dialog && (progress_dialog.close(), progress_dialog = null)
                }, self.registerKeyboardShortcut = function(keyCode, ctrl, shift, alt, command, func) {
                    return self.keyfunc[self.getKeyCombinationMap(keyCode, ctrl, shift, alt, command)] = func, self
                }, self.getKeyCombinationMap = function(key, ctrl, shift, alt, command) {
                    var map = "";
                    return map += ctrl ? "1" : "0", map += shift ? "1" : "0", map += alt ? "1" : "0", map += command ? "1" : "0", map += key
                };
                var post_load_func_list = [],
                    post_loaded = !1;
                self.onPostLoad = function(func) {
                    post_loaded ? func() : post_load_func_list.push(func)
                }, self.postLoad = function() {
                    if (1 == boot_1.CW.security_dat.disable_external && $("#_addContactType").remove(), 1 == self.model.security_dat.disable_send_file && $("#_file").remove(), 1 == self.model.security_dat.disable_download_file && ($("#_chatFileAll").remove(), $("#_openFileWindow").remove()), 1 == boot_1.CW.security_dat.disable_social_profile && $("#_profileSnsListEdit").hide(), common_1._is_oldmsie) $("#_newbrowserDialog").cwDialog({
                        width: 600,
                        title: L.newbrowser_title,
                        autoOpen: !0,
                        buttonLabels: [L.button_close],
                        buttonCancel: 0
                    });
                    else if (init_hash.indexOf("contact_myrequest") != -1) boot_1.AC.view.openContactWindow(), $("#_contactWindowTabMyRequest").click();
                    else if (init_hash.indexOf("contact_request") != -1) boot_1.AC.view.openContactWindow(), $("#_contactWindowTabRequest").click();
                    else if (init_hash.indexOf("join=") != -1) {
                        var tmp = init_hash.match(/join=([0-9]+)/);
                        if (tmp) {
                            var rid = tmp[1];
                            boot_1.RL.joinPublicChat(rid)
                        }
                    } else if (init_hash.indexOf("tutorial=") != -1) boot_1.CW.view.startTutorial();
                    else if (init_hash.indexOf("contact=") != -1) {
                        var tmp = init_hash.match(/contact=([^&\?]+)/);
                        if (tmp) {
                            var cwid = tmp[1],
                                is_added = !1;
                            if (cwid == boot_1.AC.getChatWorkId(boot_1.AC.myid)) boot_1.CW.alert(L.contact_cwid_error_myself), is_added = !0;
                            else
                                for (var idx in boot_1.AC.contact_list) {
                                    var aid = boot_1.AC.contact_list[idx];
                                    if (cwid == boot_1.AC.getChatWorkId(aid)) {
                                        boot_1.CW.alert(L.contact_cwid_error_already.replace(/%%chatwork_id%%/, cwid)), is_added = !0;
                                        break
                                    }
                                }
                            is_added || boot_1.CW.get("gateway.php", {
                                cmd: "get_account_info_by_cwid",
                                cwid: cwid
                            }, function(json) {
                                json.account_dat ? (boot_1.AC.setAccountDat(json.account_dat.aid, json.account_dat), boot_1.AC.showChatWorkIdRequestDialog(json.account_dat)) : boot_1.CW.alert(L.contact_cwid_error_noexist.replace(/%%chatwork_id%%/, cwid))
                            }, function(error_message) {
                                boot_1.CW.alert(error_message)
                            })
                        }
                    } else init_hash.indexOf("contact") != -1 ? boot_1.AC.view.openContactWindow() : init_hash.indexOf("mytask") != -1 ? boot_1.AC.view.openTaskWindow() : init_hash.indexOf("chat_setting") != -1 ? boot_1.ST.view.openSettingDialog() : init_hash.indexOf("profile_setting") != -1 ? boot_1.AC.view.openProfileWindow(boot_1.AC.myid) : init_hash.indexOf("service_admin") != -1 ? self.showServiceAdmin() : init_hash.indexOf("information") != -1 && self.openInformationPanel();
                    for (var i = 0, func_len = post_load_func_list.length; i < func_len; i++) post_load_func_list[i]();
                    $(window).scrollTop(0), post_loaded = !0
                },
                function() {
                    var popup = null,
                        popup_timer = null,
                        is_chrome = window.navigator.userAgent.toLowerCase().indexOf("chrome") != -1;
                    self.popup = function(icon, title, body, room_id) {
                        if (!boot_1.wfocus && common_1.NotificationAPI && 0 == common_1.NotificationAPI.checkPermission()) {
                            popup && ("function" == typeof popup.cancel ? popup.cancel() : "function" == typeof popup.close && popup.close()), is_chrome && (body = " " + body), popup = common_1.NotificationAPI.createNotification(icon, title, body), popup.room_id = room_id, popup.onclick = function() {
                                window.focus(), boot_1.RL.selectRoom(this.room_id), this.cancel()
                            }, popup.show();
                            var duration = 1e3 * parseInt(boot_1.ST.data.notifier_duration, 10);
                            duration > 0 && (popup_timer && (clearTimeout(popup_timer), popup_timer = null), popup_timer = setTimeout(function() {
                                popup && ("function" == typeof popup.cancel ? popup.cancel() : "function" == typeof popup.close && popup.close())
                            }, duration))
                        }
                    }
                }(), self.embedAudio = function(sound_type) {
                    var audio_file_name, audio_html, id = "_audio_" + sound_type;
                    boot_1.canPlayOgg ? audio_file_name = sound_type + ".ogg" : boot_1.canPlayMp3 && (audio_file_name = sound_type + ".mp3"), audio_html = '<audio id="' + id + '">' + ('<source src="./sound/' + audio_file_name + '"/>') + "</audio>", $C("#_audioList").append(audio_html)
                }, self.playSound = function(sound_type, sound_volume) {
                    var sound_dom, id = "_audio_" + sound_type,
                        sound = $("#" + id);
                    sound.length || (self.embedAudio(sound_type), sound = $("#" + id)), void 0 == sound_volume && (sound_volume = boot_1.ST.data.sound_volume), sound_dom = sound[0], sound_dom.volume = sound_volume, sound_dom.load(), sound_dom.play()
                }, self.stopSound = function(sound_type) {
                    var sound = document.getElementById("_audio_" + sound_type);
                    sound.pause()
                };
                var cur_href = "";
                self.changeFavicon = function(href) {
                    cur_href != href && (cur_href = href, $("#_favicon").remove(), $("head").append($('<link rel="shortcut icon" id="_favicon" href="' + href + '?1"  type="image/vnd.microsoft.icon" />')))
                }, self.alertUpdated = function() {
                    boot_1.CW.alert(L.chatwork_update)
                }, self.showUpdated = function() {
                    $("#cw_version_update").html('<a href="./">' + L.chatwork_do_update + "</a>").show()
                }, self.setOnline = function() {
                    $("#_statusAlert").fadeOut()
                }, self.setConnectionError = function(type) {
                    "NO LOGIN" == type || "NO TOKEN" == type || "IP ERROR" == type ? (unloading || ($("#_statusAlertMessage").html('<a href="./">' + L.connection_error_logout + "</a>"), $("#_statusAlert").fadeIn()), "IP ERROR" == type && (ip_error_alerted || self.model.alert(L.error_cant_login_ip), ip_error_alerted = !0)) : "INVALID USER" == type ? unloading || ($("#_statusAlertMessage").html('<a href="./">' + L.connection_error_invalid_user + "</a>"), $("#_statusAlert").fadeIn()) : "INVALID TOKEN" == type ? unloading || null === boot_1.RM || (self.setDrafts(), location.reload()) : unloading || ($("#_statusAlertMessage").html('<a href="./">' + L.connection_error_offline + "</a>"), $("#_statusAlert").fadeIn())
                }, self.firstWatch = function() {
                    if (document.location.hash) {
                        var tmp = document.location.hash.match(/#!rid(\d+)(?:-(\d+))?/);
                        if (tmp) {
                            var room_id = parseInt(tmp[1], 10),
                                chat_id = 0;
                            tmp[2] && (chat_id = parseInt(tmp[2], 10)), boot_1.RL.lazy_select = room_id, boot_1.RL.lazy_select_chat = chat_id
                        }
                    }
                }, self.filePreview = function() {
                    function getTypes() {
                        function getVideoTypes() {
                            var video = document.createElement("video");
                            return video.canPlayType ? [{
                                ext: "mpe?g",
                                type: "video/mpeg",
                                preview: "video"
                            }, {
                                ext: "mp4|m4v|mov",
                                type: "video/mp4",
                                preview: "video"
                            }, {
                                ext: "webm",
                                type: "video/webm",
                                preview: "video"
                            }, {
                                ext: "ogv",
                                type: "video/ogg",
                                preview: "video"
                            }, {
                                ext: "avi",
                                type: "video/avi",
                                preview: "video"
                            }, {
                                ext: "qt",
                                type: "video/quicktime",
                                preview: "video"
                            }, {
                                ext: "wmv",
                                type: "video/x-ms-wmv",
                                preview: "video"
                            }, {
                                ext: "mp3",
                                type: "audio/mpeg",
                                preview: "video"
                            }, {
                                ext: "ogg",
                                type: "audio/ogg",
                                preview: "video"
                            }, {
                                ext: "midi?",
                                type: "audio/midi",
                                preview: "video"
                            }, {
                                ext: "wav",
                                type: "audio/wav",
                                preview: "video"
                            }].filter(function(type) {
                                return video.canPlayType(type.type)
                            }) : []
                        }
                        var types = [{
                            ext: "(txt|html|htm|shtml|less|scss|styl|stylus|asp|bashrc|c|cgi|cpp|css|dif|diff|patch|h|hs|java|js|jsee|json|jsp|m|manifest|md|mobileprovision|plist|mxml|php|pl|pm|py|rb|scala|swift|tpl|vbs|csv|slk|sql|tsv|def|inf|ini|reg|log)",
                            preview: "source"
                        }, {
                            ext: "(jpe?g|gif|png)",
                            preview: "image"
                        }],
                            is_msie = /\WTrident\W/i.test(navigator.userAgent);
                        return is_msie || types.push({
                            ext: "pdf",
                            preview: "iframe"
                        }), types.concat(getVideoTypes())
                    }
                    var allTypes = getTypes(),
                        extsRegExp = new RegExp($.map(allTypes, function(type) {
                            return "^" + type.ext + "$"
                        }).join("|").toLowerCase());
                    return {
                        canPlayTypes: function(ext) {
                            return extsRegExp.test(ext.toLowerCase())
                        },
                        getPreviewType: function(_ext) {
                            var result, ext = _ext.toLowerCase();
                            return $.each(allTypes, function(idx, val) {
                                var exp = new RegExp("^" + val.ext + "$");
                                if (exp.test(ext)) return result = val, !1
                            }), result ? result.preview : ""
                        }
                    }
                }(), self.renderMessage = function(text, user_option) {
                    var option = $.extend({
                        disable_download_file: boot_1.CW.security_dat.disable_download_file,
                        display_eset_link: boot_1.CW.displayEsetLink(),
                        display_trim_link: boot_1.ST.data.shorten_url,
                        mid: void 0,
                        text: !1
                    }, user_option);
                    return option.text ? renderAstToText_1.renderAstToText(text) : renderAstToHtml_1.renderAstToHtml(text, option)
                }, self.registerAvatar = function() {};
                var avatar_class_map = {
                    huge: "avatarHuge",
                    large: "avatarLarge",
                    medium: "avatarMedium",
                    small: "avatarSmall",
                    tiny: "avatarTiny"
                };
                self.getAvatarClass = function(size) {
                    return avatar_class_map[size]
                }, self.getAvatarPanel = function(account_id, option) {
                    var src = S3_PATH + "/avatar/" + boot_1.AC.getAvatarId(account_id),
                        extra_class = "";
                    return option.src ? src : (option.hovertip && (extra_class += " _avatarHoverTip"), option.clicktip && (extra_class += " _avatarClickTip avatarClickTip"), option.size && (extra_class += " " + self.getAvatarClass(option.size)), '<img class="' + extra_class + " _avatar _avatarAid" + account_id + '" data-aid="' + account_id + '" src="' + src + '">')
                }, self.getCoverPanel = function(account_id, option) {
                    var src = S3_PATH + "/cover/" + boot_1.AC.getCoverId(account_id),
                        extra_class = "";
                    return option.src ? src : (option.extraclass && (extra_class += " " + option.extraclass), '<img class="' + extra_class + " _coverAid" + account_id + '" data-aid="' + account_id + '" src="' + src + '">')
                }, self.getName = function(account_id) {
                    return '<span class="_nameAid' + account_id + '">' + common_2.escape_html(boot_1.AC.getName(account_id)) + "</span>"
                }, self.getOrgName = function(account_id) {
                    return '<span class="cw_onm' + account_id + '">' + common_2.escape_html(boot_1.AC.getOrgName(account_id)) + "</span>"
                }, self.getDepartment = function(account_id) {
                    return '<span class="cw_dept' + account_id + '">' + common_2.escape_html(boot_1.AC.getDepartment(account_id)) + "</span>"
                }, self.getOrgTitle = function(account_id) {
                    return self.getOrgName(account_id) + " " + self.getDepartment(account_id)
                }, self.getFullName = function(account_id) {
                    return '<span class="cw_fnm' + account_id + '">' + common_2.escape_html(boot_1.AC.getFullName(account_id)) + "</span>"
                }, self.getChatWorkId = function(account_id) {
                    var cwid = boot_1.AC.getChatWorkId(account_id);
                    return cwid ? '<span class="cw_cwid' + account_id + '">' + common_2.escape_html(boot_1.AC.getChatWorkId(account_id)) + "</span>" : ""
                }, self.getChatWorkIdLink = function(account_id) {
                    var cwid = boot_1.AC.getChatWorkId(account_id);
                    return cwid ? '<a href="' + CHATWORK_MYPAGE_PATH + "/" + cwid + '" target="_blank">' + self.getChatWorkId(account_id) + "</a>" : ""
                }, self.getSkypeLink = function() {}, self.getTwitterLink = function() {}, self.getFacebookLink = function() {}, self.getContactPanel = function(account_id, option) {
                    return $.log("notice: CW.getContactPanel is deprecated! use AC.view.getContactPanel"), boot_1.AC.view.getContactPanel(boot_1.AC.account_dat[account_id], option)
                }, self.getFilePanel = function(file_dat, option) {
                    return boot_1.FL.view.getFilePanel(file_dat, option)
                }, self.getTaskPanel = function(task_dat, option) {
                    return boot_1.TK.view.getTaskPanel(task_dat, option)
                }, self.showLimitErrorDialog = function(title, message) {
                    limit_error_dialog || (limit_error_dialog = $("#_limitErrorDialog").cwDialog({
                        width: 550,
                        open: function(msg) {
                            $C("#_upgradeMessage").html(msg)
                        }
                    })), limit_error_dialog.setOption({
                        title: title
                    }).open(message)
                }, self.showContactLimitErrorDialog = function() {
                    var title = L.contact_error_cantadd,
                        msg = L.contact_error_planlimit;
                    return msg = msg.replace(/%%plan_name%%/, PLAN_NAME).replace(/%%limit_num%%/, boot_1.CW.contact_limit_num), self.showLimitErrorDialog(title, msg)
                }, self.showServiceAdmin = function(type) {
                    "upgrade" == type ? window.open(ACCOUNT_SERVER_PATH + "/price.php") : window.open(ACCOUNT_SERVER_PATH + "/service_admin.php")
                }, self.showOptionPlanPrice = function() {
                    window.open(ACCOUNT_SERVER_PATH + "/subpackages/option/price.php")
                }, self.showUserAdmin = function() {
                    window.open(ACCOUNT_SERVER_PATH + "/user_list.php")
                }, self.prepareStorageLimitDialog = function() {
                    storage_limit_dialog = $("#_storageLimitDialog").cwDialog({
                        width: 550,
                        buttonLabels: [L.button_close],
                        buttonCancel: 0,
                        open: function(options) {
                            if (options = $.extend({
                                send_type: null,
                                body: L.storage_cancel_send_object,
                                title: null
                            }, options), self.setLimitDialog(options.body, options.send_type), !options.title) {
                                var limit_title = L.storage_cancel_send_cancel;
                                options.title = limit_title.replace(/%%object%%/, L[options.send_type])
                            }
                            this.setOption({
                                title: options.title
                            })
                        }
                    })
                }, self.showStorageLimitDialog = function(send_type) {
                    storage_limit_dialog || self.prepareStorageLimitDialog(), $C("#_storageLimitFooter").hide(), storage_limit_dialog.open({
                        send_type: send_type
                    })
                }, self.showStorageCautionDialog = function(options) {
                    options = $.extend({
                        title: null,
                        body: null,
                        footer: null
                    }, options), storage_limit_dialog || self.prepareStorageLimitDialog();
                    var footer_elem = $C("#_storageLimitFooter");
                    options.footer ? footer_elem.html(options.footer).show() : footer_elem.hide(), storage_limit_dialog.open({
                        body: options.body,
                        title: options.title
                    })
                }, self.showLoginDialog = function(success_callback, recheck_callback) {
                    recheck_callback()
                }, self.showOfflineDialog = function(success_callback, recheck_callback) {
                    recheck_callback(2e3)
                }, self.showTimeoutDialog = function(success_callback, recheck_callback) {
                    recheck_callback()
                };
                var is_end_init_loaded = !1,
                    end_init_func_list = [];
                self.onEndInitLoad = function(func) {
                    is_end_init_loaded ? func() : end_init_func_list.push(func)
                }, self.endInitLoad = function() {
                    is_end_init_loaded = !0;
                    for (var i = 0, len = end_init_func_list.length; i < len; i++) end_init_func_list[i]();
                    end_init_func_list = []
                }, self.buildLayout = function() {
                    self.model.is_first_load && ($("#_sideDashboardArea").show(), $("#_chatSendToolbar").show()), self.resizeLayout()
                };
                var globalHeader_outer_height = $("#_globalHeader").outerHeight(!0),
                    content_margin_top = parseInt($("#_content").css("margin-top"), 10),
                    mainContent_outer_diff = $C("#_mainContent").outerHeight(!0) - $C("#_mainContent").innerHeight(),
                    sideContent_outer_diff = $C("#_sideContent").outerHeight(!0) - $C("#_sideContent").innerHeight(),
                    sideContentMenu_outer_height = $("#_sideContentMenu__header").outerHeight(!0),
                    subContentArea_padding_top = parseInt($("#_subContentArea").css("padding-top"), 10),
                    chatFilterMenu_outer_height = $("#_chatFilterMenu").outerHeight(!0),
                    chatRoomDescriptionNav_outer_height = $("#_chatRoomDescriptionNav").outerHeight(!0),
                    $window = $(window);
                self.resizeLayout = function() {
                    if (!is_end_init_loaded) return !1;
                    self.resizeRoomList();
                    var window_height = $window.innerHeight();
                    $C("#_wrapper").css("height", window_height);
                    var wrapper_width = $C("#_wrapper").innerWidth();
                    wrapper_width < 540 ? ($C("#_search").removeClass("inputLong"), $C("#_adminNavi").hide(), $C("#_myStatusButton").addClass("headerNameShort"), $C("#_myStatusName").hide(), $C("#_logo").hide(), $C("#_headerSearch").addClass("headerSearchShort")) : wrapper_width < 730 ? ($C("#_search").removeClass("inputLong"), $C("#_adminNavi").hide(), $C("#_myStatusButton").addClass("headerNameShort"), $C("#_myStatusName").hide(), $C("#_logo").show(), $C("#_headerSearch").removeClass("headerSearchShort")) : wrapper_width < 912 ? ($C("#_search").removeClass("inputLong"), $C("#_adminNavi").show(), $C("#_myStatusButton").addClass("headerNameShort"), $C("#_myStatusName").hide(), $C("#_logo").show(), $C("#_headerSearch").removeClass("headerSearchShort")) : wrapper_width < 1124 ? ($C("#_search").removeClass("inputLong"), $C("#_adminNavi").show(), $C("#_myStatusButton").removeClass("headerNameShort"), $C("#_myStatusName").show(), $C("#_logo").show(), $C("#_headerSearch").removeClass("headerSearchShort")) : ($C("#_search").addClass("inputLong"), $C("#_adminNavi").show(), $C("#_myStatusButton").removeClass("headerNameShort"), $C("#_myStatusName").show(), $C("#_logo").show(), $C("#_headerSearch").removeClass("headerSearchShort")), $C("#_searchResult").css("left", $C("#_search").offset().left);
                    var mainContent_inner_height = window_height - globalHeader_outer_height - content_margin_top - mainContent_outer_diff;
                    $C("#_mainContent").height(mainContent_inner_height), $.cwFloatWindow.resize();
                    var sideContent_inner_height = window_height - globalHeader_outer_height - content_margin_top - sideContent_outer_diff;
                    $C("#_sideContent").height(sideContent_inner_height);
                    var chatRoomListArea_inner_height = sideContent_inner_height - sideContentMenu_outer_height - chatFilterMenu_outer_height;
                    $C("#_roomListArea").height(chatRoomListArea_inner_height);
                    var subContent_inner_height = mainContent_inner_height - sideContentMenu_outer_height;
                    if ($C("#_subContent").css({
                        height: subContent_inner_height,
                        top: sideContentMenu_outer_height
                    }), boot_1.RS.view) {
                        var subContentArea_inner_height = subContent_inner_height - chatRoomDescriptionNav_outer_height - subContentArea_padding_top;
                        $C("#_subContentArea").height(subContentArea_inner_height), boot_1.RS.view.resizeRoomInfo(subContentArea_inner_height)
                    }
                    boot_1.CS.view && (messageTextarea_1.messageArea.setPaddinghWidth($C("#_chatTextArea").width()), boot_1.CS.view.resizeChatArea(!0)), self.adjustInformationPanelPosition(), self.resize_delay_timer = null
                }, self.startTutorial = function() {
                    (new TutorialView_1.TutorialView).handleStart()
                }, self.showFirstPage = function() {}, self.closeFirstPage = function() {}, self.resizeRoomList = function() {}, self.resizeSubInfo = function() {}, self.setLimitDialog = function(limit_message, send_type) {
                    var link_label = "";
                    "free" == self.model.plan ? (limit_message += L.storage_cancel_send_object_suffix_upgrade, link_label = L.storage_cancel_upgrade_label) : self.model.is_business && !self.model.is_admin ? (limit_message += L.storage_cancel_send_object_suffix_tell_admin, $("#_storageLimitButton").hide()) : (limit_message += L.storage_cancel_send_object_suffix_add_storage, link_label = L.storage_cancel_add_storage_label), void 0 != send_type && void 0 != L[send_type] && (limit_message = limit_message.replace(/%%object%%/g, L[send_type])), $("#_storageLimitBody").html(limit_message), $("#_storageLimitLink").text(link_label)
                };
                var previewlink_dialog = null;
                self.openPreviewLinkDialog = function(type, url, user_id, content_id) {
                    previewlink_dialog || self.preparePreviewLinkDialog(), previewlink_dialog.open(type, url, user_id, content_id)
                };
                var preview_req = null;
                self.preparePreviewLinkDialog = function() {
                    var previewlink_content = $("#_previewLinkContent");
                    previewlink_dialog = $("#_previewLinkDialog").cwDialog({
                        buttonLabels: [L.open_website, L.button_close],
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            switch (idx) {
                                case 0:
                                    window.open(this.data.url)
                            }
                        },
                        open: function(type, url, user_id, content_id) {
                            if (type) {
                                var dialog_options = {
                                    buttonLabels: [L.open_website, L.button_close]
                                }, preview_src = "",
                                    window_margin = 40,
                                    height_margin = boot_1.TM.dialog_header_height + boot_1.TM.dialog_footer_height,
                                    is_sandbox = !0,
                                    keep_ratio = !1,
                                    show_loading = !1,
                                    scrolling = "auto",
                                    get_embed_html = function(src, mwidth, mheight, scrolling) {
                                        "function" == typeof src && (src = src());
                                        var sandbox = "";
                                        return is_sandbox && (sandbox = 'sandbox="allow-scripts allow-same-origin allow-popups allow-forms"'), "<iframe " + sandbox + ' src="' + src + '" width="' + mwidth + '" height="' + mheight + '" style="margin:auto"\n                            frameborder="0" scrolling="' + scrolling + '" seamless webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>'
                                    };
                                switch (this.data.url = url, previewlink_content.empty(), null !== preview_req && (preview_req.abort(), preview_req = null), type) {
                                    case "teachme":
                                        keep_ratio = !0, preview_src = "//teachme.jp/contents/" + content_id + "/embed?mb=0", dialog_options.title = "Teachme";
                                        break;
                                    case "speakerdeck":
                                        keep_ratio = !0, show_loading = !0, dialog_options.title = "Speaker Deck", preview_req = $.ajax({
                                            type: "GET",
                                            url: "./api_proxy.php?type=speakerdeck&url=" + common_2.urlencode(url),
                                            success: function(response) {
                                                $("#_previewLinkContent").html(get_embed_html(response, mwidth, mheight))
                                            },
                                            error: function() {
                                                $("#_previewLinkContent").html(L.raise_error)
                                            }
                                        });
                                        break;
                                    case "slideshare":
                                        keep_ratio = !0, show_loading = !0, preview_src = "//www.slideshare.net/slideshow/embed_code/%%slideshow_id%%", dialog_options.title = "slideshare", preview_req = $.getJSON("//www.slideshare.net/api/oembed/2?callback=?", {
                                            url: "http://www.slideshare.net/" + user_id + "/" + content_id,
                                            format: "jsonp",
                                            maxwidth: mwidth,
                                            maxheight: mheight
                                        }).done(function(json) {
                                            $("#_previewLinkContent").html(get_embed_html(String(preview_src).replace("%%slideshow_id%%", json.slideshow_id), mwidth, mheight))
                                        }).fail(function() {
                                            $("#_previewLinkContent").html(L.raise_error)
                                        });
                                        break;
                                    case "prezi":
                                        keep_ratio = !0, is_sandbox = !1, preview_src = "//prezi.com/embed/" + content_id + "/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;features=undefined&amp;disabled_features=undefined", dialog_options.title = "Prezi";
                                        break;
                                    case "youtube":
                                        keep_ratio = !0, is_sandbox = !1, preview_src = "//www.youtube.com/embed/" + content_id, dialog_options.title = "YouTube";
                                        break;
                                    case "vimeo":
                                        keep_ratio = !0, is_sandbox = !1, preview_src = "//player.vimeo.com/video/" + content_id, dialog_options.title = "vimeo";
                                        break;
                                    case "slid.es":
                                        keep_ratio = !0, preview_src = "//slid.es/" + content_id + "/embed", dialog_options.title = "slid.es";
                                        break;
                                    case "corabbit":
                                        preview_src = "//corabbit.com/embed/" + content_id, dialog_options.title = "Corabbit";
                                        break;
                                    case "googledocs":
                                        is_sandbox = !1, preview_src = url.replace(/(\/file\/.+)\/(edit|view)$/, "$1/preview"), dialog_options.title = "Google Drive " + L.preview_needlogin;
                                        break;
                                    case "cacoo":
                                        preview_src = function() {
                                            var urls = content_id.split("#"),
                                                id = urls.shift(),
                                                hash = urls.shift();
                                            return hash = hash ? "#" + hash : "", "//cacoo.com/diagrams/" + id + "/view?w=" + (mwidth - 2) + "&h=" + (mheight - 30) + hash
                                        }, scrolling = "no", dialog_options.title = "Cacoo";
                                        break;
                                    case "sharepoint":
                                        preview_src = "https://" + content_id + "&action=interactivepreview&wdSmallView=1", dialog_options.title = "Office 365";
                                        break;
                                    case "chatworkFilePreview":
                                        is_sandbox = !1, dialog_options.title = $("<div></div>").text(content_id).html(), dialog_options.buttonLabels = [L.open_window, L.button_close];
                                        var preview_type = self.filePreview.getPreviewType(content_id.split(".").pop()),
                                            s3_origin = "https://d2cxqj2w0ktore.cloudfront.net",
                                            s3_iframe = s3_origin + "/preview/iframe/index.html",
                                            postToFix = function($this, message, callback) {
                                                var timeout = setTimeout(function() {
                                                    callback(), callback = function() {}
                                                }, 5e3);
                                                $(window).on("message.previewLinkContent", function(event) {
                                                    if (event.originalEvent.origin === s3_origin) {
                                                        var data = JSON.parse(event.originalEvent.data);
                                                        if ("fixWindowSize" === data.type) {
                                                            var preview_controle_height_padding = 82,
                                                                width = Math.min(data.width + boot_1.TM.preview_dialog_width_padding, dialog_options.width),
                                                                height = Math.min(data.height + boot_1.TM.preview_dialog_height_padding + preview_controle_height_padding, dialog_options.height);
                                                            previewlink_dialog.setOption({
                                                                width: width,
                                                                height: height
                                                            }), previewlink_dialog.open(), $this.attr({
                                                                width: width,
                                                                height: height - preview_controle_height_padding
                                                            }), callback(), clearTimeout(timeout), $(window).off("message.previewLinkContent")
                                                        }
                                                    }
                                                }), $this.get(0).contentWindow.postMessage(message, "*"), setTimeout(function() {
                                                    $this.off("load")
                                                })
                                            };
                                        if ("iframe" === preview_type) preview_src = url;
                                        else if ("source" === preview_type) show_loading = !0, preview_req = $.ajax({
                                            type: "GET",
                                            url: url,
                                            dataType: "text",
                                            success: function(response) {
                                                is_sandbox = !1, $("#_previewLinkContent").html(get_embed_html(s3_iframe, mwidth, mheight, scrolling)), $("#_previewLinkContent iframe").on("load", function() {
                                                    var message = JSON.stringify({
                                                        type: preview_type,
                                                        body: response,
                                                        fileName: content_id
                                                    });
                                                    postToFix($(this), message, function() {})
                                                })
                                            },
                                            error: function() {
                                                $("#_previewLinkContent").html(L.raise_error)
                                            }
                                        });
                                        else {
                                            if ("video" !== preview_type) return !1;
                                            preview_src = s3_iframe, $("#_previewLinkDialog").parent().hide(), setTimeout(function() {
                                                $("#_previewLinkContent iframe").on("load", function() {
                                                    var base = $("base").prop("href") || location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + location.pathname,
                                                        message = JSON.stringify({
                                                            type: preview_type,
                                                            url: base + url,
                                                            fileName: content_id
                                                        });
                                                    postToFix($(this), message, function() {
                                                        $("#_previewLinkDialog").parent().show()
                                                    })
                                                })
                                            })
                                        }
                                        break;
                                    default:
                                        return !1
                                }
                                var mwidth, mheight, win = $C(window),
                                    wwidth = win.width(),
                                    wheight = win.height();
                                if (keep_ratio) {
                                    for (this.$el.removeClass("previewFullDialog"), height_margin += boot_1.TM.preview_dialog_height_padding, mwidth = 1120, mheight = 840; mwidth > 160 && (wwidth < mwidth + window_margin || wheight < mheight + height_margin + window_margin);) mwidth -= 160, mheight -= 120;
                                    dialog_options.width = mwidth + boot_1.TM.preview_dialog_width_padding, dialog_options.height = mheight + height_margin
                                } else this.$el.addClass("previewFullDialog"), mwidth = wwidth - window_margin, mheight = wheight - height_margin - window_margin, dialog_options.width = mwidth, dialog_options.height = mheight + height_margin;
                                type && content_id && (show_loading ? $("#_previewLinkContent").html('<div style="margin:auto"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + L.loading + "</div>") : $("#_previewLinkContent").html(get_embed_html(preview_src, mwidth, mheight, scrolling))), this.setOption(dialog_options)
                            }
                        },
                        close: function() {
                            previewlink_content.empty(), $(window).off("message.previewLinkContent")
                        }
                    }), $("#_previewLinkReload").click(function() {
                        var previewlink_link = previewlink_dialog.data.previewlink_link;
                        previewlink_link && previewlink_dialog.open(previewlink_link)
                    })
                },
                function() {
                    var announce_infomation_dat = {};
                    self.addInformation = function(options) {
                        return options = options || {}, self.saveInformation(!1, options)
                    }, self.saveInformation = function(id, options) {
                        if (options = $.extend(!0, {
                            linktext: null,
                            subject: null,
                            body: null,
                            buttonLabels: null,
                            buttonClick: null,
                            linkClick: null
                        }, options), !id) {
                            var max_id = 0;
                            $.each(announce_infomation_dat, function(_id) {
                                _id > max_id && (max_id = parseInt(_id, 10))
                            }), id = max_id + 1
                        }
                        announce_infomation_dat[id] = {
                            linktext: options.linktext,
                            subject: options.subject,
                            body: options.body,
                            buttonLabels: options.buttonLabels,
                            buttonClick: options.buttonClick,
                            linkClick: options.linkClick
                        };
                        var info_icon = $C("#_openInfomation");
                        return info_icon.hasClass("notification") || info_icon.addClass("notification"), id
                    }, self.deleteInformation = function(id, callback) {
                        return delete announce_infomation_dat[id], self.renderInformation(), "function" != typeof callback && (callback = function() {}), $.isEmptyObject(announce_infomation_dat) ? void $C("#_notificationArea").fadeOut(function() {
                            $C("#_openInfomation").removeClass("notification"), callback()
                        }) : void callback()
                    }, self.renderInformation = function() {
                        var info_area = $C("#_notificationArea");
                        if ($.isEmptyObject(announce_infomation_dat)) return void info_area.hide();
                        var link_list = $C("#_notificationItemList");
                        link_list.quickEmpty(), $.each(announce_infomation_dat, function(id, adat) {
                            var html = '<li class="linkStatus" data-id="' + id + '">' + common_2.escape_html(adat.linktext) + "</li>",
                                link = $(html);
                            link_list.append(link);
                            var dialogOpt = {
                                subject: adat.subject,
                                body: adat.body,
                                buttonLabels: adat.buttonLabels,
                                buttonClick: adat.buttonClick
                            }, linkClick = adat.linkClick || function() {
                                    self.openAnnounceDialog(dialogOpt)
                                };
                            link.click(function() {
                                linkClick(dialogOpt)
                            })
                        }), info_area.isVisible() || self.showAnnounce()
                    }
                }(), self.openInformationPanel = function() {
                    $C("#_openInfomation").addClass("helpMenuSelected");
                    var information_panel = $C("#_informationBox");
                    self.adjustInformationPanelPosition(!0), self.renderInformation(), information_panel.slideDown("fast", function() {
                        $.cwFloatBox.open(information_panel, function() {
                            information_panel.slideUp("fast", function() {
                                $C("#_openInfomation").removeClass("helpMenuSelected")
                            })
                        })
                    })
                }, self.adjustInformationPanelPosition = function(force) {
                    var information_panel = $C("#_informationBox");
                    if (force || information_panel.isVisible()) {
                        var left, btn = $C("#_openInfomation"),
                            btn_width = btn.outerWidth(),
                            panel_width = information_panel.outerWidth(),
                            window_width = $(window).width(),
                            right = btn.offset().left + btn_width / 2 + panel_width / 2;
                        left = right > window_width ? window_width - panel_width : btn.offset().left + btn_width / 2 - panel_width / 2, information_panel.css("left", left)
                    }
                }, self.prepareUserGuideDialog = function() {
                    user_guide_dialog = $("#_userguideDialog").cwDialog({
                        title: L.userguide_title.replace("%%service_name%%", SERVICE_NAME),
                        width: 820,
                        height: "full",
                        autoOpen: !1,
                        modal: !0,
                        open: function() {
                            pager_func()
                        }
                    });
                    var navlist = user_guide_dialog.$el.find("._navlist"),
                        pager_func = function(move) {
                            var idx = 0;
                            navlist.each(function() {
                                return !$(this).hasClass("_select") && void idx++
                            });
                            var cur_idx = idx;
                            if (move) return cur_idx += move, cur_idx > navlist.length - 1 && (cur_idx = 0), navlist.eq(cur_idx).click(), !1;
                            var buttons = [],
                                buttonClickEvent = [];
                            cur_idx > 0 && (buttons.push(L.pager_prev), buttonClickEvent.push(function() {
                                pager_func(-1)
                            })), cur_idx < navlist.length - 1 ? (buttons.push(L.pager_next), buttonClickEvent.push(function() {
                                pager_func(1)
                            })) : cur_idx == navlist.length - 1 && (buttons.push(L.button_close), buttonClickEvent.push(function() {
                                user_guide_dialog.close()
                            })), user_guide_dialog.setOption({
                                buttonLabels: buttons,
                                buttonClick: function(idx) {
                                    var clickEvent = buttonClickEvent[idx];
                                    clickEvent()
                                }
                            })
                        };
                    navlist.click(function() {
                        var navi = $(this),
                            body = $C("#_userguideBody"),
                            idx = navlist.index(this),
                            content = body.find("._content" + idx);
                        navlist.removeClass("_select"), navi.addClass("_select"), navlist.removeClass("userguideOrderListSelected"), navi.addClass("userguideOrderListSelected"), body.find("._howTo").hide(), content.fadeIn(), content.find("._contentBody").scrollTop(0), pager_func()
                    })
                }, self.openUserGuideDialog = function() {
                    user_guide_dialog || self.prepareUserGuideDialog(), user_guide_dialog.open()
                }, self.openAnnounceDialog = function(options) {
                    options = $.extend(!0, {
                        subject: null,
                        body: null,
                        buttonLabels: null,
                        buttonClick: null
                    }, options), announce_dialog || (announce_dialog = $("#_announceDialog").cwDialog({
                        width: 600,
                        height: "auto"
                    }));
                    var labels = [L.button_close];
                    options.buttonLabels && $.isArray(options.buttonLabels) && (labels = $.merge(options.buttonLabels, labels)), announce_dialog.setOption({
                        title: options.subject,
                        buttonLabels: labels,
                        buttonCancel: labels.length - 1,
                        buttonClick: function() {
                            for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i - 0] = arguments[_i];
                            "function" == typeof options.buttonClick && options.buttonClick.apply(this, args)
                        }
                    }), $C("#_announceBody").html(options.body), announce_dialog.open(), $.cwFloatBox.close($C("#_informationBox"))
                }, self.openFeedbackCompleteDialog = function() {
                    feedback_complete_dialog || (feedback_complete_dialog = $("#_feedbackCompleteDialog").cwDialog({
                        width: 500,
                        buttonLabels: [L.button_close],
                        buttonCancel: 0
                    })), feedback_complete_dialog.open()
                }, self.showAnnounce = function() {
                    $C("#_notificationArea").fadeIn(function() {
                        $C("#_openInfomation").addClass("notification")
                    })
                }, self.hideAnnounce = function() {
                    $C("#_notificationArea").fadeOut(function() {
                        $C("#_openInfomation").removeClass("notification")
                    })
                }, self.setDrafts = function() {
                    var text = messageTextarea_1.messageArea.getValue();
                    text && boot_1.CS.setChatDraft(boot_1.RM.id, text, boot_1.CS.chatedit_id);
                    var task_name = $C("#_taskNameInput").val();
                    if (task_name) {
                        var assign_list = boot_1.RS.view.getTaskAssignList(),
                            limit_date = $C("#_limitButton").cwDatePicker().getVal();
                        boot_1.CS.setTaskDraft(boot_1.RM.id, task_name, assign_list, limit_date)
                    }
                }
            }
            var Cookies = require("js-cookie"),
                TutorialView_1 = require("./TutorialView"),
                common_1 = require("../lib/common"),
                common_2 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot"),
                messageTextarea_1 = require("../lib/messageTextarea"),
                renderAstToHtml_1 = require("../lib/cw-token/renderAstToHtml"),
                renderAstToText_1 = require("../lib/cw-token/renderAstToText");
            exports.ChatWorkView = ChatWorkView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../lib/common": 69,
            "../lib/cw-token/renderAstToHtml": 71,
            "../lib/cw-token/renderAstToText": 72,
            "../lib/messageTextarea": 111,
            "./TutorialView": 146,
            "js-cookie": 37
        }
    ],
    133: [
        function(require, module, exports) {
            "use strict";

            function CheatSheetView() {
                var self = this,
                    el = $("#_cheatSheetContent");
                self.is_mac_os = /\sMac\s/.test(navigator.userAgent), self.char_at_cmd = self.is_mac_os ? "⌘" : "Ctrl", self.prepare = function() {
                    $("#_closeCheatSheet").on("click", this, function() {
                        self.close()
                    }), $("._cheatsheetKeyCommand").text(self.char_at_cmd), boot_1.CW.view.registerKeyboardShortcut(191, !1, !0, !1, !1, function() {
                        self.viewToggle()
                    }), $(document).on("keydown.cheatsheet", function(e) {
                        27 === e.keyCode && el.is(":visible") && self.close()
                    })
                }, self.open = function() {
                    el.show()
                }, self.close = function() {
                    el.hide()
                }, self.viewToggle = function() {
                    el.toggle()
                }
            }
            var boot_1 = require("../controller/boot");
            exports.CheatSheetView = CheatSheetView
        }, {
            "../controller/boot": 66
        }
    ],
    134: [
        function(require, module, exports) {
            "use strict";

            function FileListView(model) {
                var self = this;
                self.model = model
            }
            exports.FileListView = FileListView, FileListView.prototype = {
                build: function() {
                    this.model.room.file_num ? $C("#_chatFileAll").cwButton().enable() : $C("#_chatFileAll").cwButton().disable()
                }
            }
        }, {}
    ],
    135: [
        function(require, module, exports) {
            "use strict";

            function FileView(model) {
                var self = this;
                self.model = model;
                var latest_storage_info_id;
                self.prepare = function() {
                    $("#_openFileWindow").click(function() {
                        self.openFileWindow(), boot_1.AL.trackEvent("file_list", "click", {
                            label: "file_list_navigation"
                        })
                    });
                    var disable_delete_button_click = !1;
                    $("#_fileWindow,#_chatFileListTip").on("click", "._downloadFile", function() {
                        $(this).parents("#_fileWindow").length ? boot_1.AL.trackEvent("file_list", "click", {
                            label: "file_list_download"
                        }) : boot_1.AL.trackEvent("room_detail", "click", {
                            label: "room_detail_download"
                        });
                        var file_id = $(this).attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        return file_dat && $("#_downloadFrame").attr("src", SERVER_PATH + "/gateway.php?cmd=download_file&bin=1&file_id=" + file_dat.id), !1
                    }).on("click", "._editFile", function() {
                        $(this).parents("#_fileWindow").length ? boot_1.AL.trackEvent("file_list", "click", {
                            label: "file_list_edit"
                        }) : boot_1.AL.trackEvent("room_detail", "click", {
                            label: "room_detail_file_edit"
                        });
                        var file_id = $(this).attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        if (file_dat) {
                            var file = $("#_editFileFile");
                            file.val(file_dat.fn), $("#_editFileDialog").cwDialog({
                                width: 480,
                                height: 150,
                                title: L.file_edit_title,
                                buttonLabels: [L.button_save_long, L.button_cancel],
                                buttonSubmit: 0,
                                buttonCancel: 1,
                                buttonClick: function(index) {
                                    switch (index) {
                                        case 0:
                                            var error = [],
                                                filename = file.val();
                                            if (filename || error.push(L.file_error_empty), self.model.isExecutableExtension(filename) && error.push(L.error_upload_executable), self.model.containIllegalChar(filename) && error.push(L.error_illegal_filename), error.length) return void boot_1.CW.alert(error.join("\n"));
                                            self.model.editFile(file_id, filename), this.close()
                                    }
                                },
                                close: function() {
                                    file.val("")
                                }
                            }).open()
                        }
                    }).on("click", "._moveFile", function() {
                        $(this).parents("#_fileWindow").length ? boot_1.AL.trackEvent("file_list", "click", {
                            label: "file_list_message_jump"
                        }) : boot_1.AL.trackEvent("room_detail", "click", {
                            label: "room_detail_file_message_jump"
                        });
                        var file_id = $(this).attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        file_dat && boot_1.RL.selectRoom(file_dat.rid, file_dat.cid)
                    }).on("click", "._deleteFile", function() {
                        $(this).parents("#_fileWindow").length ? boot_1.AL.trackEvent("file_list", "click", {
                            label: "file_list_delete"
                        }) : boot_1.AL.trackEvent("room_detail", "click", {
                            label: "room_detail_file_delete"
                        });
                        var file_id = $(this).attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        file_dat && boot_1.CW.view.confirmDelete(L.file_confirm_delete.replace(/%%file_name%%/, file_dat.fn), function() {
                            disable_delete_button_click || (disable_delete_button_click = setTimeout(function() {
                                disable_delete_button_click = !1
                            }, 5e3), self.model.deleteFile(file_id, function() {
                                disable_delete_button_click = clearTimeout(disable_delete_button_click), checked_file_flag = {}
                            }, function() {
                                disable_delete_button_click = clearTimeout(disable_delete_button_click), boot_1.CW.alert(L.file_delete_error_try_again)
                            }))
                        })
                    }), $("#_subContentFileOpenAll").click(function() {
                        $C("#_subRoomFileList").find("li._fileList").each(function() {
                            var file = $(this);
                            file.hasClass("_fileOpen") || file.click()
                        })
                    }), $("#_subContentFileCloseAll").click(function() {
                        $C("#_subRoomFileList").find("li._fileOpen").click()
                    }), $C("#_wrapper").on("click", "._filePreview", function() {
                        var file_id = $(this).attr("data-file-id");
                        self.openPreviewDialog(file_id)
                    }).on("mouseenter", "._filePreview", function() {
                        $.cwMessageTip.isInit(this) || $(this).cwMessageTip({
                            message: L.file_preview_image_hint,
                            delay: 0
                        }).open()
                    })
                };
                var filelist_tip = null;
                self.prepareFileList = function() {
                    filelist_tip = $("#_chatFileListTip").cwListTip({
                        direction: "bottom",
                        showPosition: "right",
                        noTriangle: !0,
                        search: !0,
                        placeHolder: L.file_search,
                        useHtmlLabel: !0,
                        multiSelect: !1,
                        selectable: !1,
                        fixHeight: !1,
                        maxListHeight: 400,
                        open: function(tipFrom, room_id) {
                            this.data.room = boot_1.RL.rooms[room_id]
                        },
                        close: function() {
                            filedetail_tip.close()
                        },
                        list: function() {
                            var room = this.data.room;
                            if (!room) return [];
                            var list = [],
                                file_list = room.filelist.getFileList(),
                                file_length = file_list.length;
                            if (file_length > 0) {
                                boot_1.FL.sortFileList(file_list);
                                for (var i = 0; i < file_length; i++) {
                                    var file_id = file_list[i],
                                        file_dat = boot_1.FL.file_id2file_dat[file_id];
                                    void 0 != file_dat && "deleted" != file_dat.st && list.push({
                                        keys: [file_dat.fn],
                                        value: file_id,
                                        label: boot_1.FL.view.getFilePanel(file_dat, {
                                            type: "filelist"
                                        })
                                    })
                                }
                            }
                            return list
                        },
                        select: function(file_id) {
                            this.ul.find("li.adminDetailSelected").removeClass("adminDetailSelected"), this.findItemByValue(file_id).addClass("adminDetailSelected"), filedetail_tip.open(this.findItemByValue(file_id), file_id)
                        }
                    }), filelist_tip.ul.on("mouseenter", "li", function() {
                        var item = $(this),
                            file_id = filelist_tip.getValueByItem(item);
                        $.cwMessageTip.isInit(this) || item.cwMessageTip({
                            message: function(tipFrom) {
                                var file_id = filelist_tip.getValueByItem(tipFrom);
                                return boot_1.FL.file_id2file_dat[file_id].fn
                            },
                            delayQuickMode: !1,
                            delay: 1e3
                        }).open(), filelist_tip.ul.find("li.adminDetailSelected").removeClass("adminDetailSelected"), item.addClass("adminDetailSelected"), filedetail_tip.open(filelist_tip.findItemByValue(file_id), file_id)
                    }).on("click", "li", function() {
                        $.cwFloatBox.skip(filedetail_tip.$el)
                    });
                    var filedetail_tip = $("#_chatFileDetailTip").cwToolTip({
                        parentFloatBox: $("#_chatFileListTip"),
                        direction: "left",
                        showPosition: "top",
                        open: function(tipFrom, file_id) {
                            var file_dat = boot_1.FL.file_id2file_dat[file_id];
                            file_dat && self.assignDetailInfo($C("#_chatFileDetailTip"), file_dat)
                        }
                    });
                    $("#_fileDetailDownload").click(function() {
                        var file_id = $C("#_chatFileDetailTip").attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        file_dat && $("#_downloadFrame").attr("src", SERVER_PATH + "/gateway.php?cmd=download_file&bin=1&file_id=" + file_dat.id)
                    }), $("#_fileDetailMove").click(function() {
                        var file_id = $C("#_chatFileDetailTip").attr("data-file-id"),
                            file_dat = boot_1.FL.file_id2file_dat[file_id];
                        file_dat && boot_1.RL.selectRoom(file_dat.rid, file_dat.cid)
                    })
                }, self.buildFileDetail = function(file_id) {
                    var file_dat = boot_1.FL.file_id2file_dat[file_id];
                    file_dat && ($C("#_fileDetailBlankArea").hide(), $C("#_fileDetailArea").show(), self.assignDetailInfo($C("#_fileDetailArea"), file_dat))
                };
                var preview_load_xhr = null,
                    preview_cache = {};
                self.assignDetailInfo = function(wrapper, file_dat) {
                    var download_link = SERVER_PATH + "/gateway.php?cmd=download_file&bin=1&file_id=" + file_dat.id,
                        extension = common_1.get_file_extension(file_dat.fn);
                    if (boot_1.FL.view.isImage(extension)) {
                        var src = download_link + "&preview=1";
                        wrapper.find("._fileDetailPreview").html('<a href="' + src + '" target="_blank"><img src="' + src + '"/></a>')
                    } else boot_1.FL.view.isText(extension) ? (preview_load_xhr && preview_load_xhr.abort(), preview_cache[file_dat.id] ? (wrapper.find("._fileDetailPreview").html('<div class="_codePreview codePreview">' + preview_cache[file_dat.id].data + "</div>").scrollTop(0), self.startPreviewCacheTimer(file_dat.id)) : (preview_load_xhr = $.ajax({
                        type: "GET",
                        url: download_link + "&preview=1",
                        success: function(content) {
                            preview_cache[file_dat.id] = {
                                data: common_2.escape_html(content)
                            }, self.startPreviewCacheTimer(file_dat.id), wrapper.find("._fileDetailPreview").html('<div class="_codePreview codePreview">' + preview_cache[file_dat.id].data + "</div>").scrollTop(0), preview_load_xhr = null
                        },
                        error: function() {
                            wrapper.find("._fileDetailPreview").html(L.file_preview_image_cant_read)
                        }
                    }), wrapper.find("._fileDetailPreview").html('<div class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + L.file_loading + "</div>"))) : wrapper.find("._fileDetailPreview").html(self.getFileTypeIcon(extension));
                    wrapper.scrollTop(0), wrapper.attr("data-file-id", file_dat.id), wrapper.find("._fileDetailName").text(file_dat.fn).attr("data-file-id", file_dat.id), wrapper.find("._fileDetailSize").text(common_2.bytename(file_dat.fz)), wrapper.find("._fileDetailUploadBy").html(boot_1.CW.getAvatarPanel(file_dat.aid, {
                        size: "tiny"
                    }) + " " + boot_1.CW.getName(file_dat.aid)), wrapper.find("._fileDetailUploadDate").html(boot_1.CW.getDate(file_dat.tm)), wrapper.find("._fileDetailChat").html(boot_1.RL.rooms[file_dat.rid].getIcon("html", "tiny") + boot_1.CW.getRoomName(file_dat.rid)).attr({
                        "data-rid": file_dat.rid,
                        "data-mid": file_dat.cid
                    })
                };
                var preview_cache_clear = {}, preview_cache_expire = 3e5;
                self.startPreviewCacheTimer = function(file_id) {
                    preview_cache_clear[file_id] && clearTimeout(preview_cache_clear[file_id]), preview_cache_clear[file_id] = setTimeout(function() {
                        preview_cache[file_id] && delete preview_cache[file_id], delete preview_cache_clear[file_id]
                    }, preview_cache_expire)
                };
                var ext2key = null,
                    key2type = null;
                self.prepareFileType = function() {
                    ext2key = {}, key2type = {};
                    var file_type_map = {
                        spreadsheet: {
                            key: 1,
                            list: ["xls", "xlsx", "ods", "xlsm", "numbers", "xlsb", "xlt", "et", "xltx", "gsheet"]
                        },
                        document: {
                            key: 2,
                            list: ["doc", "docx", "rtf", "pages", "xdw", "odt", "jtd", "epub", "tex", "dot", "dotx", "dotm", "docm", "gdoc", "one", "pub", "lhd", "jlb", "asta", "xps", "ps", "indd"]
                        },
                        presentation: {
                            key: 3,
                            list: ["pptx", "ppt", "key", "odp", "pptm", "ppsx", "potx", "pps", "pot", "gslides", "skitch"]
                        },
                        image: {
                            key: 4,
                            list: ["jpg", "png", "gif", "jpeg", "bmp", "tif", "eps", "ico", "tiff", "xcf", "cdr", "svg", "sai", "tga", "wmf", "emf", "dib", "pic", "snagproj", "cur", "xib"]
                        },
                        ai: {
                            key: 5,
                            list: ["ai"]
                        },
                        psd: {
                            key: 6,
                            list: ["psd", "abr"]
                        },
                        flash: {
                            key: 7,
                            list: ["swf", "fla", "flv", "fxp"]
                        },
                        pdf: {
                            key: 8,
                            list: ["pdf"]
                        },
                        movie: {
                            key: 9,
                            list: ["mp4", "wmv", "mov", "avi", "m4v", "3gp", "mts", "fbr", "mpg", "camrec", "ogg", "wlmp", "camproj", "m4p", "vob", "f4v"]
                        },
                        text: {
                            key: 10,
                            list: ["txt", "log", "strings", "text", "md", "license"]
                        },
                        audio: {
                            key: 11,
                            list: ["mp3", "wav", "m4a", "wma", "mid", "aiff", "m4r"]
                        },
                        font: {
                            key: 12,
                            list: ["ttf", "otf", "ttc"]
                        },
                        web: {
                            key: 13,
                            list: ["html", "css", "htm", "mht", "url", "webarchive", "torrent", "xhtml", "shtml", "less", "scss", "styl", "stylus"]
                        },
                        markup: {
                            key: 14,
                            list: ["xml", "xsl", "wsdl", "kml", "kmz", "opml", "mxml"]
                        },
                        script: {
                            key: 15,
                            list: ["js", "m", "h", "json", "hsp", "rb", "sh", "c", "dll", "h", "cpp", "bat", "py", "cs", "cgi", "crx", "pl", "uws", "atn", "as", "jsx", "erb", "class", "scala", "jsee", "inc", "pm", "asp", "vb", "vbs", "module", "obj", "patch", "lua", "xcodeproj", "vcproj"]
                        },
                        php: {
                            key: 16,
                            list: ["php", "ctp", "twig", "phtml"]
                        },
                        java: {
                            key: 17,
                            list: ["java", "jar", "jsp", "war"]
                        },
                        csv: {
                            key: 18,
                            list: ["csv"]
                        },
                        data: {
                            key: 19,
                            list: ["dat", "sdf", "tsv", "mdb", "fp7", "db", "accdb", "mwb", "tbl", "sqlite", "sql", "idm", "bak", "tab", "dump", "db9", "data", "dic", "cap", "backup", "fwa", "fwb", "kb4", "kb5", "kb6", "kb7", "kb11", "kb12", "enex"]
                        },
                        mindmap: {
                            key: 20,
                            list: ["mmap", "xmind", "mm", "xmmap", "mindnode", "mind"]
                        },
                        android: {
                            key: 21,
                            list: ["apk"]
                        },
                        iosapp: {
                            key: 22,
                            list: ["ipa"]
                        },
                        mail: {
                            key: 23,
                            list: ["eml", "msg", "vcf"]
                        },
                        setting: {
                            key: 24,
                            list: ["mobileprovision", "ini", "htaccess", "conf", "yml", "yaml", "reg", "properties", "plist", "config", "cfg", "cnf", "inf", "mobileconfig", "manifest", "emacs", "ste"]
                        },
                        security: {
                            key: 25,
                            list: ["pem", "p12", "ppk", "cer", "csr", "crt", "certsigningrequest"]
                        },
                        package: {
                            key: 26,
                            list: ["dmg", "air", "msi", "unitypackage", "mxp", "xpi", "iso", "pkg"]
                        },
                        drawing: {
                            key: 27,
                            list: ["vsd", "vdx", "jww", "dxf", "dwg", "atc", "vwx", "mpp", "dwt", "stl", "jwc"]
                        },
                        archive: {
                            key: 28,
                            list: ["zip", "lzh", "rar", "gz", "7z", "tgz", "tar", "cab", "sit", "egg", "alzip"]
                        }
                    };
                    for (var type in file_type_map) {
                        var type_dat = file_type_map[type],
                            key = type_dat.key,
                            list = type_dat.list;
                        key2type[key] = type;
                        for (var i = list.length; i--;) ext2key[list[i]] = key
                    }
                }, self.openFileList = function(room_id) {
                    filelist_tip || self.prepareFileList(), filelist_tip.open($C("#_chatFileAll"), room_id), room_id && boot_1.AL.trackEvent("room_detail", "open", {
                        label: "room_detail_file_list"
                    })
                };
                var preview_dialog = null;
                self.openPreviewDialog = function(file_id) {
                    return self.model.file_id2file_dat[file_id] ? (preview_dialog || (preview_dialog = $("#_filePreviewDialog").cwDialog({
                        autoOpen: !1,
                        width: 700,
                        height: 500,
                        modal: !0,
                        buttonLabels: [L.file_preview_download, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            switch (idx) {
                                case 0:
                                    $("#_downloadFrame").attr("src", "gateway.php?cmd=download_file&bin=1&file_id=" + this.data.file_id)
                            }
                        },
                        open: function(file_id) {
                            var preview_src = SERVER_PATH + "/gateway.php?cmd=download_file&bin=1&preview=1&file_id=" + file_id;
                            this.data.file_id = file_id, this.$el.html('<div class="filePreviewDialogArea"><div id="_filePreviewLoading" class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + L.file_loading + '</div><div class="filePreviewImage">' + ('<img id="_filePreviewImage" style="visibility:hidden" src="' + preview_src + '"/><div class="filePreviewBlank"><span class="icoFontLinkBlank"></span><span class="icoTextHide">' + L.file_preview_open_newwindow + "<span></div></div></div>"));
                            var pv_image = $("#_filePreviewImage");
                            pv_image.load(function() {
                                $("#_filePreviewLoading").hide();
                                var width = pv_image.width(),
                                    height = pv_image.height(),
                                    maxwidth = 1200,
                                    maxheight = 600,
                                    new_width = width,
                                    new_height = height,
                                    need_thumbnail = !1;
                                width > maxwidth && (new_height *= maxwidth / new_width, new_width = maxwidth, need_thumbnail = !0), new_height > maxheight && (new_width *= maxheight / new_height, new_height = maxheight, need_thumbnail = !0);
                                var img_option = {
                                    visibility: "visible"
                                };
                                need_thumbnail && (img_option.width = Math.round(new_width), img_option.height = Math.round(new_height)), pv_image.css(img_option), pv_image.click(function() {
                                    window.open(preview_src)
                                }), pv_image.nextAll(".filePreviewBlank").click(function() {
                                    window.open(preview_src)
                                })
                            })
                        }
                    })), preview_dialog.setOption({
                        title: self.model.file_id2file_dat[file_id].fn
                    }), void preview_dialog.open(file_id)) : (boot_1.CW.alert(L.file_not_found), !1)
                }, self.buildByFileId = function(file_id) {
                    var file_id_list;
                    file_id_list = "object" != typeof file_id ? [file_id] : file_id;
                    var rm_build = !1,
                        allmy_build = !1;
                    for (var i in file_id_list) {
                        var file_dat = boot_1.FL.file_id2file_dat[file_id_list[i]];
                        boot_1.RM && boot_1.RM.id == file_dat.rid && (rm_build = !0), file_dat.aid == boot_1.AC.myid && (allmy_build = !0)
                    }
                    rm_build && boot_1.RM.filelist.build(), allmy_build && (self.buildFileWindow(), filelist_tip && filelist_tip.isOpen() && filelist_tip.build())
                }, self.buildFileWindow = function(user_option) {
                    if (file_window && file_window.isOpen()) {
                        var option = $.extend({
                            resetPager: !0
                        }, user_option);
                        if (option.resetPager && (file_window_pager_index = 0), !self.model.myfile_load_flag.loaded) return $("#_fileWindowList").html('<li class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" alt="Loading" />' + L.file_loading + "</li>"), boot_1.FL.loadAllMyFile(), !1;
                        file_window_allcheck_button.disable();
                        var my_file_list = self.model.getMyFileList(),
                            filtered_file_list = [];
                        if (file_window_search_word)
                            for (var sword = file_window_search_word.toLowerCase(), i = 0, file_len = my_file_list.length; i < file_len; i++) {
                                var file_id = my_file_list[i],
                                    file_dat = boot_1.FL.file_id2file_dat[file_id];
                                file_dat.fn && file_dat.fn.toLowerCase().indexOf(sword) != -1 && filtered_file_list.push(file_id)
                            } else filtered_file_list = my_file_list;
                        boot_1.FL.sortFileList(filtered_file_list);
                        var disp_file_list = [],
                            filtererd_length = filtered_file_list.length;
                        if (file_window_pager_num = parseInt(filtererd_length / file_window_pager_view_num, 10), filtererd_length % file_window_pager_view_num !== 0 && file_window_pager_num++, filtererd_length >= file_window_pager_view_num) {
                            var idx_start = file_window_pager_index * file_window_pager_view_num,
                                idx_end = idx_start + file_window_pager_view_num;
                            idx_end > filtererd_length && (idx_end = filtererd_length);
                            for (var idx = idx_start; idx < idx_end; idx++) disp_file_list.push(filtered_file_list[idx])
                        } else disp_file_list = filtered_file_list;
                        disp_file_list.length > 0 && file_window_allcheck_button.enable();
                        var allcheck = $C("#_fileWindowCheckAll").cwCheckBox(),
                            delete_button = $C("#_fileWindowDeleteButton").cwButton(),
                            check_num = Object.keys(checked_file_flag).length;
                        check_num ? (check_num == disp_file_list.length ? allcheck.check() : allcheck.partialCheck(), delete_button.enable()) : (allcheck.unCheck(), delete_button.disable());
                        for (var detail_file_id = $C("#_fileDetailArea").attr("data-file-id"), detail_file_is_found = !1, html = "", i = 0, file_length = disp_file_list.length; i < file_length; i++) {
                            var file_dat = boot_1.FL.file_id2file_dat[disp_file_list[i]];
                            detail_file_id == file_dat.id && (detail_file_is_found = !0), html += self.getFilePanel(file_dat, {
                                type: "filewindow"
                            })
                        }
                        if (!html) {
                            var nothing_str = "";
                            nothing_str = file_window_search_word ? L.file_search_not_found : L.file_nothing, html = '<li class="emptyAdminContent"><img src="./imagenew/common/empty/img_file_empty.png" alt="" /><p>' + nothing_str + "</p></li>"
                        }
                        $C("#_fileWindowList").html(html), detail_file_is_found || $C("#_fileDetailClose").click(), 0 == disp_file_list.length ? ($C("#_emptyFileContent").show(), $C("#_fileWindowPagerIndex").text("")) : ($C("#_emptyFileContent").hide(), $C("#_fileWindowPagerIndex").text((file_window_pager_index + 1).toString() + " / " + file_window_pager_num)), file_window_pager.enableButtonAll(), 0 == file_window_pager_index && file_window_pager.disableButton(0).disableButton(1), file_window_pager_num - file_window_pager_index <= 1 && file_window_pager.disableButton(2).disableButton(3), self.buildStorageInfo()
                    }
                }, self.isImage = function(extension) {
                    return "gif" == extension || "jpg" == extension || "jpeg" == extension || "png" == extension
                }, self.isText = function(extension) {
                    switch (extension) {
                        case "txt":
                        case "css":
                        case "html":
                        case "htm":
                        case "shtml":
                        case "asp":
                        case "bashrc":
                        case "c":
                        case "cgi":
                        case "cpp":
                        case "dif":
                        case "h":
                        case "java":
                        case "js":
                        case "less":
                        case "scss":
                        case "styl":
                        case "stylus":
                        case "jsee":
                        case "json":
                        case "jsp":
                        case "m":
                        case "manifest":
                        case "mobileprovision":
                        case "plist":
                        case "mxml":
                        case "php":
                        case "pl":
                        case "pm":
                        case "py":
                        case "rb":
                        case "tpl":
                        case "vbs":
                        case "csv":
                        case "slk":
                        case "sql":
                        case "tsv":
                        case "def":
                        case "inf":
                        case "ini":
                        case "reg":
                        case "log":
                            return !0
                    }
                    return !1
                };
                var file_window = null,
                    file_window_search_word = "",
                    file_window_allcheck_button = null,
                    file_window_pager_num = 0,
                    file_window_pager_index = 0,
                    file_window_pager_view_num = boot_1.TM.taskwindow_pager_view_num,
                    file_window_pager = null,
                    checked_file_flag = {};
                self.prepareFileWindow = function() {
                    file_window = $("#_fileWindow").cwFloatWindow({
                        width: 920,
                        title: L.menu_file
                    }), $("#_fileWindowSearch").cwSearchBox({
                        update: function() {
                            file_window_search_word = this.getVal(), checked_file_flag = {}, self.buildFileWindow()
                        }
                    });
                    var delete_button_jqObj = $C("#_fileWindowDeleteButton");
                    delete_button_jqObj.cwMessageTip({
                        message: L.file_delete_hint,
                        delay: boot_1.TM.messagetip_delay
                    });
                    var disable_delete_button_click = !1,
                        delete_button = delete_button_jqObj.cwButton({
                            click: function() {
                                var file_list = [];
                                for (var fid in checked_file_flag) file_list.push(fid);
                                boot_1.CW.view.confirmDelete(L.file_multi_confirm_delete.replace(/%%num%%/, file_list.length), function() {
                                    boot_1.CW.showProgress(L.deleting), disable_delete_button_click || (disable_delete_button_click = setTimeout(function() {
                                        disable_delete_button_click = !1
                                    }, 5e3), boot_1.FL.deleteFile(file_list, function() {
                                        disable_delete_button_click = clearTimeout(disable_delete_button_click), boot_1.CW.hideProgress(), self.buildFileWindow(), checked_file_flag = {}
                                    }, function(error_message) {
                                        disable_delete_button_click = clearTimeout(disable_delete_button_click),
                                        boot_1.CW.hideProgress(), boot_1.CW.alert(error_message), self.buildFileWindow()
                                    }))
                                })
                            },
                            disable: function() {
                                this.$el.cwMessageTip().disable()
                            },
                            enable: function() {
                                this.$el.cwMessageTip().enable()
                            }
                        });
                    $("#_fileWindowList").on("click", "li", function() {
                        $C("#_fileWindowList").find("li").removeClass("adminDetailSelected");
                        var file = $(this);
                        file.addClass("adminDetailSelected");
                        var file_id = file.attr("data-file-id");
                        self.buildFileDetail(file_id), boot_1.AL.trackEvent("file_list", "open", {
                            label: "file_detail"
                        })
                    }).on("mouseenter", "._fileList", function() {
                        $.cwMessageTip.isInit(this) || $(this).cwMessageTip({
                            message: function(tipFrom) {
                                var file_id = tipFrom.attr("data-file-id");
                                return boot_1.FL.file_id2file_dat[file_id].fn
                            },
                            delayQuickMode: !1,
                            delay: 1e3
                        }).open()
                    }).on("cwCheckBox_update", function(event, is_check, file_id) {
                        is_check ? checked_file_flag[file_id] = is_check : checked_file_flag[file_id] && delete checked_file_flag[file_id];
                        var allcheck = $C("#_fileWindowCheckAll").cwCheckBox(),
                            file_num = $C("#_fileWindowList").find("._fileList").length,
                            check_num = Object.keys(checked_file_flag).length;
                        check_num ? (check_num == file_num ? allcheck.check() : allcheck.partialCheck(), delete_button.enable()) : (allcheck.unCheck(), delete_button.disable())
                    }), $("#_fileDetailClose").click(function() {
                        $C("#_fileWindowList").find("._fileList").removeClass("taskDetailSelected"), $C("#_fileDetailArea").attr("data-file-id", "").hide(), $C("#_fileDetailBlankArea").show()
                    }), $C("#_fileDetailTitle").click(function() {
                        var file_id = $C("#_fileDetailArea").attr("data-file-id"),
                            file = $C("#_fileWindowList").find("li._fileList[data-file-id=" + file_id + "]");
                        $C("#_fileWindowBox").scrollTo(file, 600)
                    }), file_window_allcheck_button = $("#_fileWindowCheckAllButton").cwButton({
                        click: function() {
                            $C("#_fileWindowCheckAll").cwCheckBox().toggle()
                        },
                        disable: function() {
                            $C("#_fileWindowCheckAll").cwCheckBox().disable()
                        },
                        enable: function() {
                            $C("#_fileWindowCheckAll").cwCheckBox().enable()
                        }
                    }), $C("#_fileWindowCheckAll").cwCheckBox({
                        update: function(is_checked, value, is_partial) {
                            var allcheck = this;
                            is_partial || (allcheck.isChecked() ? $C("#_fileWindowList").find("._cwCBUnchecked").each(function() {
                                $(this).cwCheckBox().check()
                            }) : $C("#_fileWindowList").find("._cwCBChecked").each(function() {
                                $(this).cwCheckBox().unCheck()
                            }))
                        }
                    });
                    var filepager_list = ["first", "prev", "next", "last"];
                    file_window_pager = $("#_fileWindowPager").cwButtonBar({
                        update: function(idx) {
                            switch (filepager_list[idx]) {
                                case "first":
                                    file_window_pager_index = 0;
                                    break;
                                case "prev":
                                    file_window_pager_index--, file_window_pager_index < 0 && (file_window_pager_index = 0);
                                    break;
                                case "next":
                                    file_window_pager_index++, file_window_pager_index >= file_window_pager_num && (file_window_pager_index = file_window_pager_num - 1);
                                    break;
                                case "last":
                                    file_window_pager_index = file_window_pager_num - 1
                            }
                            checked_file_flag = {}, self.buildFileWindow({
                                resetPager: !1
                            }), $C("#_fileWindowBox").scrollTop(0)
                        }
                    }), $("#_storageAddButton").click(function() {
                        return file_window.close(), boot_1.CW.view.showOptionPlanPrice(), !1
                    })
                }, self.openFileWindow = function() {
                    file_window || self.prepareFileWindow(), file_window.open(), self.buildFileWindow()
                }, self.getFilePanel = function(file_dat, option) {
                    var html = "";
                    if (file_dat === !1) html = '<div class="_delete">' + L.file_not_found + "</div>";
                    else if ("deleted" != file_dat.st) {
                        var extension = common_1.get_file_extension(file_dat.fn);
                        if ("filewindow" == option.type) {
                            var checked = !1;
                            checked_file_flag[file_dat.id] && (checked = !0), html = '<li class="_fileList" data-file-id="' + file_dat.id + '">' + $.cwCheckBox.create(checked, "", file_dat.id) + self.getFileTypeIcon(extension) + '<p class="fileAllListName">' + common_2.escape_html(file_dat.fn) + '</p><p class="fileAllListSize">' + common_2.bytename(file_dat.fz) + '</p><div class="fileAllListButtonArea btnGroup">' + ('<div class="_downloadFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_download_hint + '"><span class="icoFontActionDownload "></span></div>') + ('<div class="_moveFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.jump_to_addpoint + '"><span class="icoFontActionMove "></span></div>') + ('<div class="_editFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_rename_hint + '"><span class="icoFontActionEdit"></span></div>') + ('<div class="_deleteFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_delete_hint + '"><span class="icoFontActionDelete"></span></div>') + "</div></li>"
                        } else if ("filelist" == option.type) {
                            extension = common_1.get_file_extension(file_dat.fn);
                            var cmd_delete = "";
                            file_dat.aid == boot_1.AC.myid && (cmd_delete = '<div class="_editFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_rename_hint + '"><span class="icoFontActionEdit"></span></div>' + ('<div class="_deleteFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_delete_hint + '"><span class="icoFontActionDelete"></span></div>')), html = '<div class="fileContent">' + self.getFileTypeIcon(extension) + '<p class="_fileName fileName">' + common_2.escape_html(file_dat.fn) + '</p><div class="fileBtnArea btnGroup">' + ('<div class="_downloadFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.file_download_hint + '"><span class="icoFontActionDownload"></span></div>') + ('<div class="_moveFile _showDescription button" data-file-id="' + file_dat.id + '" aria-label="' + L.jump_to_addpoint + '"><span class="icoFontActionMove "></span></div>' + cmd_delete + "</div>") + "</div>"
                        }
                    }
                    return html
                }, self.getFileTypeIcon = function(extension) {
                    null == ext2key && self.prepareFileType();
                    var fileclass = "ico35UnknownFile";
                    return void 0 != ext2key[extension] && (fileclass = "ico35" + common_2.ucfirst(key2type[ext2key[extension]])), '<div class="fileIconArea ' + fileclass + '"></div>'
                }, self.enableFileArea = function() {
                    $C("#_file").show(), $("#_chatFileAll").show()
                }, self.disableFileArea = function() {
                    $C("#_file").hide()
                };
                var last_storage_info_id, last_storage = {};
                self.last_storage = last_storage, self.updateStorageInfo = function(storage, storage_limit, limit_time, is_limit) {
                    var activity_ratio = Math.floor(storage.total / storage_limit * 100);
                    if (activity_ratio >= 100) {
                        var info_dat = void 0;
                        if (void 0 != is_limit) info_dat = {
                            linktext: L.storage_limit_warning_message,
                            subject: L.storage_limit_warning_title,
                            body: L.storage_limit_warning_body,
                            linkClick: function(options) {
                                var _options = {
                                    title: options.subject,
                                    body: options.body
                                };
                                boot_1.CW.view.showStorageCautionDialog(_options)
                            }
                        };
                        else {
                            var limit_footer_message = L.storage_limit_notice_footer;
                            limit_footer_message = limit_footer_message.replace(/%%date%%/, boot_1.CW.getDate(limit_time, boot_1.ST.data.dateformat)), info_dat = {
                                linktext: L.storage_limit_notice_message,
                                subject: L.storage_limit_notice_title,
                                body: L.storage_limit_notice_body,
                                linkClick: function(options) {
                                    var _options = {
                                        title: options.subject,
                                        body: options.body,
                                        footer: '<span class="textDanger">' + limit_footer_message + "</span>"
                                    };
                                    boot_1.CW.view.showStorageCautionDialog(_options)
                                }
                            }
                        }
                        last_storage_info_id = boot_1.CW.view.saveInformation(last_storage_info_id, info_dat)
                    } else activity_ratio < 100 && latest_storage_info_id && (boot_1.CW.view.deleteInformation(latest_storage_info_id), latest_storage_info_id = void 0);
                    activity_ratio >= 90 ? ($C("#_myFileNotice").show(), $C("#_storageTotalUsageRatioText").addClass("noticeStorage")) : ($C("#_myFileNotice").hide(), $C("#_storageTotalUsageRatioText").removeClass("noticeStorage")), void 0 != storage_limit && (last_storage.storage = storage, last_storage.storage_limit = storage_limit, last_storage.limit_time = limit_time, last_storage.is_limit = is_limit, file_window && file_window.isOpen() && self.buildStorageInfo())
                }, self.buildStorageInfo = function() {
                    var storage = last_storage.storage,
                        storage_limit = last_storage.storage_limit,
                        limit_size = common_2.bytename(storage_limit, 1),
                        limit_storage = limit_size;
                    $("#_storageTotalCapacity").text(limit_storage);
                    var view_total_size = "";
                    void 0 != storage.total && (view_total_size = common_2.bytenameWithUnit(storage.total, (limit_size.match(/\w+$/) || []).pop())), $("#_storageTotalUsage").text(view_total_size);
                    var activity_ratio_sum = 0,
                        file_activity_ratio = 0,
                        view_file_size = "";
                    void 0 != storage.file && (file_activity_ratio = Math.round(storage.file / storage_limit * 100), activity_ratio_sum += file_activity_ratio, view_file_size = common_2.bytename(storage.file)), $("#_storageUsageFileSize").text(view_file_size);
                    var chat_activity_ratio = 0,
                        view_chat_size = "";
                    void 0 != storage.chat && (chat_activity_ratio = Math.round(storage.chat / storage_limit * 100), activity_ratio_sum += chat_activity_ratio, view_chat_size = common_2.bytename(storage.chat)), $("#_storageUsageMessageSize").text(view_chat_size);
                    var other_activity_ratio = 0,
                        view_other_size = "";
                    void 0 != storage.other && (other_activity_ratio = Math.round(storage.other / storage_limit * 100), activity_ratio_sum += other_activity_ratio, view_other_size = common_2.bytename(storage.other)), $("#_storageUsageOtherSize").text(view_other_size), activity_ratio_sum > 100 && (chat_activity_ratio = Math.round(chat_activity_ratio / activity_ratio_sum * 100), file_activity_ratio = Math.round(file_activity_ratio / activity_ratio_sum * 100), other_activity_ratio = Math.round(other_activity_ratio / activity_ratio_sum * 100), activity_ratio_sum = chat_activity_ratio + file_activity_ratio + other_activity_ratio);
                    var real_total_usage = parseInt(storage.file, 10) + parseInt(storage.chat, 10) + parseInt(storage.other, 10),
                        real_total_ratio = Math.floor(real_total_usage / parseInt(storage_limit, 10) * 100);
                    if (real_total_ratio >= 100 && 100 != activity_ratio_sum && real_total_ratio > activity_ratio_sum) {
                        var activity_ratio_label = ["chat", "file", "other"],
                            activity_ratio_list = [chat_activity_ratio, file_activity_ratio, other_activity_ratio],
                            max_label = activity_ratio_label[activity_ratio_list.indexOf(Math.max.apply(null, activity_ratio_list))];
                        switch (max_label) {
                            case "chat":
                                chat_activity_ratio++;
                                break;
                            case "file":
                                file_activity_ratio++;
                                break;
                            case "other":
                                other_activity_ratio++
                        }
                    }
                    $("#_storageUsageMessage").css("width", chat_activity_ratio + "%"), $("#_storageUsageFile").css("width", file_activity_ratio + "%"), $("#_storageUsageOther").css("width", other_activity_ratio + "%");
                    var view_activity_ratio_storage = "";
                    void 0 != storage.total && void 0 != storage_limit && (view_activity_ratio_storage = Math.floor(storage.total / storage_limit * 100)), $("#_storageTotalUsageRatio").text(view_activity_ratio_storage), boot_1.CW.is_business && !boot_1.CW.is_admin && $C("#_storageAddButton").hide(), boot_1.CW.is_business && boot_1.CW.is_admin && $("#_storageUserAdminLink").show()
                }, self.buildAllMyFile = function() {
                    self.buildFileWindow()
                }
            }
            var common_1 = require("../lib/common"),
                common_2 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.FileView = FileView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../lib/common": 69
        }
    ],
    136: [
        function(require, module, exports) {
            "use strict";

            function InviteMailAccountView() {
                var self = this;
                self.model = new InviteMailAccountModel_1.InviteMailAccountModel, self.tabId = "_contactWindowTabInviteEmail", self.invite_mail_state_type = "individual", self.view_state = "invite", self.selectorOfMessageForm = "#_contentInviteMailNew [name=message]", self.selectorOfIndividualEmailForms = ".contactInviteMailList [type=email]", self.selectorOfIndividualEmailList = ".contactInviteMailList li", self.selectorOfBulkEmailForm = "#_addFromEmailContentEmails", self.prepare = function() {
                    $C("#" + self.tabId).show(), $C("#_wrapper").on("click", "#_contactInviteMail", self.handleClickSendInviteMail).on("click", "#_contactOtherInviteMail", self.handleClickOtherInviteMail).on("click", "#_contactInviteMailAddAddress", self.handleClickAddMailAddressInputForm).on("click", ".contactInviteMailList .fromCancelIcon", self.handleClickRemoveMailAddressInputForm).on("keyup", self.selectorOfIndividualEmailForms, self.handleKeyUpMailAddressInputForm).on("keyup", self.selectorOfBulkEmailForm, self.handleKeyUpMailBulkAddressTextArea).on("click", ".changeFormBulk", self.handleClickChangeFormBulk).on("click", ".changeFormIndividual", self.handleClickChangeFormIndividual).on("click", "._contactRequestLink", function() {
                        $("#_contactWindowTabRequest").click()
                    }).on("click", "._contactMyRequestLink", function() {
                        $("#_contactWindowTabMyRequest").click()
                    })
                }, self.handleClickSendInviteMail = function(e) {
                    if (e.preventDefault(), self.applyModelMails(), self.applyModelMessage(), self.model.validate()) {
                        var hasMessage = self.model.hasMessage();
                        boot_1.CW.post("gateway.php", self.callApiParams(self.model.emails(), self.model.message()), function(json) {
                            self.view_state = "finished", self.buildFinishedView(json || {}), json.sent_contact_requests.length > 0 && boot_1.AC.view.buildContactWindow(), $C("#_contentInviteMailNew").hide(), $C("#_contentInviteMailFinished").show(), self.model.clear(), $C(self.selectorOfMessageForm).val(""), $C(".contactInviteErrorMessage").hide(), $(self.selectorOfIndividualEmailList).remove(), self.addMailAddress(), $C(self.selectorOfBulkEmailForm).val(""), self.visibleInputMailFromCancelIcon(), $C("#_contactInviteMail").hide(), $C("#_contactOtherInviteMail").show(), hasMessage ? boot_1.AL.trackEvent("contact_list", "send", {
                                label: "mail_invitation_with_message"
                            }) : boot_1.AL.trackEvent("contact_list", "send", {
                                label: "mail_invitation"
                            })
                        }, function(error_message) {
                            boot_1.CW.alert(error_message)
                        })
                    } else $C(".contactInviteErrorMessage").text(self.model.validateMessage()).show()
                }, self.handleClickOtherInviteMail = function(e) {
                    e.preventDefault(), self.view_state = "invite", self.showInviteMailNew(), self.giveFocus()
                }, self.handleClickAddMailAddressInputForm = function(e) {
                    e.preventDefault(), self.addMailAddress(), self.visibleInputMailFromCancelIcon(), $(self.selectorOfIndividualEmailForms).last().focus()
                }, self.handleClickRemoveMailAddressInputForm = function(e) {
                    e.preventDefault();
                    var emails = $(self.selectorOfIndividualEmailList);
                    emails.length > 1 ? $(this).closest("li").remove() : $(this).closest("li").find("[name=email]").val(""), self.visibleInputMailFromCancelIcon(), self.giveFocus()
                }, self.handleKeyUpMailAddressInputForm = function() {
                    self.visibleInputMailFromCancelIcon(), self.applyModelMails(), self.model.validate() && $C(".contactInviteErrorMessage").hide()
                }, self.handleKeyUpMailBulkAddressTextArea = function() {
                    self.applyModelMails(), self.model.validate() && $C(".contactInviteErrorMessage").hide()
                }, self.handleClickChangeFormBulk = function(e) {
                    e.preventDefault(), self.invite_mail_state_type = "bulk";
                    var $inputMails = $(self.selectorOfIndividualEmailForms),
                        emails = $inputMails.filter(function(i, elem) {
                            return elem.value
                        }).map(function(i, elem) {
                            return elem.value
                        });
                    self.model.setEmails(emails.toArray()), $C(self.selectorOfBulkEmailForm).val(self.model.emails().join("\n")), $C("#_contactInviteMailIndividual").hide(), $C("#_contactInviteMailBulk").show(), self.giveFocus()
                }, self.handleClickChangeFormIndividual = function(e) {
                    e.preventDefault(), self.invite_mail_state_type = "individual";
                    var emailsText = $C(self.selectorOfBulkEmailForm).val();
                    self.model.parseBulkEmails(emailsText), $(self.selectorOfIndividualEmailList).remove();
                    var emails = self.model.emails();
                    emails.length > 0 ? emails.forEach(function(email) {
                        self.addMailAddress(email)
                    }) : self.addMailAddress(), self.visibleInputMailFromCancelIcon(), $C("#_contactInviteMailBulk").hide(), $C("#_contactInviteMailIndividual").show(), self.giveFocus()
                }, self.init = function() {
                    self.view_state = "invite"
                }, self.show = function() {
                    $C(".contactInviteErrorMessage").hide(), $C(".contactInviteMailFooter").show(), $C("#_contactInviteMailArea").show(), "invite" == self.view_state && (self.showInviteMailNew(), self.visibleInputMailFromCancelIcon())
                }, self.hide = function() {
                    $C("#_contactInviteMailArea").hide(), $C(".contactInviteMailFooter").hide()
                }, self.giveFocus = function() {
                    "individual" == self.invite_mail_state_type ? $("#_contactInviteMailIndividual [type=email]").last().focus() : $(self.selectorOfBulkEmailForm).focus()
                }, self.buildFinishedView = function(value) {
                    var createEmailOnlyElem = function(text) {
                        return $("<li>").text(text)
                    }, sent_emails = (value.sent_invitations || []).concat(value.sent_contact_requests || []),
                        established_contacts = value.established || [];
                    sent_emails = established_contacts.reduce(function(prev, curr) {
                        return prev.push(curr.email_address), prev
                    }, sent_emails), $C("#_contactInviteMailSentEmails .contactInviteMailResultList").html(sent_emails.map(createEmailOnlyElem)), sent_emails.length > 0 ? ($C("#_contentInviteMailFinished .alertSuccess").show(), $C("#_contentInviteMailFinished .alertDanger").hide(), $C("#_contactInviteMailSentEmails").show()) : ($C("#_contentInviteMailFinished .alertSuccess").hide(), $C("#_contentInviteMailFinished .alertDanger").show(), $C("#_contactInviteMailSentEmails").hide());
                    var unreachable_email_addresses = value.unreachable_email_addresses || [];
                    $C("#_contactInviteMailUnreachableEmailAddresses .contactInviteMailResultList").html(unreachable_email_addresses.map(createEmailOnlyElem)), unreachable_email_addresses.length > 0 ? $C("#_contactInviteMailUnreachableEmailAddresses").show() : $C("#_contactInviteMailUnreachableEmailAddresses").hide();
                    var already_requested = value.already_requested || [];
                    $C("#_contactInviteMailAlreadyRequested .contactInviteMailResultList").html(already_requested.map(function(connect) {
                        var aElem = $("<a>").addClass("_contactMyRequestLink").attr({
                            href: "#"
                        }).text(connect.name);
                        return $("<li>").text(connect.email_address).append([" [", aElem, "]"])
                    })), already_requested.length > 0 ? ($C("#_contactInviteMailAlreadyRequested").show(), $("#_contentInviteMailFinished ._contactMyRequestLink").cwMessageTip({
                        message: L.contact_invite_mail_move_to_your_sent_requests,
                        delay: 100
                    })) : $C("#_contactInviteMailAlreadyRequested").hide();
                    var already_connected = value.already_connected || [];
                    $C("#_contactInviteMailAlreadyConnected .contactInviteMailResultList").html(already_connected.map(function(connect) {
                        var aElem = $("<a>").addClass("_roomLink").attr({
                            href: "#",
                            "data-rid": connect.direct_chat_id
                        }).text(connect.name);
                        return $("<li>").text(connect.email_address).append([" [", aElem, "]"])
                    })), already_connected.length > 0 ? ($C("#_contactInviteMailAlreadyConnected").show(), $("#_contentInviteMailFinished ._roomLink").cwMessageTip({
                        message: L.contact_invite_mail_move_to_direct_chat,
                        delay: 100
                    })) : $C("#_contactInviteMailAlreadyConnected").hide();
                    var request_already_received = value.request_already_received || [];
                    $C("#_contactInviteMailRequestAlreadyReceived .contactInviteMailResultList").html(request_already_received.map(function(connect) {
                        var aElem = $("<a>").addClass("_contactRequestLink").attr({
                            href: "#"
                        }).text(connect.name);
                        return $("<li>").text(connect.email_address).append([" [", aElem, "]"])
                    })), request_already_received.length > 0 ? ($C("#_contactInviteMailRequestAlreadyReceived").show(), $("#_contentInviteMailFinished ._contactRequestLink").cwMessageTip({
                        message: L.contact_invite_mail_move_to_incoming_requests,
                        delay: 100
                    })) : $C("#_contactInviteMailRequestAlreadyReceived").hide();
                    var not_allowed_connecting = value.not_allowed_connecting || [];
                    $C("#_contactInviteMailNotAllowedConnecting .contactInviteMailResultList").html(not_allowed_connecting.map(createEmailOnlyElem)), not_allowed_connecting.length > 0 ? $C("#_contactInviteMailNotAllowedConnecting").show() : $C("#_contactInviteMailNotAllowedConnecting").hide();
                    var contact_request_limit_exceeded = value.contact_request_limit_exceeded || [];
                    $C("#_contactInviteMailContactRequestLimitExceeded .contactInviteMailResultList").html(contact_request_limit_exceeded.map(createEmailOnlyElem)), contact_request_limit_exceeded.length > 0 ? $C("#_contactInviteMailContactRequestLimitExceeded").show() : $C("#_contactInviteMailContactRequestLimitExceeded").hide();
                    var your_email_addresses = void 0 != value.your_email_address ? [value.your_email_address] : [];
                    $C("#_contactInviteMailContactYourEmailAddress .contactInviteMailResultList").html(your_email_addresses.map(createEmailOnlyElem)), your_email_addresses.length > 0 ? $C("#_contactInviteMailContactYourEmailAddress").show() : $C("#_contactInviteMailContactYourEmailAddress").hide()
                }, self.applyModelMails = function() {
                    var $inputMails = $C(self.selectorOfBulkEmailForm);
                    if ("individual" === self.invite_mail_state_type) {
                        $inputMails = $(self.selectorOfIndividualEmailForms);
                        var mails = $.map($inputMails, function(n) {
                            return n.value
                        });
                        self.model.setEmails(mails)
                    } else self.model.parseBulkEmails($inputMails.val())
                }, self.applyModelMessage = function() {
                    var $message = $C(self.selectorOfMessageForm);
                    self.model.setMessage($message.val())
                }, self.callApiParams = function(emails, message) {
                    return {
                        cmd: "invite_contact",
                        e: emails,
                        m: message,
                        nm: boot_1.AC.getName(boot_1.AC.myid),
                        av: boot_1.CW.getAvatarPanel(boot_1.AC.myid, {
                            src: !0
                        })
                    }
                }, self.addMailAddress = function(value) {
                    var inputTag = '<input type="email" name="email" placeholder="' + L.contact_invite_mail_enter_your_email_address + '"/>',
                        html = '<li><span class="_cwFWButton icoFontCancel icoSizeLarge fromCancelIcon"></span></li>',
                        input = $(html).prepend($(inputTag).val(value));
                    $(".contactInviteMailList").append(input)
                }, self.visibleInputMailFromCancelIcon = function() {
                    var $mails = $(self.selectorOfIndividualEmailList);
                    if ($mails.length > 1) $(".contactInviteMailList .fromCancelIcon").show();
                    else {
                        var email = $mails.find("[name=email]").val();
                        "" !== email ? $(".contactInviteMailList .fromCancelIcon").show() : $(".contactInviteMailList .fromCancelIcon").hide()
                    }
                }, self.showInviteMailNew = function() {
                    $C("#_contentInviteMailFinished").hide(), $C("#_contentInviteMailNew").show(), $C("#_contactOtherInviteMail").hide(), $C("#_contactInviteMail").show()
                }
            }
            var InviteMailAccountModel_1 = require("../model/InviteMailAccountModel"),
                boot_1 = require("../controller/boot");
            exports.InviteMailAccountView = InviteMailAccountView
        }, {
            "../controller/boot": 66,
            "../model/InviteMailAccountModel": 115
        }
    ],
    137: [
        function(require, module, exports) {
            "use strict";

            function RoomDialogView(model) {
                var self = this;
                self.model = model, self.checked_flag = {}, self.contact_flag = {}, self.member_flag = {}, self.adding_member_list = {}, self.is_valid_link_name = !0, self.is_folded = !1, self.common_role, self.room_dat = null;
                var room_invitation_link_setting_dialog, room_permission_setting_dialog, room_icon_tip;
                self.openInvitationLinkSetting = function(room_id) {
                    room_invitation_link_setting_dialog || self.prepareInvitationLinkSetting(), room_invitation_link_setting_dialog.open(room_id)
                }, self.openRoomPermissionSetting = function(room_id) {
                    room_permission_setting_dialog || self.prepareRoomPermissionSetting(), room_permission_setting_dialog.open(room_id)
                }, self.prepare = function() {
                    self.prepareMember(), boot_1.CW.view.onIframeReady(function() {
                        $("#_updateInvitationLinkSettingIframe, #_updateRoomPermissionSettingIframe").bind("load", function() {
                            boot_1.CW.hideProgress();
                            var content = common_1.unescape_html($(this).contents().find("body").html());
                            if (content.length > 0) {
                                content = content.match(/\{.+\}/)[0];
                                var json_raw = $.parseJSON(content),
                                    json = json_raw.result;
                                json_raw.status.success ? void 0 != json.header_error ? boot_1.CW.alert(L["error_upload_" + json.header_error]) : boot_1.CW.watch() : boot_1.CW.alert(L.raise_error)
                            }
                        })
                    }), $("#_roomInfoHeaderDelete").click(function() {
                        $(this).prop("checked") ? $("#_roomInfoHeader").prop("disabled", !0) : $("#_roomInfoHeader").prop("disabled", !1)
                    })
                }, self.link_code_checker = {
                    last_checked_link_name: "",
                    type_timer: null,
                    validate: function(input, target) {
                        var link_name = input.val();
                        if (link_name != this.last_checked_link_name) {
                            this.last_checked_link_name = link_name, this.type_timer && (clearTimeout(this.type_timer), this.type_timer = null);
                            var btn_clip_copy = target.find(".js_invitationLinkBtnCopy"),
                                btn_link_code_edited = target.find(".js_invitationLinkBtnEdited"),
                                link_code_display_input = target.find(".js_invitationLinkDisplayInput"),
                                loading_img = target.find(".js_invitationLinkCodeLoading"),
                                alert_message = target.find(".js_invitationLinkCodeUsed");
                            if (btn_link_code_edited.removeClass("btnPrimary").addClass("btnDisable"), !link_name) return loading_img.hide(), alert_message.text(""), btn_clip_copy.attr("data-clipboard-text", ""), void(self.is_valid_link_name = !1);
                            if (link_name.length > 50) return loading_img.hide(), alert_message.text(L.error_maxlength.replace("%%length%%", 50)).css("color", "red"), void(self.is_valid_link_name = !1);
                            if (!link_name.match(/^[-_a-zA-Z0-9]+$/)) return loading_img.hide(), alert_message.text(L.error_invalidchar).css("color", "red"), void(self.is_valid_link_name = !1);
                            loading_img.show(), alert_message.text(""), this.type_timer = setTimeout(function() {
                                loading_img.show(), boot_1.CW.get("gateway.php", {
                                    cmd: "check_chat_link_name",
                                    link_name: link_name,
                                    rid: boot_1.RM.id
                                }, function(json) {
                                    if (loading_img.hide(), json.used) alert_message.text(L.error_already_used).css("color", "red"), self.is_valid_link_name = !1;
                                    else {
                                        alert_message.text(L.available).css("color", "green"), self.is_valid_link_name = !0;
                                        var link_code = CHATWORK_MYPAGE_PATH + "/g/" + input.val();
                                        btn_clip_copy.attr("data-clipboard-text", link_code), link_code_display_input.val(link_code), btn_link_code_edited.removeClass("btnDisable").addClass("btnPrimary")
                                    }
                                }), this.type_timer = void 0
                            }, 1e3)
                        }
                    }
                }, self.linkCodeEditor = function(target) {
                    var btn_clip_copy = target.find(".js_invitationLinkBtnCopy"),
                        btn_link_code_edited = target.find(".js_invitationLinkBtnEdited"),
                        link_code_display = target.find(".js_invitationLinkDisplay"),
                        link_code_display_input = target.find(".js_invitationLinkDisplayInput"),
                        link_code_editor = target.find(".js_invitationLinkEditor"),
                        link_code_editor_input = target.find(".js_invitationLinkEditorInput"),
                        loading_img = target.find(".js_invitationLinkCodeLoading"),
                        alert_message = target.find(".js_invitationLinkCodeUsed");
                    return {
                        open: function() {
                            var current_data = btn_clip_copy.attr("data-clipboard-text");
                            link_code_display.hide(), link_code_editor.show(), loading_img.hide(), alert_message.text(""), btn_clip_copy.attr("data-current", current_data)
                        },
                        cancel: function() {
                            var current_data = btn_clip_copy.attr("data-current"),
                                current_link_name = current_data.replace(/(^https.+\/g\/)(.+$)/, "$2");
                            btn_clip_copy.attr("data-clipboard-text", current_data).removeAttr("data-current"), link_code_display_input.val(current_data), link_code_editor_input.val(current_link_name), this.reset(target)
                        },
                        edit: function() {
                            btn_clip_copy.removeAttr("data-current"), this.reset(target)
                        },
                        reset: function() {
                            link_code_display.show(), link_code_editor.hide(), loading_img.hide(), alert_message.text(""), btn_clip_copy.text(L.invitation_link_code_copy), btn_link_code_edited.removeClass("btnDisable").addClass("btnPrimary")
                        }
                    }
                }, self.prepareMember = function() {
                    $("#_memberEditMemberBox").on("cwSelectBox_update", "._cwSL", function() {
                        var sl = $(this),
                            aid = sl.attr("data-aid"),
                            slbox = sl.cwSelectBox();
                        self.member_flag[aid] = slbox.getVal()
                    }), $("#_subEditMember").click(function() {
                        self.addRoomMember(boot_1.RM.id)
                    }), $("#_memberEditMemberAdd").click(function() {
                        member_dialog.close(), self.addRoomMember(boot_1.RM.id)
                    }), $("#_memberAdditionMemberEdit").click(function() {
                        memberaddition_dialog.close(), self.editRoomMember(boot_1.RM.id)
                    })
                }, self.joinGroupchat = function(link_code) {
                    boot_1.CW.get("gateway.php", {
                        cmd: "get_invitation_link_info",
                        link_code: link_code
                    }, function(result) {
                        if (result) return "already_joined" === result.link_status ? boot_1.RL.selectRoom(result.link_info.room_id) : void boot_1.RL.showJoinPublicChatDialog(result.link_info.room_id)
                    }, function(msg, result) {
                        var message;
                        if ("not_found" === result.link_status) message = L.join_groupchat_not_found;
                        else if ("my_disable_external" === result.link_status) message = L.join_groupchat_my_disable_external;
                        else {
                            if ("other_disable_external" !== result.link_status) return;
                            message = L.join_groupchat_other_disable_external
                        }
                        return boot_1.CW.alert(message)
                    })
                };
                var prepared_roominfo = !1;
                self.prepareRoomInfo = function() {
                    if (!prepared_roominfo) {
                        prepared_roominfo = !0, boot_1.CW.view.onIframeReady(function() {
                            $("#_roomInfoFrame").bind("load", function() {
                                boot_1.CW.hideProgress();
                                var content = common_1.unescape_html($(this).contents().find("body").html());
                                if (content.length > 0) {
                                    content = content.match(/\{.+\}/)[0];
                                    var json_raw = $.parseJSON(content),
                                        json = json_raw.result;
                                    if (json_raw.status.success) {
                                        if (void 0 != json.message && boot_1.CW.alert(json.message), void 0 == json.add) {
                                            var room = boot_1.RL.rooms[json.id];
                                            void 0 != json.name && room.setName(json.name), void 0 != json.description && (room.description = json.description), void 0 != json.member_dat && (room.member_dat = json.member_dat), room.build()
                                        } else if (void 0 != json.error) {
                                            var title = L.chatroom_error_cant_add,
                                                message = L.chatroom_error_planlimit;
                                            message = message.replace(/%%plan_name%%/, json.error.plan_name), message = message.replace(/%%limit_num%%/, json.error.limit_num), boot_1.CW.view.showLimitErrorDialog(title, message)
                                        } else boot_1.RL.added_room_ids.push(json.room_id);
                                        boot_1.CW.watch()
                                    } else json_raw.status.message ? boot_1.CW.alert(json_raw.status.message) : boot_1.CW.alert(L.raise_error)
                                }
                            })
                        });
                        var _memberEditMemberFilterInterval;
                        $("#_memberEditMemberFilter").cwSearchBox({
                            update: function() {
                                clearTimeout(_memberEditMemberFilterInterval), _memberEditMemberFilterInterval = setTimeout(function() {
                                    self.buildMember(["member"], $("#_memberEditMemberBox"))
                                }, 200)
                            }
                        }), $("#_memberEditMemberBox").on("click", "._memberDelete", function() {
                            var aid = $(this).attr("data-aid");
                            self.deleteMember(aid)
                        });
                        var _memberAdditionContactFilterInterval;
                        $("#_memberAdditionContactFilter").cwSearchBox({
                            update: function() {
                                clearTimeout(_memberAdditionContactFilterInterval), _memberAdditionContactFilterInterval = setTimeout(function() {
                                    self.buildMember(["contact"], $("#_memberAdditionMemberBox"))
                                }, 200)
                            }
                        }), $("#_memberAdditionOrganizationFilter").on("change", "input", function() {
                            self.buildMember(["contact"], $("#_memberAdditionMemberBox"))
                        }), $("#_memberAdditionSelectRole").on("cwSelectBox_update", "._cwSL", function() {
                            self.common_role = $(this).cwSelectBox().getVal(), self.changeCommonRole($("#_memberAdditionContactTableBox"))
                        });
                        var _roomInfoContactFilterInterval;
                        $("#_roomInfoContactFilter").cwSearchBox({
                            update: function() {
                                clearTimeout(_roomInfoContactFilterInterval), _roomInfoContactFilterInterval = setTimeout(function() {
                                    self.buildMember(["contact"], $("#_roomInfoMemberBox"))
                                }, 200)
                            }
                        }), $("#_roomInfoOrganizationFilter").on("change", "input", function() {
                            self.buildMember(["contact"], $("#_roomInfoMemberBox"))
                        }), $("#_roomInfoSelectRole").on("cwSelectBox_update", "._cwSL", function() {
                            self.common_role = $(this).cwSelectBox().getVal(), self.changeCommonRole($("#_roomInfoContactTableBox"))
                        })
                    }
                }, self.prepareInvitationLinkSetting = function() {
                    function changeVisibility(state) {
                        var advanced_setting_mask = $(".invitationLinkAdvancedSettingMask");
                        if (link_code_editor.reset(), state) {
                            if ($("#_invitationLinkActive").show(), $("#_invitationLinkDisabled").hide(), $("#_invitationLinkSettingStatus").cwCheckBox().check(), $("#_public").val("1"), !advanced_setting_mask) return;
                            $("#_invitationLinkAdvancedSetting").removeClass("isDisabled"), advanced_setting_mask.remove()
                        } else $("#_invitationLinkActive").hide(), $("#_invitationLinkDisabled").show(), $("#_invitationLinkSettingStatus").cwCheckBox().unCheck(), $("#_invitationLinkAdvancedSetting").append('<div class="invitationLinkAdvancedSettingMask"></div>').addClass("isDisabled"), $("#_public").val("0");
                        room_invitation_link_setting_dialog.open()
                    }
                    room_invitation_link_setting_dialog = $("#_invitationLinkSettingDialog").cwDialog({
                        title: L.invitation_link_setting_title,
                        width: 750,
                        autoOpen: !1,
                        resizable: !1,
                        modal: !0,
                        hide: "fade",
                        buttonLabels: [L.button_save, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            if (!idx) {
                                var room_id = this.data.room_id,
                                    error_list = [];
                                if (self.is_valid_link_name || error_list.push(L.invitation_link_setting_error_invalid_link_name), error_list.length) boot_1.CW.alert(error_list.join("\n"));
                                else {
                                    $("#_invitationLinkSettingId").val(room_id);
                                    var form_1 = $("#_invitationLinkSettingForm"),
                                        xhr = new XMLHttpRequest;
                                    xhr.open("POST", form_1.attr("action"), !0), xhr.onreadystatechange = function() {
                                        if (4 === xhr.readyState || 0 === xhr.status) {
                                            var iframe = $('[name="' + form_1.attr("target") + '"]');
                                            iframe.contents().find("body").html(xhr.responseText), iframe.trigger("load")
                                        }
                                    }, xhr.send(new FormData(form_1.get(0))), boot_1.CW.showProgress(L.saving), this.close()
                                }
                            }
                        },
                        open: function(room_id) {
                            if (room_id) {
                                this.data.room_id = room_id;
                                var room_dat = boot_1.RL.rooms[room_id];
                                self.is_valid_link_name = !0, changeVisibility(room_dat.public), room_dat.join_need_accept ? $("#_invitationLinkJoinNeedAccept").cwCheckBox().check() : $("#_invitationLinkJoinNeedAccept").cwCheckBox().unCheck(), $("#_publicDescription").val(room_dat.public_description), $("#_invitationLinkSettingHeaderDelete").cwCheckBox().unCheck(), $("#_invitationLinkSettingHeader").prop("disabled", !1), $("#_invitationLinkEditor").hide();
                                var link_name, chatwork_path_code = CHATWORK_MYPAGE_PATH + "/g/";
                                link_name = room_dat.link_name ? room_dat.link_name : room_dat.id;
                                var link_code = chatwork_path_code + link_name,
                                    link_code_controller = $("#_invitationLinkActive"),
                                    btn_copy_link_url = link_code_controller.find(".js_invitationLinkBtnCopy"),
                                    chatwork_path = link_code_controller.find(".js_invitationLinkURL"),
                                    display_input = link_code_controller.find(".js_invitationLinkDisplayInput"),
                                    editor_input = link_code_controller.find(".js_invitationLinkEditorInput");
                                chatwork_path.text(chatwork_path_code), display_input.val(link_code), editor_input.val(link_name), btn_copy_link_url.attr("data-clipboard-text", link_code).text(L.invitation_link_code_copy);
                                var clip = new Clipboard(".js_invitationLinkBtnCopy");
                                clip.on("success", function() {
                                    btn_copy_link_url.text(L.text_copied)
                                }), room_dat.header ? ($("#_invitationLinkSettingHeaderCurrent").html('<img src="' + S3_PATH + "/header/" + room_dat.header + '" width="30" height="30" style="border:1px solid #999"/>'), $("#_invitationLinkSettingHeaderDeleteBox").show()) : ($("#_invitationLinkSettingHeaderCurrent").empty(), $("#_invitationLinkSettingHeaderDeleteBox").hide()), $("#_invitationLinkSettingHeader").val("")
                            }
                        }
                    });
                    var link_code_editor = self.linkCodeEditor($("#_invitationLinkActive"));
                    link_code_editor.reset(), $("#_invitationLinkSettingStatus").cwCheckBox({
                        update: function() {
                            var state = !! this.isChecked();
                            changeVisibility(state), room_invitation_link_setting_dialog.open()
                        }
                    }), $("#_invitationLinkActive").on("click", ".js_invitationLinkOpenEditor", function() {
                        link_code_editor.open(), room_invitation_link_setting_dialog.open()
                    }).on("click", ".js_invitationLinkCloseEditor", function() {
                        link_code_editor.cancel(), room_invitation_link_setting_dialog.open()
                    }).on("click", ".js_invitationLinkBtnEdited", function() {
                        self.is_valid_link_name && (link_code_editor.edit(), room_invitation_link_setting_dialog.open())
                    }).on("keyup blur", ".js_invitationLinkEditorInput", function() {
                        var input = $(this);
                        self.link_code_checker.validate(input, $("#_invitationLinkActive"))
                    })
                }, self.prepareRoomPermissionSetting = function() {
                    room_permission_setting_dialog = $("#_roomPermissionsettingDialog").cwDialog({
                        title: L.room_permission_setting_title,
                        width: 750,
                        autoOpen: !1,
                        resizable: !1,
                        modal: !0,
                        hide: "fade",
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            if (!idx) {
                                var room_id = this.data.room_id;
                                $("#_roomPermissionsettingId").val(room_id), $("#_roomPermissionsettingForm").submit(), boot_1.CW.showProgress(L.saving), this.close()
                            }
                        },
                        open: function(room_id) {
                            this.data.room_id = room_id;
                            var checkbox_dat = {
                                _allowSeeMember: "allow_see_member",
                                _allowUploadFile: "allow_upload_file",
                                _allowAddTask: "allow_add_task",
                                _allowSendMessage: "allow_send_message"
                            }, room_dat = boot_1.RL.rooms[room_id];
                            self.is_valid_link_name = !0;
                            for (var id in checkbox_dat) {
                                var param_name = checkbox_dat[id];
                                room_dat[param_name] ? $("#" + id).cwCheckBox().check() : $("#" + id).cwCheckBox().unCheck()
                            }
                        }
                    })
                }, self.checkSameMember = function(member_dat) {
                    $("#_roomInfoContact").find("._selectableContactRow").each(function() {
                        var cb_elem = $(this).find("._cwCB"),
                            cb = cb_elem.cwCheckBox(),
                            sl = $(this).find("._cwSL").cwSelectBox(),
                            aid = cb_elem.find("input").val();
                        member_dat[aid] && (cb.check(), sl.select(member_dat[aid]))
                    });
                    for (var aid in member_dat) aid !== MYID && boot_1.AC.isContact(aid) && (self.adding_member_list[aid] = member_dat[aid], self.checked_flag[aid] = !0)
                };
                var build_member_timer = null;
                self.deleteMember = function(aid) {
                    $("#_memberRowAid" + aid).remove(), self.contact_flag[aid] = !0, delete self.checked_flag[aid], delete self.member_flag[aid], build_member_timer || (build_member_timer = setTimeout(function() {
                        self.buildMember(["member", "contact"], $("#_memberEditMemberBox")), build_member_timer = null
                    }, 100))
                }, self.updateCheckBoxAll = function(target_element) {
                    var contact_table = target_element.find(".memberTable"),
                        cb_all = target_element.find(".memberTableCheckAll ._cwCB").cwCheckBox(),
                        contacts_num = contact_table.find("tr").length,
                        checked_contacts = contact_table.find("._cwCBChecked").length;
                    checked_contacts ? checked_contacts === contacts_num ? cb_all.check() : checked_contacts < contacts_num && cb_all.partialCheck() : cb_all.unCheck()
                }, self.getCommonRole = function(target_element) {
                    var common_role_sl = target_element.find(".memberTableSelectRole ._cwSL").cwSelectBox(),
                        common_role = common_role_sl.getVal();
                    return common_role
                }, self.changeCommonRole = function(target_element) {
                    var contact_table = target_element.find("._memberTableContact");
                    contact_table.find("._cwSL").each(function() {
                        var sl = $(this),
                            aid = sl.attr("data-aid"),
                            sl_box = sl.cwSelectBox(),
                            common_role = self.getCommonRole(target_element);
                        return "default" === common_role ? void(self.common_role = "member") : (self.adding_member_list[aid] && (self.adding_member_list[aid] = common_role), void sl_box.select(common_role, {
                            silent: !0
                        }))
                    })
                }, self.updateContactCheckBox = function(cb_element, target_element) {
                    var selected_id = cb_element.getVal();
                    self.checked_flag[selected_id] = !self.checked_flag[selected_id];
                    var sl = target_element.find(".roleSelect [data-aid=" + selected_id + "]"),
                        role = sl.cwSelectBox().getVal();
                    self.checked_flag[selected_id] ? ($(sl).removeClass("isHide"), self.adding_member_list[selected_id] = role) : ($(sl).addClass("isHide"), delete self.adding_member_list[selected_id])
                }, self.checkAllContact = function(cb_element, is_partial, target_element) {
                    var contact_list_allcheck = cb_element;
                    is_partial || (contact_list_allcheck.isChecked() ? target_element.find("._cwCBUnchecked").each(function() {
                        var role_element = $(this).parents("._selectableContactRow").find("._cwSL"),
                            role = role_element.cwSelectBox();
                        $(this).cwCheckBox().check(), role.select(self.common_role)
                    }) : target_element.find("._cwCBChecked").each(function() {
                        $(this).cwCheckBox().unCheck()
                    }))
                }, self.buildMember = function(type_list, target_element) {
                    var group_filter = !1;
                    "organized" === target_element.find('.organizationFilter input[type="radio"]:checked').val() && (group_filter = !0);
                    var group_id = boot_1.AC.getGroupId(boot_1.AC.myid),
                        show_limit = 200,
                        role_list = {
                            admin: {
                                name: L.admin,
                                tooltip: L.chatroom_member_role_admin_desc
                            },
                            member: {
                                name: L.member,
                                tooltip: L.chatroom_member_role_member_desc
                            },
                            readonly: {
                                name: L.readonly,
                                tooltip: L.chatroom_member_role_readonly_desc
                            }
                        }, member_num = 0,
                        contact_num = 0,
                        type_flag = {
                            member: self.member_flag,
                            contact: self.contact_flag
                        }, filter_word_list = [],
                        filter_input = target_element.find("._searchBox").cwSearchBox().getVal();
                    filter_input && (filter_word_list = boot_1.CW.splitWithSpace(filter_input), filter_word_list = filter_word_list.map(function(word) {
                        return word.toLowerCase()
                    }));
                    for (var i = 0; i < type_list.length; i++) {
                        var type = type_list[i],
                            idx_list = [];
                        if (Object.keys) idx_list = Object.keys(type_flag[type]);
                        else
                            for (var aid in type_flag[type]) idx_list.push(aid);
                        Room_1.Room.prototype.sortMember(idx_list);
                        var list_table = target_element.find("._memberTable" + common_1.ucfirst(type));
                        list_table.quickEmpty();
                        var rows = "",
                            total_user_num = idx_list.length;
                        show_limit < total_user_num && $("#_roomInfoShowLimitNum" + common_1.ucfirst(type)).text(L.chatroom_show_limit_member_num.replace("%%num%%", show_limit));
                        for (var idx = 0; idx < total_user_num; idx++) {
                            var id = idx_list[idx];
                            if ("member" == type) {
                                if (filter_word_list.length > 0 && !boot_1.AC.isMatchedWithKeyList(filter_word_list, id)) continue;
                                if (member_num++, member_num > show_limit) break;
                                rows += '<tr id="_memberRowAid' + id + '" class="selectableRow"><td>' + boot_1.CW.getAvatarPanel(id, {
                                    size: "small",
                                    hovertip: !1,
                                    clicktip: !1
                                }) + '</td><td><p class="roomInfoContactListName autotrim">' + boot_1.CW.getName(id) + '</p><p class="roomInfoContactListOrgName autotrim">' + boot_1.CW.getOrgTitle(id) + "</p></td><td>", rows += $.cwSelectBox.create([{
                                    label: role_list.admin.name,
                                    value: "admin",
                                    tooltip: role_list.admin.tooltip
                                }, {
                                    label: role_list.member.name,
                                    value: "member",
                                    tooltip: role_list.member.tooltip
                                }, {
                                    label: role_list.readonly.name,
                                    value: "readonly",
                                    tooltip: role_list.readonly.tooltip
                                }], "", self.member_flag[id], {
                                    class: "_memberEditRole",
                                    "data-aid": id
                                }), rows += '</td><td class="_memberDelete" data-aid="' + id + '"><span class="icoFontCancel verticalMiddle"></span><span class="icoTextHide">' + L.button_delete + "</span></td></tr>"
                            } else {
                                if (group_filter && boot_1.AC.getGroupId(id) !== group_id) continue;
                                if (filter_word_list.length > 0 && !boot_1.AC.isMatchedWithKeyList(filter_word_list, id)) continue;
                                if (contact_num++, contact_num > show_limit) break;
                                var sl_class, checked = Boolean(self.checked_flag[id]);
                                sl_class = checked ? "_memberTableIndividualRole" : "_memberTableIndividualRole isHide";
                                var role = self.common_role;
                                self.adding_member_list[id] && (role = self.adding_member_list[id]), rows += '<tr class="_cwTextUnselectable _selectableContactRow selectableRow"><td>' + $.cwCheckBox.create(checked, !1, id) + "</td>", rows += "<td>" + boot_1.CW.getAvatarPanel(id, {
                                    size: "small",
                                    hovertip: !1,
                                    clicktip: !1
                                }) + "</td>", rows += '<td><p class="roomInfoContactListName autotrim">' + boot_1.CW.getName(id) + '</p><p class="roomInfoContactListOrgName autotrim">' + boot_1.CW.getOrgTitle(id) + '</p></td><td class="roleSelect" data-aid="' + id + '">', rows += $.cwSelectBox.create([{
                                    label: role_list.admin.name,
                                    value: "admin",
                                    tooltip: role_list.admin.tooltip
                                }, {
                                    label: role_list.member.name,
                                    value: "member",
                                    tooltip: role_list.member.tooltip
                                }, {
                                    label: role_list.readonly.name,
                                    value: "readonly",
                                    tooltip: role_list.readonly.tooltip
                                }], "", role, {
                                    class: sl_class,
                                    "data-aid": id
                                }), rows += "</td></tr>"
                            }
                        }
                        /\sMSIE\s*([89]|10)\./i.test(navigator.userAgent) ? list_table.html(rows) : list_table.get(0).innerHTML = rows, "contact" === type && self.updateCheckBoxAll(target_element)
                    }
                    $("._selectableContactRow").on("click", function() {
                        var target_element = $(this).parents("._contactTableBox"),
                            target_element_id = "#" + target_element.attr("id"),
                            check_box = $(this).find("._cwCB").cwCheckBox(),
                            role_sl = $(this).find("._cwSL");
                        role_sl.hasClass("isActive") || ("default" !== self.getCommonRole($(target_element_id)) && role_sl.cwSelectBox().select(self.common_role), check_box.toggle())
                    }).on("click", "._cwCB", function() {
                        var check_box = $(this).cwCheckBox();
                        check_box.toggle()
                    }), $(".roleSelect").each(function() {
                        var sl = $(this).find("._cwSL");
                        $(this).find("._cwSLBox, ._cwSLList").on({
                            mouseenter: function() {
                                $(sl).addClass("isActive")
                            },
                            mouseleave: function() {
                                $(sl).removeClass("isActive")
                            }
                        })
                    }).on("cwSelectBox_update", "._cwSL", function() {
                        var sl = $(this),
                            aid = sl.attr("data-aid"),
                            sl_box = sl.cwSelectBox(),
                            role = sl_box.getVal();
                        self.adding_member_list[aid] = role
                    });
                    var cb_roominfo = $("#_roomInfoContact ._cwCB");
                    cb_roominfo.length && cb_roominfo.cwCheckBox({
                        update: function() {
                            self.updateContactCheckBox(this, $("#_roomInfoContact")), self.updateCheckBoxAll($("#_roomInfoMemberBox"))
                        }
                    });
                    var cb_memberaddition = $("#_memberAdditionContact ._cwCB");
                    cb_memberaddition.length && cb_memberaddition.cwCheckBox({
                        update: function() {
                            self.updateContactCheckBox(this, $("#_memberAdditionContact")), self.updateCheckBoxAll($("#_memberAdditionMemberBox"))
                        }
                    }), $("#_roomInfoSelectAllContact").cwCheckBox({
                        update: function(is_checked, value, is_partial) {
                            self.checkAllContact(this, is_partial, $("#_roomInfoContact"))
                        }
                    }), $("#_roominfoSelectAllBtn").cwButton({
                        click: function() {
                            $("#_roomInfoSelectAllContact").cwCheckBox().toggle()
                        }
                    }), $("#_memberAdditionSelectAllContact").cwCheckBox({
                        update: function(is_checked, value, is_partial) {
                            self.checkAllContact(this, is_partial, $("#_memberAdditionContact"))
                        }
                    }), $("#_memberAdditionSelectAllBtn").cwButton({
                        click: function() {
                            $("#_memberAdditionSelectAllContact").cwCheckBox().toggle()
                        }
                    })
                }, self.embedMemberHidden = function() {
                    var hidden = "";
                    hidden += '<input type="hidden" name="__cwform_role[' + boot_1.AC.myid + ']" value="admin" />';
                    for (var aid in self.adding_member_list) aid && (hidden += '<input type="hidden" name="__cwform_role[' + aid + ']" value="' + self.adding_member_list[aid] + '" />');
                    $("#_roomInfoMemberHidden").html(hidden)
                }, self.buildChatInfo = function() {
                    $("#_roomInfoEditRoomId").val(self.room_dat.id), $("#_roomInfoName").val(self.room_dat.name), $("#_roomInfoIcon").val(""), $("#_roomInfoIconSelectedValue").val(""), self.room_dat.icon_preset ? ($("#_roomInfoIconTypePreset").click(), $("#_roomInfoIconPreset").find("[data-pt=" + self.room_dat.icon + "]").click()) : ($("#_roomInfoIconTypeGroup").click(), $("#_roomInfoIconTypeUpload").click(), $("#_roomInfoIconSelected").prop("src", boot_1.RL.rooms[self.room_dat.id].getIcon("src"))), $("#_roomInfoIconSelected").show(), $("#_roomInfoIconFileUpload").hide(), $("#_roomInfoDescription").show().val(boot_1.CS.convertToEdit(self.room_dat.description)).blur(), $("#_roomInfoHeader").val("")
                }, self.prepareRoomDat = function(room_id) {
                    if (self.prepareRoomInfo(), self.checked_flag = {}, self.contact_flag = {}, self.member_flag = {}, self.adding_member_list = {}, self.room_dat = {
                        id: 0,
                        icon: "group",
                        icon_preset: !0,
                        description: "",
                        member_dat: {},
                        public: 0,
                        link_name: "",
                        join_need_accept: 0,
                        public_description: "",
                        header: "",
                        allow_see_member: 1,
                        allow_upload_file: 1,
                        allow_add_task: 1,
                        allow_send_message: 1
                    }, room_id) {
                        var room = boot_1.RL.rooms[room_id];
                        if (!room) return !1;
                        for (var key in self.room_dat) self.room_dat[key] = room[key];
                        self.room_dat.name = room.getName()
                    } else self.room_dat.member_dat[boot_1.AC.myid] = "admin";
                    var member_dat = self.room_dat.member_dat;
                    for (var aid in member_dat) self.member_flag[aid] = member_dat[aid];
                    for (var idx in boot_1.AC.contact_list) {
                        var aid = boot_1.AC.contact_list[idx];
                        void 0 == self.member_flag[aid] && (self.contact_flag[aid] = !0, self.checked_flag[aid] = !1)
                    }
                    self.common_role = "member"
                }, self.prepareRoomIconTooltip = function() {
                    room_icon_tip || (room_icon_tip = $("#_roomIconSelector").cwToolTip({
                        direction: "bottom"
                    }), $("#_roomIconSelectorBtn").click(function() {
                        room_icon_tip.open($(this))
                    }), room_icon_tip.$el.on("click", "._iconType", function() {
                        switch ($(this).val()) {
                            case "preset":
                                $("#_roomInfoIconDefault").show(), $("#_roomInfoIconUpload").hide();
                                break;
                            case "upload":
                                $("#_roomInfoIconUpload").show(), $("#_roomInfoIconDefault").hide()
                        }
                    }), $("#_roomInfoIconPreset").on("click", "li", function() {
                        $("#_roomInfoIconSelected").show(), $("#_roomInfoIconFileUpload").hide(), $("#_roomInfoIconPreset").find("li.roomInfoIconActive").removeClass("roomInfoIconActive");
                        var li = $(this),
                            img = li.find("img");
                        li.addClass("roomInfoIconActive"), $("#_roomInfoIconSelected").prop("src", img.prop("src")), $("#_roomInfoIconSelectedValue").val(img.attr("data-pt")), room_icon_tip.close()
                    }), $("#_roomInfoIcon").on("change", function() {
                        room_icon_tip.close(), $("#_roomInfoIconSelected").hide(), $("#_roomInfoIconFileUpload").show();
                        var upload_fullpath = this.value;
                        $("#_roomInfoIconFileUpload").find("p").text(upload_fullpath.split("\\").pop())
                    }))
                };
                var addroom_dialog = null;
                self.openAddRoomDialog = function() {
                    function getLinkName(callback) {
                        function checkLink(retry, callback) {
                            var link_name = getRand(linkNameLength);
                            return retry-- ? void boot_1.CW.get("gateway.php", {
                                cmd: "check_chat_link_name",
                                link_name: link_name,
                                rid: boot_1.RM.id
                            }, function(json) {
                                json.used ? checkLink(retry, callback) : callback(link_name)
                            }) : void callback(link_name)
                        }

                        function getRand(num) {
                            for (var result = "", base = linkNameString, i = 0; i < num; i++) result += base.charAt(Math.random() * base.length | 0);
                            return result
                        }
                        var maxRetry = 3,
                            linkNameLength = 14,
                            linkNameString = "abcdefghijklmnopqrstuvwxyz0123456789";
                        checkLink(maxRetry, callback)
                    }

                    function changeVisibility(state) {
                        add_room_link_editor.reset(), state ? ($("#_addRoomInvitationLinkActive").show(), $("#_addRoomInvitationLinkDisabled").hide(), $("#_addRoomInvitationLinkSettingStatus").cwCheckBox().check(), $("#_roomInfoPublic").val("1")) : ($("#_addRoomInvitationLinkActive").hide(), $("#_addRoomInvitationLinkDisabled").show(), $("#_addRoomInvitationLinkSettingStatus").cwCheckBox().unCheck(), $("#_roomInfoPublic").val("0")), addroom_dialog.open("resize")
                    }
                    addroom_dialog || (self.prepareRoomIconTooltip(), addroom_dialog = $("#_addRoom").cwDialog({
                        parentFloatBox: room_icon_tip.$el,
                        title: L.chatroom_create_title,
                        width: 750,
                        buttonLabels: [L.button_create, L.button_cancel],
                        open: function(resize_flag) {
                            resize_flag || (self.buildChatInfo(), $("#_roomInfoContactFilter").cwSearchBox().$el.val(""), $("[name=__roominfo_org_filter]").eq(0).prop("checked", !0), self.buildMember(["contact"], $("#_roomInfoMemberBox")), $("#_addRoomChatInfoArea").append($("#_roomInfoChatInfoBox").show()), $("#_addRoomMemberArea").append($("#_roomInfoMemberBox").show()), $("#_roomInfoSelectAllContact").cwCheckBox().unCheck(), $("#_roomInfoSelectRole").html($.cwSelectBox.create([{
                                label: L.common_role_select_list_default,
                                value: "default"
                            }, {
                                label: L.admin,
                                value: "admin",
                                tooltip: L.chatroom_member_role_admin_desc
                            }, {
                                label: L.member,
                                value: "member",
                                tooltip: L.chatroom_member_role_member_desc
                            }, {
                                label: L.readonly,
                                value: "readonly",
                                tooltip: L.chatroom_member_role_readonly_desc
                            }], "", "default", {
                                class: "_showDescription",
                                "aria-label": L.common_role_select_list_default_tooltip
                            })), boot_1.CW.is_business || $("#_roomInfoOrganizationFilter").hide(), $("#_addRoomInvitationLinkEditor").hide(), $("#_addRoomInvitationLinkSettingStatus").cwCheckBox().check(), $("#_addRoomInvitationLinkJoinNeedAccept").cwCheckBox().check(), getLinkName(function(link_name) {
                                var link_code_controller = $("#_addRoomInvitationLinkActive"),
                                    btn_copy_link_code = link_code_controller.find(".js_invitationLinkBtnCopy"),
                                    display_input = link_code_controller.find(".js_invitationLinkDisplayInput"),
                                    editor_input = link_code_controller.find(".js_invitationLinkEditorInput"),
                                    chatwork_path = link_code_controller.find(".js_invitationLinkURL"),
                                    chatwork_path_code = CHATWORK_MYPAGE_PATH + "/g/",
                                    link_code = chatwork_path_code + link_name;
                                display_input.val(link_code), editor_input.val(link_name), chatwork_path.text(chatwork_path_code), btn_copy_link_code.attr("data-clipboard-text", link_code).text(L.invitation_link_code_copy);
                                var clip = new Clipboard(".js_invitationLinkBtnCopy");
                                clip.on("success", function() {
                                    btn_copy_link_code.text(L.text_copied)
                                })
                            }))
                        },
                        postOpen: function() {
                            $("#_addRoom").scrollTop(0), $("#_roomInfoName").focus()
                        },
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            switch (idx) {
                                case 0:
                                    var room_name = $("#_roomInfoName").val();
                                    if (!room_name) {
                                        for (var aid in self.member_flag)
                                            if (room_name && (room_name += ","), room_name += boot_1.AC.getName(aid), room_name.length > 100) {
                                                room_name += "...";
                                                break
                                            }
                                        $("#_roomInfoName").val(room_name)
                                    }
                                    for (var aid in self.adding_member_list) self.member_flag[aid] = self.adding_member_list[aid];
                                    var params = {};
                                    params.member_dat = self.member_flag;
                                    var error = self.validateRoomInfo(params);
                                    if (self.member_flag[boot_1.AC.myid] || error.push(L.chatroom_error_noself), error.length) return boot_1.CW.alert(error.join("\n")), !1;
                                    self.embedMemberHidden();
                                    var form_2 = $("#_roomInfoForm"),
                                        xhr = new XMLHttpRequest;
                                    xhr.open("POST", form_2.attr("action"), !0), xhr.onreadystatechange = function() {
                                        if (4 === xhr.readyState || 0 === xhr.status) {
                                            var iframe = $('[name="' + form_2.attr("target") + '"]');
                                            iframe.contents().find("body").html(xhr.responseText), iframe.trigger("load")
                                        }
                                    }, xhr.send(new FormData(form_2.get(0))), boot_1.CW.showProgress(L.adding), addroom_dialog.close()
                            }
                        }
                    }));
                    var add_room_link_editor = self.linkCodeEditor($("#_addRoomInvitationLinkActive"));
                    if (add_room_link_editor.reset(), self.prepareRoomDat(), boot_1.CW.group_limit_num) {
                        var room_num = 0;
                        for (var room_id in boot_1.RL.rooms) "group" === boot_1.RL.rooms[room_id].type && room_num++;
                        if (room_num >= boot_1.CW.group_limit_num) {
                            var title = L.chatroom_error_cant_add,
                                message = L.chatroom_error_planlimit;
                            return message = message.replace(/%%plan_name%%/, PLAN_NAME), message = message.replace(/%%limit_num%%/, boot_1.CW.group_limit_num), void boot_1.CW.view.showLimitErrorDialog(title, message)
                        }
                    }
                    $("#_addRoomInvitationLinkSettingStatus").cwCheckBox({
                        update: function() {
                            var state = !! this.isChecked();
                            changeVisibility(state)
                        }
                    }), $("#_addRoomInvitationLinkActive").on("click", ".js_invitationLinkOpenEditor", function() {
                        add_room_link_editor.open(), addroom_dialog.open("resize")
                    }).on("click", ".js_invitationLinkCloseEditor", function() {
                        add_room_link_editor.cancel(), addroom_dialog.open("resize")
                    }).on("click", ".js_invitationLinkBtnEdited", function() {
                        self.is_valid_link_name && (add_room_link_editor.edit(), addroom_dialog.open("resize"))
                    }).on("keyup blur", ".js_invitationLinkEditorInput", function() {
                        var input = $(this);
                        self.link_code_checker.validate(input, $("#_addRoomInvitationLinkActive"))
                    }), addroom_dialog.open()
                };
                var descedit_dialog = null;
                self.editRoomDescription = function(room_id) {
                    self.prepareRoomDat(room_id), descedit_dialog || (descedit_dialog = $("#_roomDescEditDialog").cwDialog({
                        title: L.chatroom_edit_desc_title,
                        width: 500,
                        height: "auto",
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(index) {
                            var dialog = this;
                            switch (index) {
                                case 0:
                                    var params = {};
                                    params.desc = $("#_roomDescEditContent").val();
                                    var error = self.validateRoomInfo(params);
                                    if (error.length > 0) return boot_1.CW.alert(error.join("\n")), !1;
                                    boot_1.CW.post("gateway.php", {
                                        cmd: "update_room",
                                        room_id: dialog.data.room_id,
                                        description: params.desc
                                    }, function() {
                                        boot_1.RL.rooms[dialog.data.room_id].description = params.desc, boot_1.CW.watch()
                                    }), dialog.close()
                            }
                        },
                        open: function(room_id) {
                            this.data.room_id = room_id, $("#_roomDescEditContent").val(boot_1.CS.convertToEdit(boot_1.RL.rooms[this.data.room_id].description)).focus()
                        },
                        postOpen: function() {
                            $("#_roomDescEditContent").focus()
                        }
                    })), descedit_dialog.open(room_id)
                };
                var infoedit_dialog = null;
                self.editRoomInfo = function(room_id) {
                    infoedit_dialog || (self.prepareRoomIconTooltip(), infoedit_dialog = $("#_roomInfoEditDialog").cwDialog({
                        parentFloatBox: room_icon_tip.$el,
                        title: L.chatroom_info_edit,
                        width: 750,
                        height: "auto",
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    var params = {};
                                    params.name = $("#_roomInfoName").val().trim(), params.desc = $("#_roomInfoDescription").val(), $("#_roomInfoIconTypePreset")[0].checked ? (params.icon_type = "preset", params.preset = $("#_roomInfoIconSelectedValue").val()) : (params.icon_type = "upload", params.icon = $("#_roomInfoIcon").val());
                                    var error = self.validateRoomInfo(params);
                                    if (error.length > 0) return boot_1.CW.alert(error.join("\n")), !1;
                                    $("#_roomInfoIcon").val() && boot_1.CW.showProgress(L.saving);
                                    var form_3 = $("#_roomInfoEditForm"),
                                        xhr = new XMLHttpRequest;
                                    xhr.open("POST", form_3.attr("action"), !0), xhr.onreadystatechange = function() {
                                        if (4 === xhr.readyState || 0 === xhr.status) {
                                            var iframe = $('[name="' + form_3.attr("target") + '"]');
                                            iframe.contents().find("body").html(xhr.responseText), iframe.trigger("load")
                                        }
                                    }, xhr.send(new FormData(form_3.get(0))), this.close()
                            }
                        },
                        open: function(room_id) {
                            this.data.room_id = room_id, self.prepareRoomDat(this.data.room_id), self.buildChatInfo(), $("#_roomInfoEditContent").append($("#_roomInfoChatInfoBox").show())
                        },
                        postOpen: function() {
                            $("#_roomInfoName").focus()
                        }
                    })), infoedit_dialog.open(room_id)
                };
                var member_dialog = null;
                self.editRoomMember = function(room_id) {
                    member_dialog || (member_dialog = $("#_roomMemberEditDialog").cwDialog({
                        title: L.member_edit_dialog_title,
                        width: 750,
                        height: "auto",
                        buttonLabels: [L.button_save, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    var params = {};
                                    params.member_dat = self.member_flag;
                                    var error = self.validateRoomInfo(params);
                                    if (error.length > 0) return boot_1.CW.alert(error.join("\n")), !1;
                                    var room_id = this.data.room_id;
                                    boot_1.CW.post("gateway.php", {
                                        cmd: "update_room",
                                        room_id: room_id,
                                        role: self.member_flag
                                    }, function(res) {
                                        return res.message ? void boot_1.CW.alert(res.message) : (boot_1.RL.rooms[room_id].member_dat = self.member_flag, void boot_1.CW.watch())
                                    }), this.close()
                            }
                        },
                        open: function(room_id) {
                            this.data.room_id = room_id, $("#_roomMemberEditDialog").append($("#_memberEditMemberBox").show()), $("#_memberEditMemberTableBox").scrollTop(0), $("#_memberEditMemberFilter").cwSearchBox().$el.val(""), self.prepareRoomDat(room_id), self.buildMember(["member"], $("#_memberEditMemberBox"))
                        }
                    })), member_dialog.open(room_id)
                };
                var memberaddition_dialog = null;
                self.addRoomMember = function(room_id) {
                    function changeVisibility(state) {
                        member_addition_link_editor.reset(), state ? ($("#_memberAdditionInvitationLinkActive").show(), $("#_memberAdditionInvitationLinkDisabled").hide(), $("#_memberAdditionInvitationLinkSettingStatus").cwCheckBox().check(), $("#_memberAdditionPublic").val("1")) : ($("#_memberAdditionInvitationLinkActive").hide(), $("#_memberAdditionInvitationLinkDisabled").show(), $("#_memberAdditionInvitationLinkSettingStatus").cwCheckBox().unCheck(), $("#_memberAdditionPublic").val("0")), memberaddition_dialog.open()
                    }
                    memberaddition_dialog || (memberaddition_dialog = $("#_roomMemberAdditionDialog").cwDialog({
                        title: L.member_addition_dialog_title,
                        width: 750,
                        height: "auto",
                        buttonLabels: [L.button_save, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(index) {
                            var room_id = this.data.room_id;
                            switch (index) {
                                case 0:
                                    var params = {}, error_list = [];
                                    for (var aid in self.adding_member_list) self.member_flag[aid] = self.adding_member_list[aid];
                                    var room_dat = boot_1.RL.rooms[room_id];
                                    if (Object.keys(room_dat.member_dat).forEach(function(aid) {
                                        aid in self.member_flag || (self.member_flag[aid] = room_dat.member_dat[aid])
                                    }), params.member_dat = self.member_flag, error_list = self.validateRoomInfo(params), self.is_valid_link_name || error_list.push(L.invitation_link_setting_error_invalid_link_name), error_list.length > 0) return boot_1.CW.alert(error_list.join("\n")), !1;
                                    var public_setting = $("#_memberAdditionPublic").val(),
                                        link_code = $("#_memberAdditionInvitationLinkActive").find(".js_invitationLinkEditorInput").val(),
                                        join_need_accept = $("#_memberAdditionInvitationLinkJoinNeedAccept").cwCheckBox().isChecked() ? 1 : 0;
                                    boot_1.CW.showProgress(L.saving), boot_1.CW.post("gateway.php", {
                                        cmd: "update_room",
                                        room_id: room_id,
                                        public: public_setting,
                                        link_code: link_code,
                                        join_need_accept: join_need_accept,
                                        role: self.member_flag,
                                        update_room_version: "2"
                                    }, function(res) {
                                        return res.message ? void boot_1.CW.alert(res.message) : (boot_1.RL.rooms[room_id].member_dat = self.member_flag, void boot_1.CW.watch())
                                    }), boot_1.CW.hideProgress(), this.close()
                            }
                        },
                        open: function(room_id) {
                            if (room_id) {
                                this.data.room_id = room_id;
                                var room_dat = boot_1.RL.rooms[room_id];
                                self.is_valid_link_name = !0, $("#_roomMemberAdditionDialog").append($("#_memberAdditionMemberBox").show()), $("#_memberAdditionContactFilter").cwSearchBox().$el.val(""), $("#_memberAdditionContactTableBox").scrollTop(0), $("#_memberAdditionSelectAllContact").cwCheckBox().unCheck(), $("[name=__memberAddition_org_filter]").eq(0).prop("checked", !0), $("#_memberAdditionSelectRole").html($.cwSelectBox.create([{
                                    label: L.common_role_select_list_default,
                                    value: "default"
                                }, {
                                    label: L.admin,
                                    value: "admin",
                                    tooltip: L.chatroom_member_role_admin_desc
                                }, {
                                    label: L.member,
                                    value: "member",
                                    tooltip: L.chatroom_member_role_member_desc
                                }, {
                                    label: L.readonly,
                                    value: "readonly",
                                    tooltip: L.chatroom_member_role_readonly_desc
                                }], "", "default", {
                                    class: "_showDescription",
                                    "aria-label": L.common_role_select_list_default_tooltip
                                })), boot_1.CW.is_business || $("#_memberAdditionOrganizationFilter").hide(), self.prepareRoomDat(room_id);
                                var link_name, link_code_controller = $("#_memberAdditionInvitationLinkActive"),
                                    btn_copy_link_url = link_code_controller.find(".js_invitationLinkBtnCopy"),
                                    chatwork_path = link_code_controller.find(".js_invitationLinkURL"),
                                    display_input = link_code_controller.find(".js_invitationLinkDisplayInput"),
                                    editor_input = link_code_controller.find(".js_invitationLinkEditorInput"),
                                    chatwork_path_code = CHATWORK_MYPAGE_PATH + "/g/";
                                link_name = room_dat.link_name ? room_dat.link_name : room_dat.id;
                                var link_code = chatwork_path_code + link_name;
                                chatwork_path.text(chatwork_path_code), display_input.val(link_code), editor_input.val(link_name), btn_copy_link_url.attr("data-clipboard-text", link_code).text(L.invitation_link_code_copy);
                                var clip = new Clipboard(".js_invitationLinkBtnCopy");
                                clip.on("success", function() {
                                    btn_copy_link_url.text(L.text_copied)
                                }), changeVisibility(room_dat.public), room_dat.join_need_accept ? $("#_memberAdditionInvitationLinkJoinNeedAccept").cwCheckBox().check() : $("#_memberAdditionInvitationLinkJoinNeedAccept").cwCheckBox().unCheck(), self.room_dat.public ? ($("#_memberAdditionInvitationLinkSettingStatus").cwCheckBox().check(), $("#_memberAdditionInvitationLinkActive").show()) : ($("#_memberAdditionInvitationLinkSettingStatus").cwCheckBox().unCheck(), $("#_memberAdditionInvitationLinkActive").hide()), self.buildMember(["contact"], $("#_memberAdditionMemberBox"))
                            }
                        }
                    }));
                    var member_addition_link_editor = self.linkCodeEditor($("#_memberAdditionInvitationLinkActive"));
                    member_addition_link_editor.reset(), $("#_memberAdditionInvitationLinkSettingStatus").cwCheckBox({
                        update: function() {
                            var state = !! this.isChecked();
                            changeVisibility(state)
                        }
                    }), $("#_memberAdditionInvitationLinkActive").on("click", ".js_invitationLinkOpenEditor", function() {
                        member_addition_link_editor.open(), memberaddition_dialog.open()
                    }).on("click", ".js_invitationLinkCloseEditor", function() {
                        member_addition_link_editor.cancel(), memberaddition_dialog.open()
                    }).on("click", ".js_invitationLinkBtnEdited", function() {
                        self.is_valid_link_name && (member_addition_link_editor.edit(), memberaddition_dialog.open())
                    }).on("keyup blur", ".js_invitationLinkEditorInput", function() {
                        var input = $(this);
                        self.link_code_checker.validate(input, $("#_memberAdditionInvitationLinkActive"))
                    }), memberaddition_dialog.open(room_id)
                }, self.validateRoomInfo = function(params) {
                    var error = [];
                    if (void 0 != params.name && "" == params.name && error.push(L.chatroom_error_no_name), void 0 != params.member_dat) {
                        var has_admin = !1;
                        for (var aid in self.member_flag)
                            if ("admin" == self.member_flag[aid]) {
                                has_admin = !0;
                                break
                            }
                        has_admin || error.push(L.chatroom_error_noadmin)
                    }
                    return error
                }
            }
            var Clipboard = require("clipboard"),
                Room_1 = require("../../core/model/Room"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.RoomDialogView = RoomDialogView
        }, {
            "../../core/lib/common": 50,
            "../../core/model/Room": 57,
            "../controller/boot": 66,
            clipboard: 11
        }
    ],
    138: [
        function(require, module, exports) {
            "use strict";

            function RoomListView(model) {
                var self = this;
                self.model = model, self.last_sumnum_key = "", self.is_folded = !1, self.room_show_limit = 80;
                var unread_status = null,
                    mention_status = null,
                    mytask_status = null;
                self.prepare = function() {
                    var side_content_init_width = Cookies.get("ui_chatlist_width");
                    void 0 !== side_content_init_width && self.resizeWidth(side_content_init_width);
                    var left_pane_width = 0;
                    $.cwResize.setHandle($("#_subContentHandle"), {
                        type: "col",
                        start: function() {
                            left_pane_width = $C("#_sideContent").width()
                        },
                        move: function(move_x) {
                            self.resizeWidth(left_pane_width + move_x)
                        }
                    }), $C("#_roomTitle").on("click", "._roomTitleText", function() {
                        self.scrollToRoom(boot_1.RM.id, 600)
                    }), $C("#_wrapper").on("click", "._pin", function() {
                        var match = this.className.match(/_pinRid([0-9]+)/);
                        if (!match) return !1;
                        var stick_on, room_id = match[1],
                            pin_obj = $(this);
                        return pin_obj.hasClass("ico19PinOff") ? (pin_obj.removeClass("ico19PinOff"), pin_obj.addClass("ico19PinOn"), stick_on = 1) : (pin_obj.addClass("ico19PinOff"), pin_obj.removeClass("ico19PinOn"), stick_on = 0), self.model.rooms[room_id].sticky = stick_on, boot_1.CW.post("gateway.php", {
                            cmd: "stick_room",
                            room_id: room_id,
                            stick: stick_on
                        }, function() {
                            var isRoomListPin = Boolean(pin_obj.parents("._roomLink").length);
                            isRoomListPin ? boot_1.AL.trackEvent("room_list", "click", {
                                label: "room_list_pin"
                            }) : boot_1.AL.trackEvent("timeline", "click", {
                                label: "timeline_pin"
                            })
                        }), self.model.build(), boot_1.RM.build(), !1
                    }).on("mouseover", "._pin", function() {
                        var pin_obj = $(this);
                        pin_obj.hasClass("ico19PinOn") || pin_obj.addClass("ico19PinHover")
                    }).on("mouseout", "._pin", function() {
                        var pin_obj = $(this);
                        pin_obj.removeClass("ico19PinHover")
                    }), $("#_addButton").cwDropDown({
                        showPosition: "left",
                        list: [{
                            value: "addchat",
                            label: L.chatroom_create_title
                        }, {
                            value: "addcontact",
                            label: L.contact_add
                        }],
                        select: function(value) {
                            switch (value) {
                                case "addchat":
                                    boot_1.RD.view.openAddRoomDialog();
                                    break;
                                case "addcontact":
                                    boot_1.AC.view.reachedContactLimit() ? boot_1.CW.view.showContactLimitErrorDialog() : (boot_1.AC.view.tab_type = "invitemail", boot_1.AC.view.openContactWindow())
                            }
                        }
                    }), $("#_sideContentTitleText").click(function() {
                        boot_1.RL.selectCategory("all"), filter_tabbar.deselectAll(), boot_1.RL.build()
                    }), $("#_sideChatMoveMyChat").click(function() {
                        boot_1.RL.selectRoom(boot_1.AC.getRoomId(boot_1.AC.myid)), boot_1.AL.trackEvent("room_list", "click", {
                            label: "my_chat"
                        })
                    }).cwMessageTip({
                        message: L.menu_mychat_hint,
                        delay: boot_1.TM.messagetip_delay
                    });
                    var filter_tabbar = $("#_chatFilterList").cwTabbedBar({
                        toggleMode: !0,
                        update: function(idx, is_select) {
                            if (is_select) switch (idx) {
                                case 0:
                                    Cookies.set("ui_roomfilter", "0", {
                                        expires: 3650
                                    }), boot_1.RL.setReadOnly(!0), boot_1.RL.setToOnly(!1), boot_1.RL.setTaskOnly(!1), boot_1.AL.trackEvent("room_list", "click", {
                                        label: "unread_filter"
                                    });
                                    break;
                                case 1:
                                    Cookies.set("ui_roomfilter", "1", {
                                        expires: 3650
                                    }), boot_1.RL.setReadOnly(!1), boot_1.RL.setToOnly(!0), boot_1.RL.setTaskOnly(!1), boot_1.AL.trackEvent("room_list", "click", {
                                        label: "to_filter"
                                    });
                                    break;
                                case 2:
                                    Cookies.set("ui_roomfilter", "2", {
                                        expires: 3650
                                    }), boot_1.RL.setReadOnly(!1), boot_1.RL.setToOnly(!1), boot_1.RL.setTaskOnly(!0), $C("#_chatTabTask").click(), boot_1.AL.trackEvent("room_list", "click", {
                                        label: "task_filter"
                                    })
                            } else Cookies.remove("ui_roomfilter"), boot_1.RL.setReadOnly(!1), boot_1.RL.setToOnly(!1), boot_1.RL.setTaskOnly(!1);
                            boot_1.RL.build()
                        }
                    });
                    filter_tabbar.$el.show(),
                    unread_status = $("#_chatUnreadStatus"), mention_status = $("#_chatToUnreadStatus"), mytask_status = $("#_chatTaskStatus"), $C("#_wrapper").on("click", "._roomLink", function() {
                        var beforeRoomId = boot_1.RM.id,
                            timeBeforeChangeRoom = Date.now(),
                            roomLink = $(this),
                            room_id = 0,
                            message_id = 0;
                        if ("a" == this.tagName.toLowerCase()) {
                            var match = roomLink.prop("href").match(/#(?:!|%21)rid(\d+)(?:-(\d+))?$/);
                            match && (room_id = match[1], match[2] && (message_id = match[2]))
                        }
                        if (!room_id) {
                            var rid = roomLink.attr("data-rid");
                            rid && (room_id = rid);
                            var mid = roomLink.attr("data-mid");
                            mid && (message_id = mid)
                        }
                        boot_1.RL.selectRoom(room_id, message_id), boot_1.AL.trackEvent("room_list", "click", {
                            label: "change_room",
                            time: Date.now() - timeBeforeChangeRoom,
                            before_room_id: beforeRoomId,
                            after_room_id: room_id
                        })
                    }), $C("#_wrapper").on("click", "a._groupchatLink", function() {
                        var link_code = $(this).attr("data-linkcode");
                        link_code && boot_1.RD.view.joinGroupchat(link_code)
                    }), $C("#_roomListItems").on("mouseover", "._room", function() {
                        $(this).children(".chatListUnread").addClass("chatListUnreadHover")
                    }).on("mouseout", "._room", function() {
                        $(this).children(".chatListUnread").removeClass("chatListUnreadHover")
                    }).on("click", "#_roomMore", function() {
                        self.room_show_limit += 80, self.model.build()
                    }), self.prepareCategory(), "1" === Cookies.get("ui_fold_roomlist") && self.toggleFold(), void 0 != Cookies.get("ui_roomfilter") && filter_tabbar.select(Cookies.get("ui_roomfilter")), boot_1.CW.view.onPostLoad(function() {
                        void 0 != Cookies.get("ui_category") && self.model.selectCategory(Cookies.get("ui_category"))
                    }),
                    function() {
                        var get_focused_room_id = function() {
                            var focused_room_id = parseInt(boot_1.RL.getFocusedRoomId(), 10);
                            return focused_room_id && $.inArray(focused_room_id.toString(), boot_1.RL.filtered_room_list) == -1 && (focused_room_id = 0), focused_room_id
                        }, move_up = function(focused_room_id) {
                                if (0 == focused_room_id) self.model.focusRoom(self.model.filtered_room_list[0]);
                                else {
                                    var idx = $.inArray(focused_room_id.toString(), self.model.filtered_room_list);
                                    idx > 0 ? self.model.focusRoom(self.model.filtered_room_list[idx - 1]) : self.model.focusRoom(self.model.filtered_room_list[0])
                                }
                            }, move_down = function(focused_room_id) {
                                if (0 == focused_room_id) self.model.focusRoom(self.model.filtered_room_list[0]);
                                else {
                                    var cnt = self.model.filtered_room_list.length,
                                        idx = $.inArray(focused_room_id.toString(), self.model.filtered_room_list);
                                    idx + 1 == cnt ? self.model.focusRoom(self.model.filtered_room_list[idx]) : self.model.focusRoom(self.model.filtered_room_list[idx + 1])
                                }
                            };
                        boot_1.CW.view.registerKeyboardShortcut(75, !1, !1, !1, !1, function() {
                            move_up(get_focused_room_id())
                        }).registerKeyboardShortcut(38, !1, !1, !1, !1, function() {
                            move_up(get_focused_room_id())
                        }).registerKeyboardShortcut(40, !1, !1, !1, !1, function() {
                            move_down(get_focused_room_id())
                        }).registerKeyboardShortcut(74, !1, !1, !1, !1, function() {
                            move_down(get_focused_room_id())
                        }).registerKeyboardShortcut(79, !1, !1, !1, !1, function() {
                            self.model.selectRoom(get_focused_room_id())
                        }).registerKeyboardShortcut(13, !1, !1, !1, !1, function() {
                            self.model.selectRoom(get_focused_room_id())
                        })
                    }(), $("#_roomRequestArea").click(function() {
                        boot_1.RM.view.showRequestDialog()
                    })
                }, self.prepareCategory = function() {
                    var newcat_filter_word = [],
                        newcat_selected_room_dat = {}, newcat_current_room_list = [],
                        newcat_room_table = $("#_newcatRoomlist"),
                        category_tooltip = $("#_chatCategoryList").cwToolTip({
                            fixHeight: !0
                        });
                    $("#_chatCategory").click(function() {
                        category_tooltip.open($(this))
                    }).cwMessageTip({
                        message: L.chat_category_select,
                        delay: boot_1.TM.messagetip_delay
                    }), $("#_chatCategoryList").on("click", "li._chatCategoryItem", function() {
                        var cat_id = $(this).attr("data-cat-id");
                        self.model.selectCategory(cat_id), boot_1.AL.trackEvent("room_list", "click", {
                            label: "category_item"
                        }), category_tooltip.close()
                    }).on("mouseover", ".chatCategoryList li", function() {
                        var item = $(this);
                        item.find("._categoryAction").show()
                    }).on("mouseout", ".chatCategoryList li", function() {
                        var item = $(this);
                        item.find("._categoryAction").hide()
                    }), $("#_categoryDisplayCancel").click(function() {
                        self.model.selectCategory("all")
                    });
                    var chat_searchbox = $("#_newcatRoomfilter").cwSearchBox({
                        placeholder: L.chat_search,
                        update: function() {
                            var room_list = boot_1.RL.getSortedRoomList("name"),
                                html = "",
                                max_display_chat_num = TASK_MAX_RESULTS;
                            newcat_filter_word = this.getVal().toLowerCase(), newcat_current_room_list = [];
                            for (var i = 0, len = room_list.length; i < len; i++) {
                                var room = boot_1.RL.rooms[room_list[i]],
                                    name = room.getName();
                                if (!newcat_filter_word || name.toLowerCase().indexOf(newcat_filter_word) !== -1) {
                                    if (newcat_current_room_list.push(room.id), newcat_current_room_list.length >= max_display_chat_num) break;
                                    var selected_flg = Boolean(newcat_selected_room_dat[room.id]),
                                        checkbox_html = $.cwCheckBox.create(selected_flg, "", room.id, {
                                            id: "_newcatCheck" + room.id,
                                            class: "_newcatCheck"
                                        });
                                    html += '<tr class="_newcatRoom _cwSelectableRow"><td class="check">' + checkbox_html + '</td><td class="_newcatRoom_name"><span class="ui_room_icon">' + room.getIcon() + "</span></td><td>" + boot_1.CW.getRoomName(room.id) + "</td></tr>"
                                }
                            }
                            newcat_room_table.html(html)
                        }
                    }),
                        chatcategoryedit_window = $("#_chatCategoryAddContent").cwDialog({
                            width: 650,
                            open: function(cat_id) {
                                if (this.data.cat_id = cat_id, cat_id) {
                                    for (var category_dat = self.model.category_dat[cat_id], cat_name = category_dat.name, roomlist = category_dat.list, i = 0, len = roomlist.length; i < len; i++) {
                                        var rid = roomlist[i];
                                        newcat_selected_room_dat[rid] = !0
                                    }
                                    this.setOption({
                                        title: L.chat_category_edit + ": " + common_1.escape_html(cat_name),
                                        buttonLabels: [L.button_save_long, L.button_cancel]
                                    })
                                } else this.setOption({
                                    title: L.chat_category_create,
                                    buttonLabels: [L.button_create_long, L.button_cancel]
                                });
                                $("#_categoryName").val(""), $("#_newcatSelectNum").empty(), chat_searchbox.setVal("")
                            },
                            close: function() {
                                newcat_filter_word = [], newcat_selected_room_dat = {}, newcat_current_room_list = []
                            },
                            buttonLabels: [L.button_create_long, L.button_cancel],
                            buttonSubmit: 0,
                            buttonCancel: 1,
                            buttonClick: function(idx) {
                                if (0 === idx) {
                                    var error = [],
                                        cat_name = $("#_categoryName").val();
                                    cat_name || error.push(L.chat_category_error_no_name);
                                    var room_list = [];
                                    for (var room_id in newcat_selected_room_dat) newcat_selected_room_dat[room_id] && room_list.push(room_id);
                                    if (room_list.length || error.push(L.chat_category_error_no_chats), error.length) return void boot_1.CW.alert(error.join("\n"));
                                    var params = {
                                        name: cat_name,
                                        r: room_list
                                    };
                                    this.data.cat_id ? (params.cmd = "edit_category", params.cat_id = this.data.cat_id) : params.cmd = "add_category";
                                    var dialog = this;
                                    boot_1.CW.postSync("gateway.php", params, function(json) {
                                        var cat_id;
                                        for (cat_id in json.cat_dat) self.model.category_dat[cat_id] = json.cat_dat[cat_id];
                                        self.model.buildCategory(), self.model.selectCategory(cat_id), dialog.close()
                                    })
                                }
                            }
                        });
                    $("#_chatCategoryAdd").click(function() {
                        chatcategoryedit_window.open(), category_tooltip.close()
                    });
                    var set_check = function(room_id, check) {
                        var room_id_list;
                        room_id_list = $.isArray(room_id) ? room_id : [room_id];
                        for (var i = 0, len = room_id_list.length; i < len; i++) {
                            var rid = room_id_list[i],
                                checkbox = $("#_newcatCheck" + rid);
                            if (checkbox.length) {
                                var cw_checkbox = checkbox.cwCheckBox();
                                check ? cw_checkbox.check() : cw_checkbox.unCheck()
                            }
                            newcat_selected_room_dat[rid] = Boolean(check)
                        }
                        var length = 0;
                        for (var i in newcat_selected_room_dat) newcat_selected_room_dat[i] && length++;
                        length ? $("#_newcatSelectNum").html(length + L.multiselect_label) : $("#_newcatSelectNum").empty()
                    };
                    $("#_newcatRoomlist").on("cwCheckBox_update", function(event, is_check, room_id) {
                        return set_check(room_id, is_check), !1
                    }), $("#_newcatCheckAll").cwCheckBox({
                        update: function() {
                            set_check(newcat_current_room_list, this.isChecked())
                        }
                    }), $("#_chatCategoryList").on("click", "._categoryEdit", function() {
                        var cat_id = $(this).closest("li._chatCategoryItem").attr("data-cat-id"),
                            cat_name = self.model.category_dat[cat_id].name;
                        chatcategoryedit_window.open(cat_id), $("#_categoryName").val(cat_name);
                        var room_id_list = self.model.category_dat[cat_id].list;
                        set_check(room_id_list, !0)
                    }).on("click", "._categoryDelete", function() {
                        var cat_item = $(this).parents("li._chatCategoryItem"),
                            cat_id = cat_item.data("cat-id"),
                            title = cat_item.find("._categoryName").text();
                        boot_1.CW.view.confirmDelete(L.chat_category_confirm_delete.replace(/%%category_name%%/, title), function() {
                            boot_1.CW.postSync("gateway.php", {
                                cmd: "delete_category",
                                cat_id: cat_id
                            }, function() {
                                void 0 != self.model.category_dat[cat_id] && delete self.model.category_dat[cat_id], self.model.buildCategory()
                            })
                        })
                    })
                }, self.isFolded = function() {
                    return self.is_folded
                };
                var is_expanding = !1;
                self.toggleFold = function() {
                    if (!is_expanding) {
                        boot_1.AL.trackEvent("message_input", "click", {
                            label: "toggle_fold_room_list"
                        });
                        var mainContent = $("#_mainContent"),
                            current = mainContent.css("left"),
                            expand_left = $("#_mainContentExpandLeft");
                        if (mainContent.addClass("foldAnimLeft"), is_expanding = !0, "0px" == current) {
                            self.is_folded = !1, mainContent.removeClass("mainContent--foldLeft"), mainContent.css("left", $("#_sideContent").outerWidth() + "px");
                            var arrow_1 = expand_left.find(".icoFontTriangleRight").addClass("rotate180");
                            setTimeout(function() {
                                Cookies.remove("ui_fold_roomlist"), arrow_1.removeClass("rotate180 icoFontTriangleRight").addClass("icoFontTriangleLeft"), expand_left.addClass("_showDescription"), mainContent.removeClass("foldAnimLeft"), boot_1.CW.view.resizeLayout()
                            }, 300)
                        } else {
                            self.is_folded = !0, mainContent.addClass("mainContent--foldLeft"), mainContent.css("left", "0px");
                            var arrow_2 = expand_left.find(".icoFontTriangleLeft").addClass("rotate180");
                            setTimeout(function() {
                                Cookies.set("ui_fold_roomlist", "1", {
                                    expires: 3650
                                }), arrow_2.removeClass("rotate180 icoFontTriangleLeft").addClass("icoFontTriangleRight"), expand_left.removeClass("_showDescription"), mainContent.removeClass("foldAnimLeft"), boot_1.CW.view.resizeLayout()
                            }, 300)
                        }
                        setTimeout(function() {
                            is_expanding = !1
                        }, 200)
                    }
                }, self.resizeWidth = function(width) {
                    width < boot_1.TM.chatlist_min_width && (width = boot_1.TM.chatlist_min_width), width > boot_1.TM.chatlist_max_width && (width = boot_1.TM.chatlist_max_width);
                    var current_width = $C("#_sideContent").width(),
                        timeline_width = $C("#_timeLine").width();
                    return !(timeline_width < boot_1.TM.timeline_min_width && current_width < width) && ($C("#_mainContent").css("left", width + "px"), $C("#_sideContent").width(width), Cookies.set("ui_chatlist_width", width, {
                        expires: 3650
                    }), boot_1.CW.view.resizeLayout(), self)
                }, self.deleteRoom = function() {
                    boot_1.RM || boot_1.CS.initChatText()
                }, self.scrollToRoom = function(room_id, time) {
                    var menubox = $C("#_roomListArea"),
                        room_menu = menubox.find("[data-rid=" + room_id + "]");
                    if (room_menu.length > 0) {
                        var top_head = parseInt(menubox.offset().top, 10),
                            top_bottom = top_head + menubox.height(),
                            top_room = parseInt(room_menu.offset().top, 10),
                            bottom_room = top_room + room_menu.height();
                        (top_room < top_head || bottom_room > top_bottom) && menubox.scrollTo(room_menu, time)
                    }
                }, self.focusRoom = function(room_id) {
                    self.clearFocusRoom(), boot_1.RM.id != room_id && ($C("#_roomListItems").find("[data-rid=" + room_id + "]").addClass("menuListTitleFocus"), self.scrollToRoom(room_id, 100))
                }, self.clearFocusRoom = function() {
                    $C("#_roomListItems").find(".menuListTitleFocus").removeClass("menuListTitleFocus")
                }, self.selectRoom = function(room_id) {
                    if (boot_1.CW.view.closeFirstPage(), $.cwFloatWindow.close(), !boot_1.RM || boot_1.RM.id != room_id) {
                        var ritems = $C("#_roomListItems");
                        ritems.find("._roomSelected").removeClass("_roomSelected menuListTitleSelected"), ritems.find("[data-rid=" + room_id + "]").addClass("_roomSelected menuListTitleSelected"), $C("#_subContentArea").scrollTop(0), self.scrollToRoom(room_id, 600), self.updateTitle(room_id)
                    }
                }, self.selectCategory = function() {
                    self.model.build();
                    var category_display = $("#_categoryDisplay");
                    if ("all" != self.model.filter_category) {
                        var title = $C("#_chatCategoryList").find("[data-cat-id=" + self.model.filter_category + "]").find("span._categoryName").text();
                        $("#_categoryDisplayTitle").text(title), category_display.isVisible() || (Cookies.set("ui_category", self.model.filter_category, {
                            expires: 3650
                        }), category_display.show())
                    } else category_display.isVisible() && (Cookies.remove("ui_category"), category_display.hide())
                }, self.setReadOnly = function() {}, self.setToOnly = function() {}, self.setTaskOnly = function() {}, self.build = function(room_list) {
                    self.model.prepareRM();
                    var html = "",
                        room_num = room_list.length,
                        show_room_num = room_num;
                    if (!room_num) return $C("#_roomListItems").quickEmpty(), $C("#_chatListEmptyArea ._chatListEmpty").hide(), self.model.filter_readonly ? $C("#_chatListUnreadEmpty").show() : self.model.filter_toonly ? $C("#_chatListToEmpty").show() : self.model.filter_taskonly && $C("#_chatListTaskEmpty").show(), void $C("#_chatListEmptyArea").show();
                    $C("#_chatListEmptyArea").hide(), room_num > self.room_show_limit && (show_room_num = self.room_show_limit);
                    for (var idx = 0; idx < show_room_num; idx++) void 0 != room_list[idx] && (html += self.getRoomItemPanel(room_list[idx]));
                    room_num > show_room_num && (html += '<div class="roomLimitOver"><div>' + L.chat_rest_roomtip + (room_num - self.room_show_limit) + "</div>" + ('<div id="_roomMore" class="button">' + L.chat_show_more + "</div></div>")), $C("#_roomListItems").html(html);
                    var focused_room_id = boot_1.RL.getFocusedRoomId();
                    focused_room_id > 0 && self.model.focusRoom(focused_room_id)
                };
                var room_default_option = {
                    showOrg: !1,
                    showPin: !0,
                    showSelected: !0,
                    showRequest: !0,
                    noTrim: !1
                };
                self.getRoomItemPanel = function(room_id, show_option) {
                    var option, room = self.model.rooms[room_id];
                    if (void 0 == show_option) option = room_default_option;
                    else {
                        option = {};
                        for (var key in room_default_option) option[key] = room_default_option[key];
                        for (var key in show_option) option[key] = show_option[key]
                    }
                    var unread_num = room.getUnreadNum(),
                        mention_num = 0;
                    unread_num > 0 && (mention_num = room.getMentionNum());
                    var class_label = "_room",
                        unread_label = "",
                        mention_label = "",
                        mytask_num_label = "";
                    option.showSelected && boot_1.RM && boot_1.RM.id == room_id && (class_label += " _roomSelected menuListTitleSelected"), unread_num > 0 && (class_label += " roomUnread", unread_label = '<li role="listitem" class="_unreadBadge unread"><span class="icoFontActionUnread"></span>' + unread_num + "</li>", mention_num && (mention_label = '<li class="_mentionLabel _unreadBadge mention"><span class="icoFontSideTo"></span>' + mention_num + "</li>", class_label += " roomMentionUnread")), room.mytask_num > 0 && (mytask_num_label = '<li><span class="icoFontActionTask"></span>' + Math.min(room.mytask_num, TASK_MAX_RESULTS) + "</li>");
                    var pin_icon = "";
                    option.showPin && (pin_icon = room.sticky ? '<div class="chatListPin"><span class="_pin _pinRid' + room.id + ' ico19PinOn"></span></div>' : '<div class="chatListPin chatListPinOff"><span class="_pin _pinRid' + room.id + ' ico19PinOff"></span></div>');
                    var request_notice = "";
                    option.showRequest && room.public && room.member_request.length > 0 && (request_notice = '<div class="alert alertWarning alertSmall"><span class="icoFontInfo marginRight"></span>' + L.chatroom_member_requests_notice.replace(/%%request_num%%/, room.member_request.length) + "</div>");
                    var orgtitle = "";
                    if (option.showOrg && "contact" == room.type) {
                        var aid = room.getAccountId(),
                            orgname = boot_1.CW.getOrgTitle(aid);
                        orgname && (orgtitle = '<p class="chatListOrgName">' + orgname + "</p>")
                    }
                    var p_class = "",
                        label_area = "";
                    unread_label || mention_label || mytask_num_label ? (option.noTrim || (p_class = " autotrim"), label_area = '<ul class="incomplete">' + unread_label + mention_label + mytask_num_label + "</ul>") : option.noTrim || (p_class = " chatListTitleNoLabel");
                    var external_label = "";
                    boot_1.CW.is_business && boot_1.ST.data.show_external && (room.isInternal() || (external_label = '<div class="_externalMark roomOthers ico19Others"></div>'));
                    var room_name = common_1.escape_html(room.getName());
                    return '<li role="listitem" aria-label="' + room_name + '" class="_roomLink ' + class_label + '" data-rid="' + room.id + '">' + ('<div class="roomIcon">' + room.getIcon("html", "medium") + "</div>") + ('<div class="chatListMeta"><p class="chatListTitleArea' + p_class + '">' + boot_1.CW.getRoomName(room.id) + "</p>" + orgtitle + label_area + "</div>" + external_label + pin_icon + request_notice + "</li>")
                }, self.updateRoomData = function() {}, self.updateTitle = function(room_id) {
                    if ("" == MOBILE) {
                        var title = "";
                        if (self.model.unread_room_sum > 0) {
                            var unread_sum_label = self.model.unread_room_sum;
                            self.model.mention_room_sum > 0 && (unread_sum_label += "(" + self.model.mention_room_sum + ")"), title = "[" + unread_sum_label + "]"
                        }
                        if (title += SERVICE_NAME, room_id && (title += " - " + boot_1.RL.rooms[room_id].getName()), document.title = title, boot_1.ST.data.faviconstat) {
                            var href = "";
                            href = 0 == self.model.unread_room_sum ? "./image/favicon/favicon00.ico" : self.model.unread_room_sum < 10 ? "./image/favicon/favicon0" + self.model.unread_room_sum.toString() + ".ico" : "./image/favicon/favicon09+.ico", boot_1.CW.view.changeFavicon(href)
                        } else boot_1.CW.view.changeFavicon("./image/favicon/favicon00.ico")
                    }
                }, self.updateSumNumbers = function() {
                    var sumnum_key = self.model.mytask_total + ":" + self.model.unread_room_sum + ":" + self.model.mention_room_sum + ":" + self.model.mytask_room_sum;
                    if (self.last_sumnum_key != sumnum_key) {
                        if (self.last_sumnum_key = sumnum_key, self.model.mytask_total > 0 ? $C("#_myAllTaskNum").text(self.model.mytask_total).show() : $C("#_myAllTaskNum").hide(), self.model.unread_room_sum > 0) {
                            var unread_num = self.model.unread_room_sum;
                            if (unread_num > 1e3 && (unread_num = "999+"), unread_status.html(unread_num).show(), self.model.mention_room_sum > 0) {
                                var mention_num = self.model.mention_room_sum;
                                mention_num > 1e3 && (mention_num = "999+"), mention_status.text(mention_num).show()
                            } else mention_status.fadeOut()
                        } else unread_status.fadeOut(), mention_status.fadeOut();
                        self.model.mytask_room_sum > 0 ? mytask_status.text(self.model.mytask_room_sum).show() : mytask_status.fadeOut(), boot_1.RM && self.updateTitle(boot_1.RM.id)
                    }
                }, self.buildCategory = function() {
                    var html = "",
                        cat_list = self.model.getSortedCategoryList();
                    for (var i in cat_list) {
                        var cat_id = cat_list[i],
                            list_tag = '<li class="_chatCategoryItem" data-cat-id="' + cat_id + '">';
                        cat_id == self.model.filter_category && (list_tag = '<li class="_chatCategoryItem listSelected" data-cat-id="' + cat_id + '">'), html += list_tag + '<span class="_categoryName categoryName autotrim">' + common_1.escape_html(self.model.category_dat[cat_id].name) + '</span><div class="_categoryAction chatCategoryAction linkIconStatus">' + ('<span class="icoFontActionEdit _categoryEdit"></span><span class="icoTextHide">' + L.button_edit + "</span>") + ('<span class="icoFontActionDelete _categoryDelete"></span><span class="icoTextHide">' + L.button_delete + "</span></li>"), Number("</div>")
                    }
                    $("#_chatCagegoryUserList").html(html)
                }, self.updateUnreadNum = function(room_id) {
                    self.buildRoomItem(room_id)
                }, self.buildRoomItem = function(room_id) {
                    $C("#_roomListItems").find("[data-rid=" + room_id + "]").replaceWith(self.getRoomItemPanel(room_id))
                }, self.showJoinPublicChatDialog = function(room_dat) {
                    var desc = common_1.escape_html(room_dat.public_description).replace(/(https?:\/\/[-_.!~*\'()a-zA-Z0-9;?:\@&=+\$,%#\{\}\[\]]+[-_.!~*\'()a-zA-Z0-9;\/?:\@&=+\$,%#\{\}\[\]]+)/gi, '<a href="$1" target="_blank">$1</a>');
                    $("#_joinpublicchatDescription").html(desc);
                    var show_dialog = function() {
                        var label_btn_submit = parseInt(room_dat.join_need_accept, 10) ? L.join_groupchat_btn_send_join_request_label : L.join_groupchat_btn_join_groupchat_label;
                        $("#_joinpublicchatDialog").cwDialog({
                            title: L.joinpublicchat_title,
                            width: 640,
                            height: "auto",
                            autoOpen: !0,
                            hide: "fade",
                            buttonLabels: [label_btn_submit, L.button_cancel],
                            buttonSubmit: 0,
                            buttonCancel: 1,
                            buttonClick: function(idx) {
                                0 === idx && (boot_1.RL.joinPublicChat(room_dat.id), this.close())
                            },
                            open: function() {
                                $("#_joinpublicchatIcon").html('<img class="ui_avatar ui_chatworkid_avatar avatar" src="' + room_dat.icon + '" />'), $("#_joinpublicchatName").text(room_dat.name), "1" == room_dat.join_need_accept ? $("#_joinpublicchatNeedAccept").show() : $("#_joinpublicchatNeedAccept").hide()
                            }
                        })
                    };
                    room_dat.header ? ($("#_joinpublicchatHeader").remove(), $("#_joinpublicchatDialog").find("._overflow").prepend('<div id="_joinpublicchatHeader" class="joinpublicCover"></div>'), $("#_joinpublicchatHeader").html('<img id="_joinpublicchatHeaderImage" src="' + S3_PATH + "/header/" + room_dat.header + '" />'), $("#_joinpublicchatHeaderImage").bind("load", function() {
                        show_dialog()
                    })) : ($("#_joinpublicchatHeader").remove(), show_dialog())
                }, self.updateMasterData = function() {}
            }
            var Cookies = require("js-cookie"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.RoomListView = RoomListView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "js-cookie": 37
        }
    ],
    139: [
        function(require, module, exports) {
            "use strict";

            function RoomSubView(model) {
                var self = this;
                self.model = model;
                var current_room_id = null;
                self.prepare = function() {
                    var sub_content_init_width = Cookies.get("ui_subcontent_width");
                    void 0 !== sub_content_init_width && self.resizeWidth(sub_content_init_width);
                    var right_pane_width = 0;
                    $.cwResize.setHandle($("#_subContentAreaHandle"), {
                        type: "col",
                        start: function() {
                            right_pane_width = $C("#_subContent").width()
                        },
                        move: function(move_x) {
                            self.resizeWidth(right_pane_width - move_x)
                        }
                    });
                    var scroll_width = null;
                    $C("#_subRoomDescriptionWrapper").on("mouseenter", function() {
                        var wrap = $(this);
                        if (wrap.data("is_overflow") && $C("#_subContentArea").height() < $C("#_subContentAreaContent").height()) {
                            if (null === scroll_width) {
                                $C("#_subContentArea").css({
                                    overflow: "hidden",
                                    width: "100%",
                                    "padding-right": 0
                                });
                                var title_width = $("#_subRoomInfoTitle").width();
                                $C("#_subContentArea").css({
                                    overflow: "auto"
                                }), scroll_width = title_width - $("#_subRoomInfoTitle").width()
                            }
                            $C("#_subContentArea").css({
                                overflow: "hidden",
                                width: ($C("#_subContentArea").width() - scroll_width).toString() + "px",
                                "padding-right": scroll_width + "px"
                            })
                        }
                    }).on("mouseleave", function() {
                        var wrap = $(this);
                        wrap.data("is_overflow") && $C("#_subContentArea").css({
                            overflow: "auto",
                            width: "100%",
                            "padding-right": 0
                        })
                    }), $("#_closeChatInfo").click(function() {
                        var chatinfo = $("#_subRoomChatInfo");
                        chatinfo.isVisible() ? chatinfo.stop().slideUp() : chatinfo.stop().slideDown()
                    }), $("#_groupCall").click(function() {
                        self.openGroupCall(boot_1.RM.id), boot_1.AL.trackEvent("message_input", "open", {
                            label: "chatwork_live_dialog"
                        })
                    }), $C("#_chatFileAll").cwButton({
                        size: "large",
                        click: function() {
                            boot_1.FL.view.openFileList(boot_1.RM.id)
                        }
                    }), self.prepareNavigation(), self.prepareMember(), $("#_subEditRoomInfo").click(function() {
                        "group" == boot_1.RM.type ? boot_1.RD.view.editRoomInfo(boot_1.RM.id) : boot_1.RD.view.editRoomDescription(boot_1.RM.id)
                    });
                    var list_order = ["invitation_link_setting", "room_permission_setting", "same_member_addchat", "hr", "leave_room", "delete_contact", "delete_room"];
                    $C("#_chatRoomSetting").cwButton({
                        size: "large"
                    }).$el.cwDropDown({
                        list: function() {
                            for (var drop_list = [], list_flag = {}, i = 0, list_len = list_order.length; i < list_len; i++) {
                                var key = list_order[i];
                                list_flag[key] = !1
                            }
                            switch (boot_1.RM.type) {
                                case "group":
                                    list_flag.leave_room = !0;
                                    break;
                                case "contact":
                                    list_flag.delete_contact = !0
                            }
                            if ("contact" !== boot_1.RM.type) switch (boot_1.RM.member_dat[boot_1.AC.myid]) {
                                case "admin":
                                    list_flag.invitation_link_setting = !0, list_flag.room_permission_setting = !0, list_flag.same_member_addchat = !0, list_flag.hr = !0, list_flag.delete_room = !0
                            }
                            for (var i = 0, list_len = list_order.length; i < list_len; i++) {
                                var key = list_order[i];
                                if (list_flag[key]) switch (key) {
                                    case "invitation_link_setting":
                                        drop_list.push({
                                            value: "invitation_link_setting",
                                            label: L.chatroom_invitation_link_setting
                                        });
                                        break;
                                    case "room_permission_setting":
                                        drop_list.push({
                                            value: "room_permission_setting",
                                            label: L.chatroom_room_permission_setting
                                        });
                                        break;
                                    case "same_member_addchat":
                                        drop_list.push({
                                            value: "same_member_addchat",
                                            label: L.chatroom_createchat_same_members
                                        });
                                        break;
                                    case "hr":
                                        drop_list.push("hr");
                                        break;
                                    case "leave_room":
                                        drop_list.push({
                                            value: "leave_room",
                                            label: L.chatroom_leave
                                        });
                                        break;
                                    case "delete_contact":
                                        drop_list.push({
                                            value: "delete_contact",
                                            label: L.contact_delete
                                        });
                                        break;
                                    case "delete_room":
                                        drop_list.push({
                                            value: "delete_room",
                                            label: L.chatroom_delete
                                        })
                                }
                            }
                            return drop_list
                        },
                        select: function(value) {
                            if (!boot_1.RM || !boot_1.RM.id) return void boot_1.CW.alert(L.error_no_select);
                            var room_id = boot_1.RM.id;
                            switch (value) {
                                case "invitation_link_setting":
                                    boot_1.RD.view.openInvitationLinkSetting(room_id);
                                    break;
                                case "room_permission_setting":
                                    boot_1.RD.view.openRoomPermissionSetting(room_id);
                                    break;
                                case "same_member_addchat":
                                    for (var open_groupchat_same_members_dialog = function() {
                                        boot_1.RD.view.openAddRoomDialog();
                                        var member_dat = boot_1.RM.member_dat;
                                        boot_1.RD.view.checkSameMember(member_dat)
                                    }, mem_list = boot_1.RM.getSortedMemberList(), exist_nocontact = !1, idx = 0; idx < mem_list.length; idx++) boot_1.AC.myid != mem_list[idx] && (boot_1.AC.isContact(mem_list[idx]) || (exist_nocontact = !0));
                                    exist_nocontact ? boot_1.CW.confirm(L.chatroom_createchat_same_members_confirm, function() {
                                        setTimeout(function() {
                                            open_groupchat_same_members_dialog()
                                        })
                                    }) : open_groupchat_same_members_dialog();
                                    break;
                                case "delete_contact":
                                    var aid = boot_1.RM.getAccountId();
                                    boot_1.AC.view.deleteContact(aid);
                                    break;
                                case "leave_room":
                                    boot_1.CW.confirm(L.chatroom_confirm_leave.replace(/%%room_name%%/, boot_1.RM.getName()), function() {
                                        boot_1.CW.post("gateway.php", {
                                            cmd: "leave_room",
                                            room_id: room_id
                                        }, function() {
                                            boot_1.CW.watch()
                                        })
                                    });
                                    break;
                                case "delete_room":
                                    var message = "";
                                    message += L._chatroom_confirm_delete_alert.replace(/%%room_name%%/, common_1.escape_html(boot_1.RM.getName())) + "\n\n", message += L._chatroom_confirm_delete_content + "\n\n", message += "<ul>", message += '<li class="_cwSelectableRow"><label><input type="checkbox" class="_cwDGAgreeCheckbox" /> ' + L._chatroom_confirm_delete_note_1 + "</label></li>", message += '<li class="_cwSelectableRow"><label><input type="checkbox" class="_cwDGAgreeCheckbox" /> ' + L._chatroom_confirm_delete_note_2 + "</label></li>", message += '<li class="_cwSelectableRow"><label><input type="checkbox" class="_cwDGAgreeCheckbox" /> ' + L._chatroom_confirm_delete_note_3 + "</label></li>", message += "</ul>", boot_1.CW.view.confirmDelete(message, function() {
                                        boot_1.CW.post("gateway.php", {
                                            cmd: "delete_room",
                                            room_id: room_id
                                        }, function() {
                                            boot_1.CW.watch()
                                        })
                                    }, null, !0, L._button_delete_with_agreement)
                            }
                        }
                    }), "free" !== SERVICE_PLAN && "1" === Cookies.get("ui_fold_roomsub") && self.toggleFold(), boot_1.CW.view.registerKeyboardShortcut(71, !1, !1, !1, !1, function() {
                        boot_1.RD.view.openAddRoomDialog()
                    }).registerKeyboardShortcut(84, !1, !1, !1, !1, function() {
                        $C("#_taskNameInput").focus()
                    })
                };
                var current_promotion_size = "hide";
                self.getCurrentPromotionSize = function() {
                    return current_promotion_size
                };
                var nextStateForPromotion = function() {
                    var tasklist = boot_1.RM.tasklist;
                    if (tasklist.view.task_num > 0) return "hide";
                    var task_name = $C("#_taskNameInput").val();
                    if (task_name.length > 0) return "hide";
                    var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
                    if (windowInnerHeight < 920) return "single";
                    var room_description = boot_1.RM.description;
                    return room_description === !1 ? null : "" === room_description ? "double" : "single"
                };
                self.showPromotion = function() {
                    var next_size = nextStateForPromotion();
                    if ("hide" === next_size) return void self.hidePromotion();
                    if (null !== next_size)
                        if (next_size === current_promotion_size) {
                            var room_id = boot_1.RM.id;
                            room_id == current_room_id || (current_room_id = room_id, self.refreshPromotion())
                        } else "double" === next_size ? self.showDoubleSizePromotion() : "single" === next_size && self.showSingleSizePromotion()
                }, self.hidePromotion = function() {
                    current_promotion_size = "hide", $(".promotionArea").css({
                        height: "0",
                        display: "none"
                    }), googletag.destroySlots()
                };
                var createDoubleSizeSlot = function() {
                    googletag.pubads().display("/21528008/ChatWorkRDAd", [
                        [300, 600],
                        [300, 250]
                    ], "div-gpt-ad-1415949969404-1")
                }, createSingleSizeSlot = function() {
                        googletag.pubads().display("/21528008/ChatWorkRDAd", [300, 250], "div-gpt-ad-1415949969404-1")
                    }, showPromotionBase = function(next_slot_creator) {
                        googletag.cmd.push(function() {
                            googletag.destroySlots(), next_slot_creator()
                        }), $(".promotionArea").css({
                            height: "",
                            display: ""
                        })
                    };
                self.showDoubleSizePromotion = function() {
                    current_promotion_size = "double", showPromotionBase(createDoubleSizeSlot)
                }, self.showSingleSizePromotion = function() {
                    current_promotion_size = "single", showPromotionBase(createSingleSizeSlot)
                }, self.refreshPromotion = function() {
                    googletag.cmd.push(function() {
                        googletag.pubads().refresh()
                    })
                };
                var latest_task = "",
                    assign_tip = null,
                    task_input = null;
                self.prepareTask = function() {
                    task_input = $C("#_taskNameInput").focus(function() {
                        self.expandTaskArea(!0), self.openFold(), $(".promotionArea").animate({
                            height: 0
                        }, function() {
                            $(this).css("display", "none"), current_promotion_size = "hide"
                        })
                    }).cwElasticTextArea({
                        maxHeight: function() {
                            var cancel_button = $C("#_taskCancelButton");
                            return $C("body").height() - cancel_button.offset().top - cancel_button.height()
                        },
                        minHeight: function() {
                            var max_height = this.option.maxHeight();
                            return max_height >= boot_1.TM.taskinput_init_height ? boot_1.TM.taskinput_init_height : max_height > boot_1.TM.taskinput_min_height ? max_height : boot_1.TM.taskinput_min_height
                        }
                    });
                    var assign_view_update = null;
                    assign_tip = $("#_taskAssignList").cwListTip({
                        search: !0,
                        multiSelect: !0,
                        placeHolder: L.chatroom_search_member,
                        useHtmlLabel: !0,
                        list: function() {
                            return self.getTaskMemberList(this.data.room_id)
                        },
                        open: function(tipFrom, room_id) {
                            this.data.room_id = room_id
                        },
                        update: function() {
                            null === assign_view_update && (assign_view_update = setTimeout(function() {
                                for (var assign_list = assign_tip.getVal(), value = "", assign_length = assign_list.length, i = 0; i < assign_length; i++) {
                                    var aid = assign_list[i];
                                    value += '<div class="assignContent assignMember"><span class="_taskAssignMemberLabel assignContentText" data-aid="' + aid + '">' + boot_1.CW.getName(aid) + '</span><span class="_taskAssignCancel assignContentCancel" data-aid="' + aid + '"><span class="icoFontCancel"></span><span class="icoTextHide">' + L.button_delete + "</span></span></div>"
                                }
                                value ? ($C("#_assignBox").html(value), $C("#_inchargeEmpty").hide()) : ($C("#_assignBox").quickEmpty(), $C("#_inchargeEmpty").show()), task_input.resize(), assign_view_update = null
                            }, 100))
                        }
                    }), $C("#_assignButton").click(function() {
                        assign_tip.open($(this), boot_1.RM.id)
                    }), $("#_assignBox").on("click", "._taskAssignCancel", function() {
                        var aid = $(this).attr("data-aid");
                        assign_tip.select(aid)
                    }).on("mouseover", "._taskAssignMemberLabel", function() {
                        var label = $(this),
                            aid = label.attr("data-aid");
                        $.cwMessageTip.isInit(label[0]) || label.cwMessageTip({
                            message: function() {
                                return boot_1.AC.getName(aid)
                            },
                            delay: boot_1.TM.messagetip_delay
                        }).open()
                    }).on("click", "._taskAssignMemberLabel", function() {
                        return $C("#_assignButton").click(), !1
                    }), $C("#_inchargeEmpty").click(function() {
                        $C("#_assignButton").click()
                    });
                    var quick_assign_tip = $("#_taskAssignQuickList").cwToolTip({
                        offsetTop: 7,
                        open: function() {
                            for (var mem_list = boot_1.RM.getSortedMemberList(), mem_length = mem_list.length, html = "", max_quick_num = 7, idx = 0; idx < mem_length; idx++) {
                                var account_id = mem_list[idx];
                                if (html += boot_1.CW.getAvatarPanel(account_id, {
                                    size: "small",
                                    clicktip: !1
                                }), idx > max_quick_num) {
                                    html += '<span class="_taskAssignMore taskAssignMore icoFontActionMore"></span>';
                                    break
                                }
                            }
                            $C("#_assignQuickBox").html(html)
                        },
                        close: function() {}
                    });
                    quick_assign_tip.$el.on("click", "._avatar", function() {
                        var aid = $(this).attr("data-aid");
                        assign_tip.select(aid)
                    }).on("click", "._taskAssignMore", function() {
                        quick_assign_tip.close(), $C("#_assignButton").click()
                    }), $("#_taskQuickWrapper").on("mouseenter", function() {
                        quick_assign_tip.isOpen() || assign_tip.isOpen() || quick_assign_tip.open($C("#_taskAssignAddArea"))
                    }), $("#_taskLimitAddArea").on("mouseenter", function() {
                        quick_assign_tip.isOpen() && quick_assign_tip.close()
                    }), $("#_chatContent,#_subRoomMemberArea,#_assignButton").on("mouseenter", function() {
                        quick_assign_tip.close()
                    }), $C("#_limitButton").cwDatePicker({
                        dateLabel: $("#_limit"),
                        update: function() {
                            var date = this.getVal();
                            date ? $C("#_limitEmpty").hide() : $C("#_limitEmpty").show()
                        }
                    }), $C("#_limitEmpty").click(function() {
                        $C("#_limitButton").click()
                    }), $("#_taskAddButton").click(function() {
                        if (!boot_1.RM.id) return void boot_1.CW.alert(L.error_no_select);
                        if (!boot_1.RM.view.disabled_send) {
                            var task_name = S(task_input.getVal()).trimRight().s;
                            if (0 != task_name.length) {
                                var room_id = boot_1.RM.id,
                                    datepicker = $C("#_limitButton").cwDatePicker(),
                                    task_limit = datepicker.getVal(),
                                    assign_list = self.getTaskAssignList();
                                if (!assign_list.length) return void boot_1.CW.alert(L.chatsend_error_no_incharge);
                                var task_data = task_name + "|" + assign_list.join(",") + "|" + task_limit;
                                latest_task != task_data && (latest_task = task_data, task_input.setVal(""), self.clearTaskAssign(), datepicker.setVal(""), task_name = boot_1.CS.convertToSend(task_name), self.model.addTask(room_id, task_name, task_limit, assign_list, function() {
                                    self.initTaskArea(), latest_task = ""
                                }, function(error) {
                                    error ? boot_1.CW.alert(error) : boot_1.CW.alert(L.chatsend_error_send_task), latest_task = "", boot_1.RL.selectRoom(room_id), task_input.setVal(task_name), self.setTaskAssign(assign_list), datepicker.setVal(task_limit)
                                }))
                            }
                        }
                    }).keydown(function(e) {
                        9 != e.keyCode && 13 == e.keyCode && $(this).click()
                    }), $("#_taskCancelButton").click(function() {
                        self.initTaskArea()
                    }).keydown(function(e) {
                        9 != e.keyCode && 13 == e.keyCode && $(this).click()
                    })
                }, self.initTaskArea = function() {
                    return $C("#_taskNameInput").cwElasticTextArea().setVal("").clearFocused(), $C("#_taskAddArea").addClass("taskContentAreaClose"), $C("#_taskAddMeta").hide(), $C("#_limitButton").cwDatePicker().today(), boot_1.RM && 1 == Object.keys(boot_1.RM.member_dat).length && void 0 != boot_1.RM.member_dat[boot_1.AC.myid] ? boot_1.RS.view.setTaskAssign([boot_1.AC.myid]) : boot_1.RS.view.clearTaskAssign(), this
                }, self.prepareNavigation = function() {
                    return $("#_chatTabRoomInfo").click(function() {
                        $("#_chatRoomDescriptionNav").find("li").removeClass("descriptionNavSelected"), $("#_chatTabRoomInfo").addClass("descriptionNavSelected"), $("#_subRoomInfoTabContent").show(), $("#_subRoomTaskTabContent").hide()
                    }), $("#_chatTabTask").click(function() {
                        $("#_chatRoomDescriptionNav").find("li").removeClass("descriptionNavSelected"), $("#_chatTabTask").addClass("descriptionNavSelected"), $("#_subRoomInfoTabContent").hide(), $("#_subRoomTaskTabContent").show()
                    }), this
                }, self.prepareMember = function() {
                    $C("#_subRoomMemberArea").on("click", "#_openMemberDetail", function() {
                        self.openMemberDetailDialog(boot_1.RM.id)
                    });
                    var member_moretip_role = "",
                        member_moretip = $("#_showMoreMemberTip").cwListTip({
                            search: !0,
                            useHtmlLabel: !0,
                            placeHolder: L.chatroom_search_member,
                            multiSelect: !1,
                            selectable: !1,
                            list: function() {
                                if (!boot_1.RM) return [];
                                var mem_list = [];
                                for (var aid in boot_1.RM.member_dat) "nocontact" == member_moretip_role ? boot_1.AC.isContact(aid) || mem_list.push(aid) : boot_1.RM.member_dat[aid] == member_moretip_role && mem_list.push(aid);
                                boot_1.RM.sortMember(mem_list);
                                for (var list = [], mem_length = mem_list.length, idx = 0; idx < mem_length; idx++) {
                                    var account_id = mem_list[idx];
                                    if (account_id != boot_1.AC.myid) {
                                        var name = boot_1.AC.getName(account_id);
                                        list.push({
                                            keys: boot_1.AC.getSearchKeys(account_id),
                                            value: account_id,
                                            label: boot_1.CW.getAvatarPanel(account_id, {
                                                clicktip: !1,
                                                size: "small"
                                            }) + '<p class="autotrim">' + common_1.escape_html(name) + "</p>"
                                        })
                                    }
                                }
                                return list
                            },
                            select: function(account_id) {
                                boot_1.AC.view.openProfileWindow(account_id), this.close()
                            }
                        });
                    $("#_memberDetailDialog").on("click", "._showMoreMember", function() {
                        var link = $(this);
                        member_moretip_role = link.attr("data-role"), member_moretip.open(link)
                    })
                }, self.isFolded = function() {
                    return self.is_folded
                }, self.openFold = function() {
                    self.isFolded() && self.toggleFold()
                };
                var is_expanding = !1;
                self.toggleFold = function() {
                    if (!is_expanding) {
                        boot_1.AL.trackEvent("message_input", "click", {
                            label: "toggle_fold_room_sub"
                        });
                        var chatContent = $("#_chatContent"),
                            current = chatContent.css("right"),
                            expand_right = $("#_mainContentExpandRight");
                        if (chatContent.addClass("foldAnimRight"), is_expanding = !0, "0px" == current) {
                            self.is_folded = !1, chatContent.css("right", $("#_subContent").outerWidth() + "px");
                            var arrow_1 = expand_right.find(".icoFontTriangleLeft").addClass("rotate180");
                            setTimeout(function() {
                                Cookies.remove("ui_fold_roomsub"), arrow_1.removeClass("rotate180 icoFontTriangleLeft").addClass("icoFontTriangleRight"), expand_right.addClass("_showDescription"), chatContent.removeClass("foldAnimRight"), boot_1.CW.view.resizeLayout()
                            }, 300)
                        } else {
                            self.is_folded = !0, chatContent.css("right", "0px");
                            var arrow_2 = expand_right.find(".icoFontTriangleRight").addClass("rotate180");
                            setTimeout(function() {
                                Cookies.set("ui_fold_roomsub", "1", {
                                    expires: 3650
                                }), arrow_2.removeClass("rotate180 icoFontTriangleRight").addClass("icoFontTriangleLeft"), expand_right.removeClass("_showDescription"), chatContent.removeClass("foldAnimRight"), boot_1.CW.view.resizeLayout()
                            }, 300)
                        }
                        setTimeout(function() {
                            is_expanding = !1
                        }, 200)
                    }
                }, self.resizeWidth = function(width) {
                    width < boot_1.TM.subcontent_min_width && (width = boot_1.TM.subcontent_min_width);
                    var current_width = $C("#_subContent").width(),
                        timeline_width = $C("#_timeLine").width();
                    return !(timeline_width < boot_1.TM.timeline_min_width && current_width < width) && ($C("#_chatContent").css("right", width + "px"), $C("#_subContent").width(width), $C("#_subContentArea").width(width), Cookies.set("ui_subcontent_width", width, {
                        expires: 3650
                    }), boot_1.CW.view.resizeLayout(), self)
                };
                var group_call_dialog = null;
                self.prepareGroupCall = function() {
                    group_call_dialog = $("#_groupCallDialog").cwDialog({
                        title: "ChatWork Live",
                        width: "auto",
                        height: "auto",
                        open: function(room_id) {
                            $("#_groupCallDialog .chatroomTitle").find(".avatarGroup").attr("src", boot_1.RM.getIcon("src")).end().find(".chatroomTitleMeta").text(boot_1.RM.getName({
                                nameonly: !0
                            })).end(), this.data.room_id = room_id, this.data.select_flag = {}, $C("#_videoChatContactFilter").cwSearchBox().setVal("");
                            var member_aid_list = [],
                                room = boot_1.RL.rooms[room_id];
                            for (var aid in room.member_dat) aid != boot_1.AC.myid && member_aid_list.push(aid);
                            if (member_aid_list.length > 0) {
                                room.sortMember(member_aid_list), $C("#_groupCallMember").quickEmpty();
                                for (var html = "", idx = 0; idx < member_aid_list.length; idx++) {
                                    var aid = member_aid_list[idx];
                                    html += '<div class="_groupCallMember _cwSelectableRow groupCallMember" data-aid="' + aid + '">' + ('<div class="groupCallAvatar">' + $.cwCheckBox.create(!1, "", aid, {
                                        "data-theme": "green"
                                    }) + boot_1.CW.getAvatarPanel(aid, {
                                        size: "medium",
                                        clicktip: !1
                                    }) + "</div>") + ("<p>" + boot_1.CW.getName(aid) + "</p></div>")
                                }
                                $C("#_groupCallMember").html(html)
                            } else $C("#_groupCallMember").html('<div class="groupcallNoMembers">' + L.live_member_not_found + "</div>")
                        },
                        postOpen: function() {
                            $C("#_videoChatContactFilter").focus()
                        },
                        buttonLabels: [L.live_video, L.live_voice, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 2,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                case 1:
                                    var aid_list = [boot_1.AC.myid];
                                    for (var aid in this.data.select_flag) aid_list.push(aid);
                                    var type = "voice";
                                    0 == index && (type = "video");
                                    var url = boot_1.CW.getLiveUrl(this.data.room_id, aid_list, type);
                                    window.open(url, "cwlive", "menubar=0,toolbar=0,titlebar=0,status=0,scrollbars=0,resizable=1"), this.close()
                            }
                        }
                    }), $("#_groupCallCheckAll").click(function() {
                        $C("#_groupCallMember").find("._cwCBUnchecked").each(function() {
                            var checkbox = $(this);
                            checkbox.isVisible() && checkbox.cwCheckBox().check()
                        })
                    }), $("#_groupCallUnCheckAll").click(function() {
                        $C("#_groupCallMember").find("._cwCBChecked").each(function() {
                            var checkbox = $(this);
                            checkbox.isVisible() && checkbox.cwCheckBox().unCheck()
                        })
                    }), $C("#_groupCallMember").on("cwCheckBox_update", function(event, is_check, account_id) {
                        is_check ? group_call_dialog.data.select_flag[account_id] = is_check : group_call_dialog.data.select_flag[account_id] && delete group_call_dialog.data.select_flag[account_id]
                    }), $("#_videoChatContactFilter").cwSearchBox({
                        update: function() {
                            var room_id = group_call_dialog.data.room_id,
                                select_flag = group_call_dialog.data.select_flag,
                                member_aid_list = [],
                                room = boot_1.RL.rooms[room_id],
                                search_text = this.getVal(),
                                html = "";
                            for (var aid in room.member_dat)
                                if (aid != boot_1.AC.myid) {
                                    var name = boot_1.AC.account_dat[aid].nm.toLowerCase();
                                    if (search_text && name.indexOf(search_text.toLowerCase()) === -1) continue;
                                    member_aid_list.push(aid)
                                }
                            if ($C("#_groupCallMember").quickEmpty(), 0 === member_aid_list.length) return html = '<div class="groupcallNoMembers">' + L.live_member_not_found + "</div>", void $C("#_groupCallMember").html(html);
                            room.sortMember(member_aid_list);
                            for (var idx = 0; idx < member_aid_list.length; idx++) {
                                var aid = member_aid_list[idx],
                                    checked = Boolean(select_flag[aid]);
                                html += '<div class="_groupCallMember _cwSelectableRow groupCallMember" data-aid="' + aid + '">' + ('<div class="groupCallAvatar">' + $.cwCheckBox.create(checked, "", aid, {
                                    "data-theme": "green"
                                }) + boot_1.CW.getAvatarPanel(aid, {
                                    size: "medium",
                                    clicktip: !1
                                }) + "</div>") + ("<p>" + boot_1.CW.getName(aid) + "</p></div>")
                            }
                            $C("#_groupCallMember").html(html)
                        }
                    })
                }, self.openGroupCall = function(room_id) {
                    var room = boot_1.RL.rooms[room_id];
                    return !!room && (group_call_dialog || self.prepareGroupCall(), void group_call_dialog.open(room_id))
                }, self.openMemberDetailDialog = function(room_id) {
                    var member_detail_dialog = $("#_memberDetailDialog").cwDialog({
                        title: L.chatroom_member_detail,
                        width: 600,
                        autoOpen: !0,
                        buttonLabels: [L.button_close],
                        buttonCancel: 0,
                        buttonClick: function(index) {
                            switch (index) {
                                case 0:
                                    this.close()
                            }
                        },
                        open: function() {
                            self.buildMember(room_id), $("#_memberDetailContent").html(member_detail_html)
                        }
                    });
                    $("#_memberDetailEditMember").on("click", this, function() {
                        member_detail_dialog.close(), boot_1.RD.view.editRoomMember(boot_1.RM.id)
                    })
                };
                var member_detail_html = "";
                self.buildMember = function(room_id) {
                    var room = boot_1.RL.rooms[room_id];
                    if (!room) return this;
                    for (var mem_list = room.getSortedMemberList(), mem_length = mem_list.length, member_prev_show_max = boot_1.TM.member_preview_show_max, html_prev = "", member_show_max = boot_1.TM.member_detail_show_max, html_member = {
                            admin: "",
                            member: "",
                            readonly: "",
                            nocontact: "",
                            requested: ""
                        }, member_count = {
                            admin: 0,
                            member: 0,
                            readonly: 0,
                            nocontact: 0,
                            requested: 0
                        }, room_type = room.type, idx = 0; idx < mem_length; idx++) {
                        var account_id = mem_list[idx],
                            role = room.member_dat[account_id];
                        member_count[role] < member_show_max && (html_member[role] += boot_1.CW.getAvatarPanel(account_id, {
                            size: "small"
                        })), idx < member_prev_show_max && (html_prev += '<li class="chatRoomMemberListItem" role="listitem" aria-label="' + common_1.escape_html(boot_1.AC.getName(account_id)) + '">' + boot_1.CW.getAvatarPanel(account_id) + "</li>"), member_count[role]++, "group" == room_type && (boot_1.AC.isContact(account_id) || (boot_1.AC.myrequest_dat[account_id] ? (member_count.requested < member_show_max && (html_member.requested += boot_1.CW.getAvatarPanel(account_id, {
                            size: "small"
                        })), member_count.requested++) : (member_count.nocontact < member_show_max && (html_member.nocontact += boot_1.CW.getAvatarPanel(account_id, {
                            size: "small"
                        })), member_count.nocontact++)))
                    }
                    mem_length > member_prev_show_max ? $("#_openMemberDetail").find(".chatRoomInfoBtnLabel").show().text(function() {
                        var show_member = mem_length - member_prev_show_max,
                            member = Math.min(show_member, 99);
                        return member === show_member ? "+" + member : member + "+"
                    }).end().find(".chatRoomInfoBtnIcon").hide().end() : $("#_openMemberDetail").find(".chatRoomInfoBtnLabel").hide().end().find(".chatRoomInfoBtnIcon").show().end();
                    for (var member_box = [{
                        key: "admin",
                        label: L.admin
                    }, {
                        key: "member",
                        label: L.member
                    }, {
                        key: "readonly",
                        label: L.readonly
                    }, {
                        key: "nocontact",
                        label: L.chatroom_member_nocontact,
                        boxClass: "noContact",
                        after: '<div class="addAllContactBtnArea"><div id="_addNoContactMember" data-rid="' + room_id + '" class="button">' + L.chatroom_member_add_contact + "</div></div>"
                    }, {
                        key: "requested",
                        label: L.contact_menu_myrequest,
                        boxClass: "noContact"
                    }], html = "", i = 0, mbox_len = member_box.length; i < mbox_len; i++) {
                        var mitem = member_box[i],
                            key = mitem.key;
                        if (html_member[key]) {
                            var box_class = "subContentMemberGroup";
                            void 0 != mitem.boxClass && (box_class += " " + mitem.boxClass), html += '<div class="' + box_class + '">', mitem.label && (html += '<div class="subContentGroupInner"><div class="memberListLabel">' + mitem.label + "：</div><div>" + html_member[key]), member_count[key] > member_show_max && (html += '<a class="_showMoreMember showMoreMember" data-role="' + key + '">' + L.chatroom_member_rest_number.replace(/%%rest_number%%/, (member_count[key] - member_show_max).toLocaleString()) + "</a>"), mitem.label && (html += "</div></div>"), mitem.after && (html += mitem.after), html += "</div>"
                        }
                    }
                    return "contact" === room_type ? ($C("#_subRoomMemberNum").hide(), $C("#_subRoomMemberList").hide(), member_detail_html = "") : ($C("#_subRoomMemberNum").show().text(" (" + mem_length.toLocaleString() + ")"), $C("#_subRoomMemberList").html(html_prev).show(), member_detail_html = html), "admin" === boot_1.RM.member_dat[boot_1.AC.myid] && (member_detail_html += '<div><a id="_memberDetailEditMember">' + L.member_detail_edit_member_label + "</a></div>"), this
                }, self.setTask = function(task_name, assign_list, limit_date, is_add, is_focus) {
                    return task_name ? (self.expandTaskArea(!1), is_add ? task_input.setVal(task_input.getVal() + task_name) : task_input.setVal(task_name)) : task_input.setVal(task_name), is_focus && task_input.focus(), assign_list && assign_list.length > 0 && self.setTaskAssign(assign_list), limit_date && $C("#_limitButton").cwDatePicker().setVal(limit_date), this
                }, self.expandTaskArea = function(is_animate) {
                    return $C("#_taskAddArea").hasClass("taskContentAreaClose") && ($C("#_taskAddArea").removeClass("taskContentAreaClose"), is_animate ? $C("#_taskAddMeta").slideDown("fast") : $C("#_taskAddMeta").show()), this
                }, self.getTaskAssignList = function() {
                    return assign_tip.getVal()
                }, self.setTaskAssign = function(assign_list) {
                    return assign_tip.setVal(assign_list), this
                }, self.clearTaskAssign = function() {
                    return assign_tip.clear(), this
                }, self.getTaskMemberList = function(room_id) {
                    for (var mem_list = boot_1.RL.rooms[room_id].getSortedMemberList(), mem_length = mem_list.length, assign_list = [], idx = 0; idx < mem_length; idx++) {
                        var account_id = mem_list[idx],
                            name = boot_1.AC.getName(account_id);
                        assign_list.push({
                            keys: boot_1.AC.getSearchKeys(account_id),
                            value: account_id,
                            label: boot_1.CW.getAvatarPanel(account_id, {
                                clicktip: !1,
                                size: "small"
                            }) + '<p class="autotrim">' + common_1.escape_html(name) + "</p>"
                        })
                    }
                    return assign_list
                }, self.showSetting = function() {
                    $C("#_chatRoomSetting").show()
                }, self.hideSetting = function() {
                    $C("#_chatRoomSetting").hide()
                };
                var sub_content_height = 0;
                self.resizeRoomInfo = function(subContentArea_inner_height) {
                    subContentArea_inner_height && (sub_content_height = subContentArea_inner_height);
                    var desc_content_height = $C("#_subRoomDescription").outerHeight(),
                        roominfo_title_height = $C("#_subRoomInfoTitle").outerHeight(),
                        max_desc_height = sub_content_height - boot_1.TM.tasklist_min_height - roominfo_title_height;
                    if (desc_content_height < max_desc_height) $C("#_subRoomDescriptionWrapper").removeClass("subRoomDescriptionOverflow").css({
                        height: ""
                    }).data("is_overflow", !1);
                    else {
                        var desc_height = max_desc_height,
                            description_max_height = Math.max(boot_1.TM.description_max_height, max_desc_height);
                        desc_height > description_max_height && (desc_height = description_max_height), desc_height < boot_1.TM.description_min_height && (desc_height = boot_1.TM.description_min_height), $C("#_subRoomDescriptionWrapper").addClass("subRoomDescriptionOverflow").css({
                            height: desc_height
                        }).data("is_overflow", !0)
                    }
                }
            }
            var S = require("string"),
                Cookies = require("js-cookie"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.RoomSubView = RoomSubView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "js-cookie": 37,
            string: 46
        }
    ],
    140: [
        function(require, module, exports) {
            "use strict";

            function RoomView(model) {
                var self = this;
                self.model = model, self.disabled_send = !1, self.dialog_resized = !1
            }
            var boot_1 = require("../controller/boot"),
                common_1 = require("../../core/lib/common"),
                messageTextarea_1 = require("../lib/messageTextarea");
            exports.RoomView = RoomView, window.RoomView = RoomView,
            function() {
                var room_request_dialog, last_build = 0;
                RoomView.prototype = {
                    getIcon: function(type, size) {
                        var aid = this.model.getAccountId();
                        void 0 == type && (type = "html");
                        var src = "";
                        switch (src = this.model.icon_preset ? S3_PATH + "/icon/ico_" + this.model.icon + ".png" : S3_PATH + "/icon/" + this.model.icon, type) {
                            case "html":
                                var html = "";
                                return html = aid > 0 ? boot_1.CW.getAvatarPanel(aid, {
                                    clicktip: !1,
                                    hovertip: !1,
                                    size: size
                                }) : '<img class="avatarGroup ' + boot_1.CW.view.getAvatarClass(size) + '" src="' + src + '"/>';
                            case "src":
                                return aid > 0 ? boot_1.CW.getAvatarPanel(aid, {
                                    src: !0
                                }) : src
                        }
                    },
                    getViewStat: function() {
                        var view_stat = {}, timeline_bottom = $C("#_chatSendArea").position().top;
                        view_stat.last_read_id = 0, view_stat.noview_num = 0;
                        for (var chat_list = this.model.timeline.getChatList(), length = chat_list.length - 1, i = length; i >= 0; i--) {
                            var id = chat_list[i].id,
                                chat = $("#_messageId" + id);
                            if (chat.length > 0) {
                                if (timeline_bottom > chat.position().top) {
                                    view_stat.last_read_id = id;
                                    break
                                }
                                view_stat.noview_num++
                            }
                        }
                        return view_stat
                    },
                    addSendingChat: function(sending_id) {
                        return this.model.timeline.build({
                            smoothScroll: !0,
                            sendingId: sending_id
                        }), this
                    },
                    build: function(user_option) {
                        var self = this,
                            move_room = !1,
                            option = $.extend({
                                messageHashUpdate: !0,
                                readLock: !1
                            }, user_option),
                            room = this.model;
                        if (boot_1.RM && last_build || (boot_1.RMUpdate(room), last_build = boot_1.RM.id, boot_1.CS.initChatText(), this.bindBeforeUnload()), boot_1.RM.id != room.id) {
                            boot_1.CW.read(0), boot_1.RM.reading && $C("#_roomListItems").find("[data-rid=" + boot_1.RM.id + "]").find("._unreadBadge").css("opacity", "0.5"), messageTextarea_1.messageArea.isEmpty() ? boot_1.CS.deleteChatDraft(boot_1.RM.id) : (boot_1.CS.setChatDraft(boot_1.RM.id, messageTextarea_1.messageArea.getValue(), boot_1.CS.chatedit_id), boot_1.CS.view.setChatText("")), boot_1.CS.clearChatEdit();
                            var task_name = $C("#_taskNameInput").val();
                            task_name ? boot_1.CS.setTaskDraft(boot_1.RM.id, task_name, boot_1.RS.view.getTaskAssignList(), $C("#_limitButton").cwDatePicker().getVal()) : boot_1.CS.deleteTaskDraft(boot_1.RM.id), boot_1.RMUpdate(room), boot_1.CS.initChatText(), $C("#_subRoomDescriptionWrapper").scrollTop(0), move_room = !0
                        }
                        var hash = "!rid" + boot_1.RM.id;
                        option.messageHashUpdate && option.jumpTo && (hash += "-" + option.jumpTo), $(window).unbind("hashchange", $.hashchangeHandler), document.location.hash = hash, setTimeout(function() {
                            $(window).bind("hashchange", $.hashchangeHandler)
                        });
                        var pin_html = "";
                        pin_html = boot_1.RL.rooms[boot_1.RM.id].sticky ? '<span class="_pin _pinRid' + boot_1.RM.id + ' ico19PinOn"></span>' : '<span class="_pin _pinRid' + boot_1.RM.id + ' ico19PinOff"></span>';
                        var room_name = boot_1.CW.getRoomName(room.id);
                        $C("#_roomTitle").html('<span class="_roomTitleText autotrim">' + room_name + "</span>" + pin_html), $C("#_subRoomName").html(room_name), $C("#_subRoomIcon").prop("src", self.model.getIcon("src")), "group" === self.model.type ? $C("#_subRoomIcon").addClass("avatarGroup") : $C("#_subRoomIcon").removeClass("avatarGroup"), "" == room.description ? (0 == room.buildtime ? $C("#_subRoomDescription").html('<div class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" alt="Loading" />' + L.loading + "</div>") : $C("#_subRoomDescription").html('<span class="emptyContent">' + L.chatroom_desc_none + "</span>"), boot_1.RS.view.resizeRoomInfo()) : ($C("#_subRoomDescription").html('<div class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" alt="Loading" />' + L.loading + "</div>"), $C("#_subRoomDescription").html("<pre>" + boot_1.CW.renderMessage(room.description) + "</pre>"), setTimeout(function() {
                            boot_1.RS.view.resizeRoomInfo()
                        })), room.member_dat[boot_1.AC.myid] ? this.buildMemberList() : self.model.refreshMember();
                        var scroll_to = null;
                        if (option.jumpTo ? scroll_to = option.jumpTo : option.scrollTo && (scroll_to = option.scrollTo), !scroll_to && move_room) {
                            var unread_num = room.getUnreadNum(),
                                chat_list = 0 == boot_1.ST.data.show_delmessage ? this.model.timeline.getChatListWithoutDeleted() : this.model.timeline.getChatList(),
                                unread_chat_index = chat_list.length - unread_num,
                                unread_chat = chat_list[unread_chat_index];
                            scroll_to = unread_num && unread_chat ? unread_chat.id : "End"
                        }
                        if (!this.disabled_send) {
                            var chat_draft = boot_1.CS.getChatDraft(boot_1.RM.id);
                            this.restoreChatDrat(chat_draft);
                            var task_draft = boot_1.CS.getTaskDraft(boot_1.RM.id);
                            this.restoreTaskDraft(task_draft)
                        }
                        option.scrollTo = scroll_to, room.timeline.build(option), room.rswitch = !1, boot_1.CW.is_business && boot_1.ST.data.show_external && (room.isInternal() ? (messageTextarea_1.messageArea.clearExternalClass(), $C("#_externalInfo").hide()) : (messageTextarea_1.messageArea.setExternalClass(), $C("#_externalInfo").show())), boot_1.CS.view.resizeChatArea(!0), room.filelist.build(), room.tasklist.build(), option.readLock === !1 && boot_1.wfocus && room.getUnreadNum() > 0 && boot_1.CW.read(), room.buildtime = Date.now()
                    },
                    buildHome: function() {},
                    buildMemberList: function() {
                        $C("#_subRoomDescriptionArea").show(), $C("#_roomRequestArea").hide(), $C("#_subEditRoomInfo").hide(), $C("#_subRoomProfileLinkArea").hide(), $C("#_subRoomJoinLinkArea").hide(), $C("#_subEditMember").hide(), $C("#_groupCall").hide(), $C("#_directCall").hide(), $C("#_showOnlyAdmin").hide(), $C("#_subRoomMemberArea").hide(), $C("#_chatNavMember").hide(), $C("#_chatSendTabTask").hide(), $C("#_file").hide(), $C("#_to").hide(), boot_1.RS.view.hideSetting();
                        var setLiveCallBtn = function(live_type, account_id) {
                            if ("ipad" !== MOBILE) {
                                var show_btn = $C("#_" + live_type).show();
                                return "groupCall" === live_type ? show_btn : show_btn.attr("data-aid", account_id)
                            }
                        };
                        switch (this.model.type) {
                            case "group":
                                switch (boot_1.RS.view.showSetting(), $C("#_chatNavMember").show(), this.model.allow_see_member || $C("#_showOnlyAdmin").show(), this.model.member_dat[boot_1.AC.myid]) {
                                    case "admin":
                                        if (boot_1.CS.view.enableChatArea(), boot_1.TK.view.enableTaskArea(), boot_1.FL.view.enableFileArea(), this.disabled_send = !1, $C("#_subEditRoomInfo").show(), $C("#_to").show(), $C("#_subRoomMemberArea").show(), $C("#_subEditMember").show(), setLiveCallBtn("groupCall"), this.model.public) {
                                            var request_num = this.model.member_request.length;
                                            request_num > 0 && $C("#_roomRequestArea").html('<span class="icoFontInfo marginRight"></span>' + L.chatroom_member_requests_notice.replace("%%request_num%%", request_num)).show()
                                        }
                                        break;
                                    case "member":
                                        this.model.allow_see_member && ($C("#_to").show(), $C("#_subRoomMemberArea").show(), setLiveCallBtn("groupCall")), this.model.allow_send_message ? (boot_1.CS.view.enableChatArea(), this.disabled_send = !1, this.model.allow_upload_file ? boot_1.FL.view.enableFileArea() : boot_1.FL.view.disableFileArea(), this.model.allow_add_task ? boot_1.TK.view.enableTaskArea() : boot_1.TK.view.disableTaskArea()) : (boot_1.CS.view.disableChatArea(), this.disabled_send = !0);
                                        break;
                                    case "readonly":
                                        this.model.allow_see_member && ($C("#_to").show(), $C("#_subRoomMemberArea").show(), setLiveCallBtn("groupCall")), boot_1.TK.view.disableTaskArea(), boot_1.CS.view.disableChatArea(), boot_1.FL.view.disableFileArea(), this.disabled_send = !0
                                }
                                var join_link = this.model.getJoinLink();
                                join_link && ($C("#_subRoomJoinLink").attr("href", join_link), $C("#_subRoomJoinLinkArea").show());
                                break;
                            case "contact":
                                boot_1.RS.view.showSetting(), $C("#_subEditRoomInfo").show(), $C("#_subRoomProfileLinkArea").show(), boot_1.CS.view.enableChatArea(), boot_1.TK.view.enableTaskArea(), boot_1.FL.view.enableFileArea(), this.disabled_send = !1;
                                var account_id = 0;
                                for (var aid in this.model.member_dat) boot_1.AC.myid != aid && (account_id = aid);
                                account_id && $C("#_subRoomProfileLink").attr("data-aid", account_id), $C("#_to").show(), setLiveCallBtn("directCall", account_id);
                                break;
                            case "my":
                                $C("#_subEditRoomInfo").show(), boot_1.CS.view.enableChatArea(), boot_1.TK.view.enableTaskArea(), boot_1.FL.view.enableFileArea(), this.disabled_send = !1
                        }
                        boot_1.RS.view.buildMember(this.model.id)
                    },
                    prepareRequestDialog: function() {
                        var room_req_list = $("#_roomRequestList");
                        room_request_dialog = $("#_roomRequestDialog").cwDialog({
                            title: L.room_request_title,
                            width: 600,
                            buttonLabels: [L.button_cancel],
                            buttonCancel: 0,
                            open: function(room_id) {
                                var html_request = "";
                                room_req_list.empty(), this.data.room_id = room_id;
                                var member_list = boot_1.RL.rooms[room_id].member_request;
                                if (member_list.length > 0) {
                                    for (var i = 0, len = member_list.length; i < len; i++) {
                                        var member_dat = member_list[i],
                                            avatar_panel = boot_1.CW.getAvatarPanel(member_dat.aid, {
                                                hovertip: !1,
                                                clicktip: !1,
                                                size: "medium"
                                            }),
                                            applicant = common_1.escape_html(member_dat.nm);
                                        html_request += '<tr class="_roomRequestRow"><td>' + avatar_panel + ' </td><td class="name"><span class="autotrim">' + applicant + "</span></td>" + ('<td><div class="_roomRequestAccept button btnPrimary">' + L.button_accept_long + "</div>") + (" ( " + L.role + ":" + $.cwSelectBox.create([{
                                            value: "admin",
                                            label: L.admin
                                        }, {
                                            value: "member",
                                            label: L.member
                                        }, {
                                            value: "readonly",
                                            label: L.readonly
                                        }], "", "member", {
                                            class: "_roomRoleSelect"
                                        }) + " )") + "</td><td>" + ('<div class="_roomRequestReject button buttonGray">' + L.button_reject_long + "</div>") + '</td><td style="display:none;">' + ('<input type="hidden" value="' + member_dat.aid + '" class="_roomRequestAid" />') + "</td></tr>"
                                    }
                                    room_req_list.html(html_request)
                                }
                            },
                            postOpen: function() {
                                if (!this.dialog_resized) {
                                    this.dialog_resized = !0;
                                    var select_box = room_req_list.find("._roomRequestRow:last .selectboxContent"),
                                        select_box_height = select_box.height();
                                    select_box_height += parseInt(select_box.css("padding-top"), 10), select_box_height += parseInt(select_box.css("padding-bottom"), 10), select_box_height += parseInt(select_box.css("border-top-width"), 10), select_box_height += parseInt(select_box.css("border-bottom-width"), 10);
                                    var max_height = room_request_dialog.getMaxHeight(),
                                        dialog = room_req_list.parents("#_roomRequestDialog"),
                                        dialog_content = dialog.parent(".dialogContent"),
                                        dialog_content_height = dialog_content.height();
                                    dialog_content_height += parseInt(dialog_content.css("border-top-width"), 10), dialog_content_height += parseInt(dialog_content.css("border-bottom-width"), 10);
                                    var dialog_height_diff = max_height - dialog_content_height;
                                    dialog_height_diff > select_box_height && (dialog_height_diff = select_box_height);
                                    var room_request = dialog.children(".roomRequest"),
                                        room_request_height = room_request.height(),
                                        room_request_max = parseInt(room_request.css("max-height"), 10),
                                        room_request_diff = room_request_max - room_request_height;
                                    dialog_height_diff > room_request_diff && (dialog_height_diff = room_request_diff), dialog_content.height(dialog_content_height + dialog_height_diff);
                                    var dialog_content_margin = parseInt(dialog_content.css("margin-top"), 10);
                                    dialog_content.css("margin-top", dialog_content_margin - dialog_height_diff / 2 + "px"), dialog.height(dialog.height() + dialog_height_diff), room_request.height(room_request.height() + dialog_height_diff);
                                    var overflow = room_request.children("._overflow");
                                    overflow.css("padding-bottom", select_box_height + "px")
                                }
                            }
                        });
                        var update_room_request = function(idx, approval) {
                            var row = room_req_list.find("tr").eq(idx),
                                role_box = row.find("._roomRoleSelect");
                            row.find("button").button("disable"), role_box.prop("disabled", !0);
                            var aid = row.find("._roomRequestAid").val(),
                                role = role_box.cwSelectBox().getVal(),
                                param = {
                                    rid: room_request_dialog.data.room_id,
                                    aid: aid,
                                    role: role
                                };
                            approval ? param.cmd = "accept_join_room" : param.cmd = "reject_join_room", boot_1.CW.post("gateway.php", param, function(json) {
                                json.error ? (void 0 != json.message && boot_1.CW.alert(json.message), row.find("button").button("enable"), role_box.prop("disabled", !1)) : (row.fadeOut(function() {
                                    room_req_list.find("tr:visible").length || room_request_dialog.close()
                                }), boot_1.CW.watch())
                            })
                        };
                        room_req_list.on("click", "._roomRequestAccept", function() {
                            var idx = room_req_list.find("._roomRequestAccept").index(this);
                            update_room_request(idx, !0)
                        }).on("click", "._roomRequestReject", function() {
                            var idx = room_req_list.find("._roomRequestReject").index(this);
                            update_room_request(idx, !1)
                        })
                    },
                    showRequestDialog: function() {
                        room_request_dialog || this.prepareRequestDialog(), room_request_dialog.open(this.model.id)
                    },
                    bindBeforeUnload: function() {
                        $(window).bind("beforeunload", function() {
                            boot_1.CW.view.setDrafts()
                        })
                    },
                    restoreChatDrat: function(draft) {
                        draft.text && (boot_1.CS.view.setChatText(draft.text), draft.edit_id && boot_1.CS.setChatEdit(draft.edit_id, self.model))
                    },
                    restoreTaskDraft: function(draft) {
                        draft.task_name && boot_1.RS.view.setTask(draft.task_name, draft.assign_list, draft.limit_date)
                    }
                }
            }()
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../lib/messageTextarea": 111
        }
    ],
    141: [
        function(require, module, exports) {
            "use strict";

            function SearchView(model) {
                var self = this;
                self.model = model, self.msg_dat = [], self.ms_result_timeline_list = [], self.ms_result_byroom_dat = {}, self.ms_result_byroom_idx_list = [], self.ms_result_byuser_dat = {}, self.ms_result_byuser_idx_list = [], self.ms_result_type = "timeline", self.ms_result_timeline_order = "new", self.ms_result_not_found = !1, self.search_type = "chat", self.prepare = function() {
                    self.prepareGlobalSearch(), $("#_messageSearch").click(function() {
                        self.openMessageSearchWindow(), self.executeSearchMessage($C("#_search").val()), search_query_error || $C("#_messageSearchQuery").focus().caretPos("last")
                    })
                };
                var search_focus_idx = 0;
                self.prepareGlobalSearch = function() {
                    boot_1.CW.view.registerKeyboardShortcut(70, !1, !1, !1, !1, function() {
                        $C("#_search").focus()
                    });
                    var result = $("#_searchResult"),
                        result_showed = !1,
                        search = $("#_search").cwSearchBox({
                            update: function() {
                                refresh_result()
                            }
                        }),
                        move_up = function() {
                            var room_list = $C("#_searchResultChatList").find("._room"),
                                room_length = room_list.length;
                            if (0 == room_length) return void(search_focus_idx = 0);
                            if (room_list.removeClass("searchResultChatListFocus"), search_focus_idx--, search_focus_idx < 0 && (search_focus_idx = 0), search_focus_idx > 0) {
                                var focus = $(room_list[search_focus_idx - 1]);
                                focus.addClass("searchResultChatListFocus");
                                var search_box_top = $("#_searchResultChatList").offset().top,
                                    focus_top_pos = focus.offset().top;
                                focus_top_pos < search_box_top && $C("#_searchResultChatList").scrollTo(focus)
                            }
                        }, move_down = function() {
                            var room_list = $C("#_searchResultChatList").find("._room"),
                                room_length = room_list.length;
                            if (0 == room_length) return void(search_focus_idx = 0);
                            room_list.removeClass("searchResultChatListFocus"), search_focus_idx++, room_length < search_focus_idx && (search_focus_idx = room_length);
                            var focus = $(room_list[search_focus_idx - 1]);
                            focus.addClass("searchResultChatListFocus");
                            var search_button_top = $("#_messageSearch").offset().top,
                                focus_bottom_pos = focus.offset().top + focus.height();
                            focus_bottom_pos > search_button_top && $C("#_searchResultChatList").scrollTo(focus)
                        };
                    $C("#_search").keydown(function(e) {
                        var press_key = e.keyCode,
                            show_result = !0;
                        switch (press_key) {
                            case 13:
                                if (show_result = !1, search_focus_idx > 0) {
                                    var room_list = $C("#_searchResultChatList").find("._room");
                                    $(room_list[search_focus_idx - 1]).click()
                                } else $C("#_messageSearch").click();
                                break;
                            case 38:
                                move_up();
                                break;
                            case 40:
                                move_down();
                                break;
                            case 27:
                                search_focus_idx = 0, show_result = !1
                        }
                        show_result ? refresh_result() : ($(this).blur(), $.cwFloatBox.close())
                    }).click(function() {
                        $.cwFloatBox.skip(result)
                    }).focus(function() {
                        refresh_result()
                    }).blur(function() {
                        search_focus_idx = 0
                    }).keyup(function(e) {
                        13 === e.keyCode && refresh_result(!0)
                    });
                    var latest_word = "",
                        refresh_result = function(force_show) {
                            var word = search.getVal();
                            word.length > 0 || force_show ? (latest_word != word && self.buildResult(word), latest_word = word, result_showed || ($C("#_searchResultChatList").find("._room").removeClass("searchResultChatListFocus"), $.cwFloatBox.close(), $.cwFloatBox.open(result, function() {
                                result_showed = !1, search_focus_idx = 0
                            }), result_showed = !0, $C("#_searchResultChatList").scrollTop(0))) : $.cwFloatBox.close()
                        };
                    $C("#_searchResultChatList").on("click", "li._room", function() {
                        $.cwFloatBox.close()
                    })
                };
                var search_groupby = null,
                    search_expand = null,
                    search_query_error = !1,
                    messagesearch_window = null;
                self.prepareMessageSearch = function() {
                    function isDoubleClick(button) {
                        return button.data("_searchMessage_doubleClick")
                    }

                    function disableDoubleClick(button) {
                        button.data("_searchMessage_doubleClick", setTimeout(function() {
                            button.removeData("_searchMessage_doubleClick")
                        }, 3e3))
                    }

                    function removeDoubleClick(button) {
                        button.removeData("_searchMessage_doubleClick")
                    }
                    messagesearch_window = $("#_messageSearchContent").cwFloatWindow({
                        title: L.search_title,
                        open: function() {
                            $C("#_messageSearchExceptWord").val(""), speaker_tip.clear(), $C("#_messageSearchTerm").cwSelectBox().select("all"), $C("#_messageSearchDateFrom").val(""), $C("#_messageSearchDateTo").val(""), $C("#_messageSearchOptionArea").hide(), $C("#_messageSearchOption ._iconRotate").removeClass("rotate180")
                        }
                    }), $("#_messageSearchOption").click(function() {
                        var area = $C("#_messageSearchOptionArea");
                        area.isVisible() ? (boot_1.AL.trackEvent("message_search", "click", {
                            label: "message_search_option"
                        }), area.slideUp("fast", function() {
                            messagesearch_window.resize()
                        }), $C("#_messageSearchOption ._iconRotate").removeClass("rotate180")) : (area.slideDown("fast", function() {
                            messagesearch_window.resize()
                        }), $C("#_messageSearchOption ._iconRotate").addClass("rotate180"))
                    });
                    var speaker_tip = $("#_speakerTip").cwListTip({
                        search: !0,
                        multiSelect: !0,
                        useHtmlLabel: !0,
                        placeHolder: L.chatroom_search_member,
                        list: function() {
                            var speaker_list = [],
                                mem_list = boot_1.AC.getSortedMemberList();
                            mem_list.unshift(boot_1.AC.myid);
                            for (var mem_length = mem_list.length, i = 0; i < mem_length; i++) {
                                var account_id = mem_list[i],
                                    name = boot_1.AC.getName(account_id);
                                speaker_list.push({
                                    keys: boot_1.AC.getSearchKeys(account_id),
                                    value: account_id,
                                    label: boot_1.CW.getAvatarPanel(account_id, {
                                        clicktip: !1,
                                        size: "small"
                                    }) + '<p class="autotrim">' + common_1.escape_html(name) + "</p>"
                                })
                            }
                            return speaker_list
                        },
                        update: function() {
                            for (var speaker_list = this.getVal(), value = "", speaker_length = speaker_list.length, i = 0; i < speaker_length; i++) {
                                var aid = speaker_list[i];
                                value += '<span class="assignContent assignMember"><span class="_taskAssignMemberLabel assignContentText" data-aid="' + aid + '">' + boot_1.CW.getName(aid) + '</span><span class="_taskAssignCancel assignContentCancel" data-aid="' + aid + '"><span class="icoFontCancel"></span><span class="icoTextHide">' + L.button_delete + "</span></span></span>"
                            }
                            $("#_messageSearchSpeakerBox").html(value)
                        }
                    });
                    $("#_messageSearchSpeaker").click(function() {
                        speaker_tip.open($(this))
                    }), $("#_messageSearchSpeakerBox").on("click", "._taskAssignCancel", function() {
                        var aid = $(this).attr("data-aid");
                        speaker_tip.select(aid)
                    }).on("mouseover", "._taskAssignMemberLabel", function() {
                        var label = $(this),
                            aid = label.attr("data-aid");
                        $.cwMessageTip.isInit(label[0]) || label.cwMessageTip({
                            message: function() {
                                return boot_1.AC.getName(aid)
                            }
                        }).open()
                    }).on("click", "._taskAssignMemberLabel", function() {
                        return $("#_messageSearchSpeaker").click(), !1
                    });
                    var press_key = 0,
                        query = $("#_messageSearchQuery");
                    query.keydown(function(e) {
                        press_key = e.keyCode
                    }).keyup(function(e) {
                        press_key == e.keyCode && 13 == e.keyCode && ($C("#_messageSearchSend").click(), $.cwFloatBox.close())
                    }), $C("#_messageSearchSend").click(function() {
                        var q = $C("#_messageSearchQuery").cwSearchBox().getVal(),
                            $this = $(this);
                        if (!isDoubleClick($this)) {
                            disableDoubleClick($this), boot_1.SC.cancelSearch(), $C("#_messageSearchLoading").hide(), $C("#_messageSearchResult").empty();
                            var opt = {};
                            if (opt.q = q, $("#_messageSearchOptionArea").isVisible())
                                if (opt.exq = $C("#_messageSearchExceptWord").val(), opt.aid = speaker_tip.getVal(), opt.term = $("#_messageSearchTerm").cwSelectBox().getVal(), "specify" == opt.term) {
                                    var date_from = $C("#_messageSearchDateFrom").val(),
                                        date_to = $C("#_messageSearchDateTo").val();
                                    "" != date_from && (opt.term_from = common_1.strtotime_format(date_from, boot_1.ST.data.dateformat)), "" != date_to && (opt.term_to = common_1.strtotime_format(date_to, boot_1.ST.data.dateformat))
                                } else if ("all" != opt.term) {
                                var today_time = common_1.strtotime_format(boot_1.CW.getDate(common_1.time(), "Y-m-d"), "Y-m-d");
                                opt.term_from = today_time - 3600 * parseInt(opt.term, 10) * 24, opt.term_to = today_time
                            }
                            $C("#_messageSearchResultHead").hide(), $C("#_messageSearchLoading").show(), boot_1.SC.search(opt, function(msg_dat) {
                                removeDoubleClick($this), self.msg_dat = msg_dat, self.ms_result_timeline_list = [], self.ms_result_byroom_dat = {}, self.ms_result_byroom_idx_list = [], self.ms_result_byuser_dat = {}, self.ms_result_byuser_idx_list = [];
                                for (var i in self.msg_dat) self.ms_result_timeline_list.push(parseInt(self.msg_dat[i].id, 10));
                                self.ms_result_timeline_list.sort(function(a, b) {
                                    return b - a
                                });
                                for (var i = 0, tl_len = self.ms_result_timeline_list.length; i < tl_len; i++) {
                                    var chat_dat = self.msg_dat[self.ms_result_timeline_list[i]];
                                    void 0 == self.ms_result_byroom_dat[chat_dat.rid] && (self.ms_result_byroom_idx_list.push(chat_dat.rid), self.ms_result_byroom_dat[chat_dat.rid] = []), self.ms_result_byroom_dat[chat_dat.rid].push(chat_dat.id), void 0 == self.ms_result_byuser_dat[chat_dat.aid] && (self.ms_result_byuser_idx_list.push(chat_dat.aid), self.ms_result_byuser_dat[chat_dat.aid] = []), self.ms_result_byuser_dat[chat_dat.aid].push(chat_dat.id)
                                }
                                0 == self.ms_result_timeline_list.length ? self.ms_result_not_found = !0 : self.ms_result_not_found = !1, $C("#_messageSearchLoading").hide(), self.buildMSResult()
                            }, function() {
                                removeDoubleClick($this), boot_1.CW.alert(L.chat_server_error_try_again), $C("#_messageSearchLoading").hide()
                            })
                        }
                    }), $C("#_messageSearchTerm").cwSelectBox({
                        update: function() {
                            "specify" == this.getVal() ? $C("#_messageSearchTerm_specify").show() : $C("#_messageSearchTerm_specify").hide()
                        }
                    }), $C("#_messageSearchDateFrom").val(""), $C("#_messageSearchDateTo").val(""), $C("#_messageSearchResult").on("click", "._messageSearchChatGroup", function() {
                        var group_header = $(this),
                            room_id = group_header.attr("data-gid"),
                            content = $("#_searchResultGroupId" + room_id),
                            arrow_object = group_header.find("._messageSearchArrow");
                        content.isVisible() ? (content.slideUp("normal"), group_header.removeClass("_messageSearchOpen"), arrow_object.removeClass("rotate180")) : (content.slideDown("normal"), group_header.addClass("_messageSearchOpen"), arrow_object.addClass("rotate180"))
                    }), search_expand = $("#_messageSearchExpand").cwButtonBar({
                        update: function(idx) {
                            switch (idx) {
                                case 0:
                                    $C("#_messageSearchResult").find("._messageSearchChatGroup").each(function() {
                                        var group_header = $(this);
                                        group_header.hasClass("_messageSearchOpen") || group_header.click()
                                    });
                                    break;
                                case 1:
                                    $C("#_messageSearchResult").find("._messageSearchChatGroup").each(function() {
                                        var group_header = $(this);
                                        group_header.hasClass("_messageSearchOpen") && group_header.click()
                                    })
                            }
                        }
                    }), search_groupby = $("#_messageSearchGrouping").cwTabbedBar({
                        update: function(idx) {
                            switch (idx) {
                                case 0:
                                    self.ms_result_type = "timeline";
                                    break;
                                case 1:
                                    self.ms_result_type = "byroom";
                                    break;
                                case 2:
                                    self.ms_result_type = "byuser"
                            }
                            self.buildMSResult()
                        }
                    })
                }, self.openMessageSearchWindow = function() {
                    messagesearch_window || self.prepareMessageSearch(), boot_1.AL.trackEvent("message_search", "open", {
                        label: "message_search_window"
                    }), messagesearch_window.open()
                }, self.closeMessageSearchWindow = function() {
                    messagesearch_window.isOpen() && messagesearch_window.close()
                }, self.buildSpeaker = function() {}, self.buildMSResult = function() {
                    if (messagesearch_window.isOpen()) {
                        var q = $C("#_messageSearchQuery").cwSearchBox().getVal();
                        if ($C("#_messageSearchOverflow").hide(), self.ms_result_timeline_list.length > 0) {
                            var html = "",
                                last_group_id = 0,
                                order_list = [];
                            switch (search_groupby.enableButtonAll(), self.ms_result_type) {
                                case "byroom":
                                    search_expand.enableButtonAll();
                                    for (var i = 0, idx_len = self.ms_result_byroom_idx_list.length; i < idx_len; i++)
                                        for (var rid = self.ms_result_byroom_idx_list[i], j = 0, dat_len = self.ms_result_byroom_dat[rid].length; j < dat_len; j++) order_list.push(self.ms_result_byroom_dat[rid][j]);
                                    break;
                                case "byuser":
                                    search_expand.enableButtonAll();
                                    for (var i = 0, idx_len = self.ms_result_byuser_idx_list.length; i < idx_len; i++)
                                        for (var aid = self.ms_result_byuser_idx_list[i], j = 0, dat_len = self.ms_result_byuser_dat[aid].length; j < dat_len; j++) order_list.push(self.ms_result_byuser_dat[aid][j]);
                                    break;
                                default:
                                    search_expand.disableButtonAll(), order_list = self.ms_result_timeline_list
                            }
                            for (var result_num = order_list.length, moption = {
                                    idPrefix: "_search"
                                }, i = 0; i < result_num; i++) {
                                var chat_dat = self.msg_dat[order_list[i]];
                                switch (self.ms_result_type) {
                                    case "byroom":
                                        last_group_id != chat_dat.rid && (last_group_id = chat_dat.rid, i > 0 && (html += "</div>"), html += '<div class="searchResultTitle _messageSearchChatGroup" data-gid="' + chat_dat.rid + '">' + boot_1.RL.rooms[chat_dat.rid].getIcon() + " " + common_1.escape_html(boot_1.RL.rooms[chat_dat.rid].getName()) + " <span>(" + self.ms_result_byroom_dat[chat_dat.rid].length.toLocaleString() + L.search_result_unit + ')</span><span class="_messageSearchArrow transitionAll03sLinear icoFontTriangleDown"></span></div><div id="_searchResultGroupId' + chat_dat.rid + '" style="display:none">');
                                        break;
                                    case "byuser":
                                        last_group_id != chat_dat.aid && (last_group_id = chat_dat.aid, i > 0 && (html += "</div>"), html += '<div class="searchResultTitle _messageSearchChatGroup" data-gid="' + chat_dat.aid + '">' + boot_1.CW.getAvatarPanel(chat_dat.aid, {
                                            clicktip: !1,
                                            hovertip: !1,
                                            size: "small"
                                        }) + " " + boot_1.CW.getName(chat_dat.aid) + " <span>(" + self.ms_result_byuser_dat[chat_dat.aid].length.toLocaleString() + L.search_result_unit + ')</span><span class="_messageSearchArrow transitionAll03sLinear icoFontTriangleDown"></span></div><div id="_searchResultGroupId' + chat_dat.aid + '" style="display:none">')
                                }
                                0 === i ? moption.topView = !0 : moption.topView = !1, html += TimeLineView_1.TimeLineView.prototype.getMessagePanel(chat_dat, moption)
                            }
                            switch (self.ms_result_type) {
                                case "byroom":
                                    result_num > 0 && (html += "</div>");
                                    break;
                                case "byuser":
                                    result_num > 0 && (html += "</div>")
                            }
                            $C("#_messageSearchResultHead").show(), $C("#_messageSearchResultNum").text(order_list.length.toLocaleString()), order_list.length == SEARCH_MAX_RESULTS && $C("#_messageSearchOverflow").show(), $C("#_messageSearchResult").html(html);
                            var splitted_q = q.replace(/\u3000|,|、|・/g, " ").split(" ");
                            for (var i in splitted_q) {
                                var word = splitted_q[i];
                                "+" == word.charAt(0) && (word = word.substr(1)), word = word.trim(), word.length > 0 && $("#_messageSearchResult pre").markText(word, "searchEm")
                            }
                        } else search_groupby.disableButtonAll(), search_expand.disableButtonAll(), $C("#_messageSearchResultNum").text("0"), self.ms_result_not_found ? ($C("#_messageSearchResultHead").show(), $C("#_messageSearchResult").html('<div class="searchNotFound alert alertWarning">' + L.search_result_not_found.replace("%%keyword%%", common_1.escape_html(q)) + "</div>")) : ($C("#_messageSearchResultHead").show(), $C("#_messageSearchResult").quickEmpty());
                        messagesearch_window.resize()
                    }
                }, self.room_show_limit = 50, self.buildResult = function(search_word) {
                    if (void 0 == search_word || "" == search_word) return $C("#_searchResultChatList").quickEmpty(), $C("#_messageSearchHint").text(""), void $C("#_messageSearchIcon").hide();
                    $C("#_messageSearchHint").text(L.search_suggest.replace(/%%keyword%%/, search_word)), $C("#_messageSearchIcon").show();
                    var room_list = boot_1.RL.getSortedRoomList(),
                        html = "",
                        room = null,
                        room_num = room_list.length;
                    if (!room_num) return void $C("#_searchResultChatList").quickEmpty();
                    var search_word_list = [];
                    search_word_list = boot_1.CW.splitWithSpace(search_word.toLowerCase());
                    for (var show_room_count = 0, idx = 0; idx < room_num; idx++)
                        if (void 0 != room_list[idx]) {
                            var room_id = room_list[idx];
                            if (room = boot_1.RL.rooms[room_id], "contact" == self.search_type && "contact" != room.type) continue;
                            if ("contact" == room.type) {
                                if (!boot_1.AC.isMatchedWithKeyList(search_word_list, room.getAccountId())) continue
                            } else if (!boot_1.CW.isMatchedWithKeyList(search_word_list, room.getName())) continue;
                            if (html += boot_1.RL.view.getRoomItemPanel(room_id, {
                                showOrg: !0,
                                showPin: !1,
                                showSelected: !1,
                                showRequest: !1,
                                noTrim: !0
                            }), show_room_count++, show_room_count >= self.room_show_limit) break
                        }
                    $C("#_searchResultChatList").html(html).find("p").markText(search_word, "searchEm")
                }, self.executeSearchMessage = function(search_word) {
                    $C("#_messageSearchQuery").cwSearchBox().setVal(search_word), $C("#_messageSearchSend").click()
                }
            }
            var TimeLineView_1 = require("./TimeLineView"),
                common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.SearchView = SearchView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "./TimeLineView": 145
        }
    ],
    142: [
        function(require, module, exports) {
            "use strict";

            function SettingView(model) {
                var self = this;
                self.is_valid_cwid = !1, self.model = model, self.total_progress_per = 0, self.stepguide_progress = {}, self.debug_view_profile_aid = 0, self.view_profile_aid = 0, model.sound_default = "Kalimba", self.supported_dateformat = {
                    default: ["m/d/Y", "d/m/Y", "Y/m/d", "m-d-Y", "d-m-Y", "Y-m-d", "m.d.Y", "d.m.Y", "Y.m.d", "m/d-Y"],
                    ja: ["Y年m月d日"],
                    "zh-cn": ["Y年m月d日"]
                }, self.checkbox_dat = {
                    _popupSound: "popup_sound",
                    _notifierShow: "desktop_alert",
                    _notifierMessage: "notifier_message",
                    _notifierOnlyto: "notifier_onlyto",
                    _faviconstat: "faviconstat",
                    _showDelmessage: "show_delmessage",
                    _showExternal: "show_external",
                    _privateNickname: "private_nickname",
                    _shortenUrl: "shorten_url"
                }, self.selectbox_dat = {
                    _notifierDuration: "notifier_duration",
                    _soundVolume: "sound_volume",
                    _soundType: "sound_type",
                    _notifyTerm: "notify_term",
                    _langType: null,
                    _langDateformat: null
                };
                var setting_dialog, welcome_dialog, api_token_panel, audio_list = [{
                        name: "mallet",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "ashvoice",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "agogo",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "chime",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "cowbell",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "cuica",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "drip",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "kiai",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "marimba",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "percussimba",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "steampipe",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "whistle",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "8-bit",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Ac_Guitar02",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Brass",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Crisis01",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Crisis02",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Cymbal",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Dora",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Sitar",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Tambourine",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Conga_c",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "EP_c",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "EP_d",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Piano_c",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Piano_d",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Piano_e",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Kalimba_c",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Kalimba_d",
                        data: {
                            is_multi: !1
                        }
                    }, {
                        name: "Ac_Guitar",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Conga02",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Conga",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Crap",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "EP02",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "EP",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "GuitarCutting",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Kalimba",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Piano",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Shooting",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "Snare",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "SynthBell02",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "SynthBell03",
                        data: {
                            is_multi: !0
                        }
                    }, {
                        name: "SynthBell",
                        data: {
                            is_multi: !0
                        }
                    }],
                    plot_user_setting = function() {
                        self.is_valid_cwid = !0;
                        var checkbox_dat = self.checkbox_dat;
                        for (var id in checkbox_dat) {
                            var param = checkbox_dat[id],
                                checkbox = $("#" + id);
                            1 == self.model.data[param] ? checkbox.cwCheckBox().check() : checkbox.cwCheckBox().unCheck()
                        }
                        var selectbox_dat = self.selectbox_dat;
                        for (var id in selectbox_dat) {
                            var param = selectbox_dat[id],
                                selectbox = $("#" + id),
                                cw_select_box_obj = selectbox.cwSelectBox({
                                    parentFloatBox: setting_dialog
                                });
                            if (null !== param && "undefined" != typeof self.model.data[param]) {
                                var select_box_value = self.model.data[param];
                                cw_select_box_obj.findItemByValue(select_box_value) && cw_select_box_obj.select(select_box_value)
                            }
                        }
                        if ($("#_langType").cwSelectBox().select(LANGUAGE), $("#_langDateformat").cwSelectBox().select(boot_1.ST.data.dateformat), $("#_soundVolume").cwSelectBox().select(boot_1.ST.data.sound_volume), !boot_1.CW.is_business) {
                            var check_show_external = $("#_showExternal");
                            check_show_external.parent().find("label").css("color", "#888"), check_show_external.cwCheckBox().disable();
                            var check_private_nickname = $("#_privateNickname");
                            check_private_nickname.parent().find("label").css("color", "#888"), check_private_nickname.cwCheckBox().disable()
                        }
                        self.changeNotificationSettingStatus(), self.changePopupSoundSettingStatus()
                    };
                self.isMultiSound = function(audio_name) {
                    var i, len = audio_list.length,
                        is_multi = !1;
                    for (i = 0; i < len; i++) {
                        var audio_dat = audio_list[i];
                        if (audio_dat.name === audio_name) {
                            is_multi = audio_dat.data.is_multi;
                            break
                        }
                    }
                    return is_multi
                }, self.prepareSetting = function() {
                    var chat_setting = $("#_chatSetting"),
                        setting_tab_list = chat_setting.find(".floatHeaderTab").find("li");
                    if (common_1.NotificationAPI) {
                        var ua = window.navigator.userAgent.toLowerCase();
                        ua.indexOf("chrome") === -1 && $("#_notifierDurationBox").hide(), $("#_notifierNotSupported").hide(), $("#_notifierSupported").show()
                    } else $("#_notifierNotSupported").show(), $("#_notifierSupported").hide();
                    var submit_setting = function() {
                        var lang = $("#_langType").cwSelectBox().getVal(),
                            dateformat = $("#_langDateformat").cwSelectBox().getVal(),
                            param_dat = {
                                cmd: "send_setting"
                            }, data = {};
                        boot_1.CW.showProgress(L.saving);
                        var checkbox_dat = self.checkbox_dat;
                        for (var id in checkbox_dat) {
                            var param = checkbox_dat[id],
                                checkbox = $("#" + id),
                                cw_checkbox = checkbox.cwCheckBox();
                            cw_checkbox.isChecked() ? data[param] = "1" : data[param] = "0"
                        }
                        var selectbox_dat = self.selectbox_dat;
                        for (var id in selectbox_dat) {
                            var param = selectbox_dat[id],
                                selectbox = $("#" + id);
                            data[param] = selectbox.cwSelectBox().getVal()
                        }
                        if ("undefined" != typeof data.notify_term && (data.ai_notify_term = data.notify_term), lang != LANGUAGE || boot_1.ST.data.dateformat != dateformat) {
                            var language_setting = {};
                            language_setting.lang = lang, language_setting.dateformat = dateformat, param_dat.language = language_setting
                        }
                        param_dat.data = data, boot_1.CW.post("gateway.php", param_dat, function(response) {
                            if (response.setting_data && boot_1.ST.updateSetting(response.setting_data), response.lang) {
                                var bf_ok = L.button_ok,
                                    bf_cancel = L.button_cancel;
                                L.button_ok = L["lang_" + response.lang + "_button_ok"], L.button_cancel = L["lang_" + response.lang + "_button_cancel"], boot_1.CW.confirm(L["lang_" + response.lang + "_change_confirm"], function() {
                                    document.location.href = "./"
                                }), L.button_ok = bf_ok, L.button_cancel = bf_cancel
                            }
                            boot_1.CW.hideProgress(), setting_dialog.close(), boot_1.CW.watch()
                        })
                    };
                    setting_dialog = chat_setting.cwDialog({
                        width: 700,
                        height: "auto",
                        title: L.menu_personal_setting,
                        open: function() {
                            setting_tab_list.eq(0).click(), plot_user_setting()
                        },
                        buttonLabels: [L.button_save_long, L.button_cancel],
                        buttonSubmit: 0,
                        buttonCancel: 1,
                        buttonClick: function(idx) {
                            0 === idx && submit_setting()
                        }
                    });
                    var contents_list = setting_dialog.$el.find("._cwSettingContents");
                    setting_tab_list.click(function() {
                        api_token_panel && api_token_panel.isActive() && api_token_panel.close();
                        var select_class = "floatTabSelect",
                            idx = setting_tab_list.index(this),
                            contents = contents_list.eq(idx);
                        setting_tab_list.removeClass(select_class), $(this).addClass(select_class), contents_list.hide(), contents.show()
                    }), $("#_langType").cwSelectBox().setOption({
                        update: function() {
                            for (var lang_date_format = $("#_langDateformat"), lang = $("#_langType").cwSelectBox().getVal(), supported_dateformat = self.supported_dateformat, dateformat_list = (supported_dateformat[lang] || []).concat(supported_dateformat.
                                    default), option_list = [], i = 0, len = dateformat_list.length; i < len; i++) option_list.push({
                                label: boot_1.CW.getDate(new Date((new Date).getFullYear(), 11, 31).getTime() / 1e3, dateformat_list[i]),
                                value: dateformat_list[i]
                            });
                            lang_date_format.cwSelectBox().setList(option_list).select(option_list[0].value)
                        }
                    })
                }, self.openSettingDialog = function() {
                    setting_dialog || self.prepareSetting(), setting_dialog.open()
                }, self.prepare = function() {
                    $("#_setting").click(function() {
                        self.openSettingDialog()
                    }), $("#_soundPlay").click(function() {
                        return boot_1.audioObjSupport ? boot_1.CW.playSound($("#_soundType").cwSelectBox().getVal(), $("#_soundVolume").cwSelectBox().getVal()) : boot_1.CW.alert(L.sound_no_support), !1
                    });
                    var notifier_checkbox = $("#_notifierShow").cwCheckBox();
                    notifier_checkbox.$el.click(function(e) {
                        return e.preventDefault(), self.requestNotificationPermission(function(permission) {
                            permission && (notifier_checkbox.toggle(), self.changeNotificationSettingStatus())
                        }), !1
                    }), notifier_checkbox.$el.next("label").click(function(e) {
                        return e.preventDefault(), notifier_checkbox.$el.click(), !1
                    });
                    var popup_sound_master = $("#_popupSound").cwCheckBox();
                    popup_sound_master.$el.click(function(e) {
                        return e.preventDefault(), popup_sound_master.toggle(), self.changePopupSoundSettingStatus(), !1
                    }), popup_sound_master.$el.next("label").click(function(e) {
                        return e.preventDefault(), popup_sound_master.$el.click(), !1
                    });
                    var mystatus_box = $("#_myStatusBox"),
                        mystatus_button = $("#_myStatusButton");
                    mystatus_button.hover(function() {
                        mystatus_button.hasClass("myStatusButtonSelected") || (mystatus_button.addClass("myStatusButtonHover"), mystatus_button.find(".icoSystem").addClass("icoFontTriangleDown"))
                    }, function() {
                        mystatus_button.removeClass("myStatusButtonHover"), mystatus_button.find(".icoSystem").removeClass("icoFontTriangleDown")
                    }), boot_1.CW.view.onEndInitLoad(function() {
                        "free" == boot_1.CW.plan ? $("#_upgradePlan").show().click(function() {
                            boot_1.CW.view.showServiceAdmin("upgrade")
                        }) : $("#_upgradePlan").hide(), boot_1.CW.is_admin ? $("#_openAdminMenu").show() : ($("#_openAdminMenu").hide(), boot_1.CW.is_admin_user && $C("#_userAdminMenu").show())
                    }), mystatus_button.click(function() {
                        if (!mystatus_box.isVisible()) {
                            mystatus_button.addClass("myStatusButtonSelected"), mystatus_button.removeClass("myStatusButtonHover");
                            var box_width = mystatus_button.outerWidth();
                            box_width < boot_1.TM.mymenu_min_width && (box_width = boot_1.TM.mymenu_min_width), mystatus_box.width(box_width), mystatus_box.slideDown("fast", function() {
                                $.cwFloatBox.open(mystatus_box, function() {
                                    mystatus_box.slideUp("fast", function() {
                                        mystatus_button.removeClass("myStatusButtonSelected")
                                    })
                                })
                            })
                        }
                    }).mousedown(function() {
                        return !1
                    }), mystatus_box.on("click", "li", function() {
                        $.cwFloatBox.close(mystatus_box)
                    }),
                    function() {
                        var password, input_pass = $("#_inputApiTokenPass"),
                            input_token = $("#_inputApiToken"),
                            pass_panel = $("#_settingApi"),
                            token_panel = $("#_settingApiAfter"),
                            regenerate_token_btn = $("#_regenerateTokenBtn"),
                            copy_token_btn = $("#_copyTokenBtn"),
                            events = {
                                getApiToken: function(params) {
                                    boot_1.CW.post("gateway.php", {
                                        cmd: "get_api_token",
                                        password: params.password,
                                        regenerate: params.regenerate ? 1 : 0
                                    }, function(response) {
                                        response.api_token && events.displayTokenPanel(response.api_token)
                                    }, function(response) {
                                        return response && response[0] ? boot_1.CW.alert(response[0]) : boot_1.CW.alert(L._chatwork_apitoken_invalid_password)
                                    })
                                },
                                displayPasswordPanel: function() {
                                    events.clear(), token_panel.hide(), pass_panel.show()
                                },
                                displayTokenPanel: function(token) {
                                    events.clear(), input_token.val(token), copy_token_btn.attr("data-clipboard-target", "#_inputApiToken"), pass_panel.hide(), token_panel.show()
                                },
                                clear: function() {
                                    input_pass.val(""), input_token.val("")
                                }
                            };
                        api_token_panel = {
                            init: function() {
                                pass_panel.find("._displayApiToken").click(function() {
                                    return password = input_pass.val(), 0 === password.length ? void boot_1.CW.alert(L._chatwork_apitoken_empty_password) : void events.getApiToken({
                                        password: password
                                    })
                                }), regenerate_token_btn.click(function() {
                                    boot_1.CW.confirm(L._chatwork_apitoken_confirm_regenerate, function() {
                                        events.getApiToken({
                                            password: password,
                                            regenerate: !0
                                        })
                                    })
                                }), new Clipboard("#_copyTokenBtn")
                            },
                            isActive: function() {
                                return pass_panel.is(":visible") || token_panel.is(":visible")
                            },
                            close: function() {
                                events.displayPasswordPanel()
                            }
                        }
                    }(), api_token_panel.init()
                };
                var show_userguide_welcome = !1,
                    first_setting = !0,
                    initializeStepGuide = function() {
                        return !welcome_dialog && void(show_userguide_welcome || self.model.data.userguide_welcome || (show_userguide_welcome = !0, setTimeout(function() {
                            self.openWelcomeDialog()
                        }, 500)))
                    };
                self.openWelcomeDialog = function(use_bob_phase1) {
                    var is_bob_phase1 = use_bob_phase1 || "ja" === LANGUAGE;
                    if (!welcome_dialog) {
                        var dose_play_tutorial = !0;
                        welcome_dialog = $("#_userguideWelcomeDialog").cwDialog({
                            closeOnEscape: !is_bob_phase1,
                            title: is_bob_phase1 ? void 0 : L.welcome_title.replace("%%service_name%%", SERVICE_NAME),
                            width: 820,
                            close: function() {
                                dose_play_tutorial && boot_1.CW.view.startTutorial(), boot_1.CW.post("gateway.php", {
                                    cmd: "send_chat_setting",
                                    data: {
                                        userguide_welcome: "1"
                                    }
                                })
                            }
                        }), $("#_userguideWelcomeOpen").click(function() {
                            welcome_dialog.close(), boot_1.AL.trackEvent("onboarding", "click", {
                                label: "onboarding_wel_s"
                            })
                        }), $("#_userguideSkipTutorial").click(function() {
                            dose_play_tutorial = !1, welcome_dialog.close(), boot_1.AL.trackEvent("onboarding", "click", {
                                label: "onboarding_wel_t"
                            })
                        })
                    }
                    welcome_dialog.open()
                }, self.refreshSoundStatus = function() {}, self.updateSetting = function() {
                    if (self.refreshNotificationStatus(), $.cwDatePicker.setDefaultOption({
                        dateFormat: boot_1.ST.data.dateformat
                    }), first_setting && ($("._datePicker").cwDatePicker(), boot_1.RS.view.prepareTask()), first_setting = !1, "send" == boot_1.ST.data.enter_action ? $C("#_sendEnterAction").cwCheckBox().check() : $C("#_sendEnterAction").cwCheckBox().unCheck(), boot_1.canPlayOgg || boot_1.canPlayMp3) {
                        var sound_type = self.model.data.sound_type;
                        $("#_audio_" + sound_type).length || boot_1.CW.view.embedAudio(sound_type)
                    }
                    initializeStepGuide()
                };
                var announce_id;
                self.updateAnnounce = function() {
                    if (self.model.announce_dat.id) {
                        var now = common_2.time(),
                            announce_dat = self.model.announce_dat,
                            from = parseInt(announce_dat.from, 10),
                            to = parseInt(announce_dat.to, 10);
                        if (from < now && now < to) return announce_dat = boot_1.ST.announce_dat, announce_id = boot_1.CW.view.saveInformation(announce_id, {
                            linktext: announce_dat.linktext,
                            subject: announce_dat.subject,
                            body: announce_dat.body,
                            buttonLabels: [L.announce_button_close],
                            buttonClick: function(idx) {
                                if (0 === idx) {
                                    var cwdialog = this;
                                    self.deleteAnnounce(announce_id, function() {
                                        self.model.closeAnnounce(), cwdialog.close()
                                    })
                                }
                            }
                        }), void boot_1.CW.view.renderInformation()
                    }
                    announce_id && self.deleteAnnounce(announce_id)
                }, self.deleteAnnounce = function(id, callback) {
                    id && (boot_1.CW.view.deleteInformation(id, callback), announce_id = void 0)
                }, self.changeNotificationSettingStatus = function() {
                    var notifier_checkbox = $("#_notifierShow").cwCheckBox(),
                        notifier_message = $("#_notifierMessage").cwCheckBox(),
                        notifier_only_to = $("#_notifierOnlyto").cwCheckBox(),
                        duration_select_box = $("#_notifierDuration").cwSelectBox(),
                        duration_box = $("#_notifierDurationBox");
                    notifier_checkbox.isChecked() ? (1 === self.model.data.notifier_message ? notifier_message.check(!0).enable() : notifier_message.unCheck(!0).enable(), 1 === self.model.data.notifier_onlyto ? notifier_only_to.check(!0).enable() : notifier_only_to.unCheck(!0).enable(), duration_select_box.enable(), duration_box.removeClass("disabled")) : (notifier_message.unCheck(!0).disable(), notifier_only_to.unCheck(!0).disable(), duration_select_box.close().disable(), duration_box.addClass("disabled"))
                }, self.changePopupSoundSettingStatus = function() {
                    var SETTING_ITEMS = [$("#_popupSoundType"), $("#_popupSoundVolume")],
                        SELECTBOXES = [$("#_soundType").cwSelectBox(), $("#_soundVolume").cwSelectBox()],
                        SOUND_PLAY_BUTTON = $("#_soundPlay"),
                        execute = function(setting_item_impl, selectbox_impl, button_state) {
                            SETTING_ITEMS.forEach(function(item) {
                                setting_item_impl(item)
                            }), SELECTBOXES.forEach(function(selectbox) {
                                selectbox_impl(selectbox)
                            }), SOUND_PLAY_BUTTON.prop("disabled", button_state)
                        }, can_set_popup_sound = $("#_popupSound").cwCheckBox().isChecked();
                    can_set_popup_sound ? execute(function(item) {
                        item.removeClass("disabled")
                    }, function(selectbox) {
                        selectbox.enable()
                    }, !1) : execute(function(item) {
                        item.addClass("disabled")
                    }, function(selectbox) {
                        selectbox.disable()
                    }, !0)
                }, self.toggleNotification = function(e) {
                    common_1.NotificationAPI ? 0 == common_1.NotificationAPI.checkPermission() ? ("0" == self.model.data.desktop_alert ? boot_1.ST.data.desktop_alert = "1" : boot_1.ST.data.desktop_alert = "0", self.refreshNotificationStatus(!0)) : (e.preventDefault(), common_1.NotificationAPI.requestPermission(function(permission) {
                        0 == permission ? boot_1.ST.data.desktop_alert = "1" : boot_1.ST.data.desktop_alert = "0", self.refreshNotificationStatus(!0)
                    })) : boot_1.CW.alert(L.desktopalert_no_support)
                }, self.requestNotificationPermission = function(callback) {
                    common_1.NotificationAPI ? common_1.NotificationAPI.requestPermission(function() {
                        callback(0 == common_1.NotificationAPI.checkPermission() ? !0 : !1)
                    }) : boot_1.CW.alert(L.desktopalert_no_support)
                }, self.refreshNotificationStatus = function(update) {
                    var active = !1;
                    update && boot_1.CW.post("gateway.php", {
                        cmd: "send_chat_setting",
                        data: {
                            desktop_alert: self.model.data.desktop_alert
                        }
                    }), "1" == self.model.data.desktop_alert && common_1.NotificationAPI && 0 == common_1.NotificationAPI.checkPermission() && (active = !0), active ? ($("#cw_notification_icon").removeClass("ui_sp_icon_footer_notification_off").addClass("ui_sp_icon_footer_notification_on").css("visibility", "visible"), $("#cw_notification").prop("title", L.menu_desktopalert + "(" + L.menu_current + "ON)"), boot_1.CW.enable_popup = !0) : ($("#cw_notification_icon").removeClass("ui_sp_icon_footer_notification_on").addClass("ui_sp_icon_footer_notification_off").css("visibility", "visible"), $("#cw_notification").prop("title", L.menu_desktopalert + "(" + L.menu_current + "OFF)"), boot_1.CW.enable_popup = !1)
                }, self.toggleSound = function() {
                    boot_1.audioObjSupport ? "0" == self.model.data.popup_sound ? boot_1.ST.data.popup_sound = "1" : boot_1.ST.data.popup_sound = "0" : boot_1.CW.alert(L.sound_no_support)
                }
            }
            var Clipboard = require("clipboard"),
                common_1 = require("../lib/common"),
                common_2 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.SettingView = SettingView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "../lib/common": 69,
            clipboard: 11
        }
    ],
    143: [
        function(require, module, exports) {
            "use strict";

            function TaskListView(model) {
                var self = this;
                self.model = model, self.task_num = 0, self.view_limit = TASK_MAX_RESULTS
            }
            var boot_1 = require("../controller/boot");
            exports.TaskListView = TaskListView,
            function() {
                var mytask_check = null;
                TaskListView.prototype = {
                    build: function() {
                        if (this.model.room.id != boot_1.RM.id) return !1;
                        null === mytask_check && (mytask_check = $("#_subRoomMyTaskListShow").show().cwCheckBox({
                            label: L.chatroom_tasklist_mytaskonly,
                            update: function() {
                                boot_1.RM && boot_1.RM.tasklist.build()
                            }
                        }));
                        var buildkey, is_mine = mytask_check.isChecked(),
                            task_list_html = "",
                            task_list = this.model.getTaskList("open"),
                            task_len = task_list.length;
                        if (this.task_num = 0, task_len > 0) {
                            boot_1.TK.sortTaskList(task_list);
                            for (var i = 0; i < task_len; i++) {
                                var task_dat = boot_1.TK.task_id2task_dat[task_list[i]];
                                is_mine && task_dat.aid != boot_1.AC.myid || (this.task_num++, this.task_num <= this.view_limit && (task_list_html += boot_1.TK.view.getTaskPanel(task_dat, {
                                    type: "tasklist"
                                })))
                            }
                            buildkey = task_list_html
                        }
                        "" != task_list_html || boot_1.RS.show_promotion || (task_list_html = '<div class="emptyAdminContent"><img src="./imagenew/common/empty/img_task_empty.png"><p>' + L.task_nothing + "</p></div>", buildkey = "empty"), buildkey != boot_1.CW.last_tasklist_buildkey && (boot_1.CW.last_tasklist_buildkey = buildkey, $C("#_subRoomTaskList").html(task_list_html)), this.task_num > 0 ? (this.view_limit <= this.task_num ? $C("#_roomTaskNum").show().text(L.task_num.replace("%%num%%", this.view_limit.toLocaleString())) : $C("#_roomTaskNum").show().text(" (" + this.task_num.toLocaleString() + ")"), $C("#_roomTaskAll").show()) : ($C("#_roomTaskNum").hide(), $C("#_roomTaskAll").hide()), boot_1.RS.showPromotion()
                    }
                }
            }()
        }, {
            "../controller/boot": 66
        }
    ],
    144: [
        function(require, module, exports) {
            "use strict";

            function TaskView(model) {
                var self = this;
                self.model = model, self.alltask_status = "open", self.alltask_type = "my", self.alltask_filter = "all";
                var sendViewpageInfoToAnalytics = function() {
                    "my" === self.alltask_type && "open" === self.alltask_status ? boot_1.AL.trackEvent("task_list", "open", {
                        label: "my_open_task"
                    }) : "my" === self.alltask_type && "done" === self.alltask_status ? boot_1.AL.trackEvent("task_list", "open", {
                        label: "my_done_task"
                    }) : "assign" === self.alltask_type && "open" === self.alltask_status ? boot_1.AL.trackEvent("task_list", "open", {
                        label: "assign_open_task"
                    }) : "assign" === self.alltask_type && "done" === self.alltask_status && boot_1.AL.trackEvent("task_list", "open", {
                        label: "assign_done_task"
                    })
                };
                self.prepare = function() {
                    $("#_openTaskWindow").click(function() {
                        self.openTaskWindow(), boot_1.AL.trackEvent("task_list", "click", {
                            label: "task_list_navigation"
                        })
                    });
                    var taskedit_assign_tip = null,
                        taskedit_dialog = null;
                    $C("#_wrapper").on("mouseenter", "._moveTask", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this);
                            item.cwMessageTip({
                                message: L.jump_to_addpoint,
                                delay: boot_1.TM.messagetip_delay
                            }).open()
                        }
                    }).on("click", "._moveTask", function() {
                        var task_id = $(this).closest("._taskList").attr("data-task-id"),
                            task_dat = self.model.task_id2task_dat[task_id];
                        boot_1.RL.selectRoom(task_dat.rid, task_dat.cid)
                    }).on("mouseenter", "._editTask", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this);
                            item.cwMessageTip({
                                message: L.task_edit_hint,
                                delay: boot_1.TM.messagetip_delay
                            }).open()
                        }
                    }).on("click", "._editTask", function() {
                        var task_id = $(this).closest("._taskList").attr("data-task-id"),
                            task = $("#_taskEditContent"),
                            task_limit = $("#_taskEditLimit").cwDatePicker(),
                            task_dat = self.model.task_id2task_dat[task_id];
                        return void 0 == task_dat ? (boot_1.CW.alert(L.task_not_found), !1) : (null == taskedit_assign_tip && (task_limit.setOption({
                            dateLabel: $("#_taskEditLimitLabel")
                        }), taskedit_assign_tip = $C("#_taskEditList").cwListTip({
                            search: !0,
                            placeHolder: L.chatroom_search_member,
                            useHtmlLabel: !0,
                            multiSelect: !1,
                            select: function() {
                                this.close()
                            },
                            update: function() {
                                var aid = this.getVal(),
                                    html = '<div class="assignContent assignMember"><span class="_taskAssignMemberLabel assignContentText assignContentTextEdit" data-aid="' + aid + '">' + boot_1.CW.getName(aid) + "</span></div>";
                                $C("#_taskEditIncharge").html(html)
                            }
                        }), $C("#_taskEditIncharge").on("click", "._taskAssignMemberLabel", function() {
                            taskedit_assign_tip.open($(this))
                        }), taskedit_dialog = $("#_taskEditDialog").cwDialog({
                            title: L.task_edit_title,
                            width: 480,
                            height: "auto",
                            buttonLabels: [L.button_save_long, L.button_cancel],
                            buttonSubmit: 0,
                            buttonCancel: 1,
                            buttonClick: function(index) {
                                switch (index) {
                                    case 0:
                                        var error = [],
                                            task_name = task.val();
                                        if (task_name || error.push(L.task_error_empty), error.length) return void boot_1.CW.alert(error.join("\n"));
                                        var task_limit_val = task_limit.getVal();
                                        boot_1.CS.editTask(this.data.task_id, taskedit_assign_tip.getVal(), task_name, task_limit_val), this.close()
                                }
                            },
                            open: function(task_id) {
                                this.data.task_id = task_id
                            }
                        })), taskedit_assign_tip.setOption({
                            list: boot_1.RS.view.getTaskMemberList(task_dat.rid)
                        }).select(task_dat.aid), task.val(task_dat.tn), task_limit.setVal(task_dat.lt ? boot_1.CW.getDate(task_dat.lt, boot_1.ST.data.dateformat) : ""), void taskedit_dialog.open(task_id))
                    }).on("mouseenter", "._deleteTask", function() {
                        if (!$.cwMessageTip.isInit(this)) {
                            var item = $(this);
                            item.cwMessageTip({
                                message: L.task_delete_hint,
                                delay: boot_1.TM.messagetip_delay
                            }).open()
                        }
                    }).on("click", "._deleteTask", function() {
                        var task_id = $(this).closest("._taskList").attr("data-task-id");
                        boot_1.CW.view.confirmDelete(L.task_confirm_delete, function() {
                            self.model.deleteTask(task_id)
                        })
                    }).on("click", "._taskCheck", function() {
                        if (!boot_1.CW.isLogin()) return boot_1.CW.alert(L.error_no_login_action), !1;
                        var button = $(this),
                            status = button.attr("data-task-status");
                        return self.submitTask(button.closest("._taskList"), status), !1
                    })
                }, self.submitTask = function(task_jqObj, status) {
                    var task_checked, task_id = task_jqObj.attr("data-task-id");
                    switch (status) {
                        case "open":
                            task_checked = 0;
                            break;
                        case "done":
                            task_checked = 1;
                            break;
                        default:
                            return
                    }
                    "TR" == task_jqObj[0].tagName ? (task_jqObj.children().fadeOut(500), setTimeout(function() {
                        self.model.checkTask(task_id, task_checked)
                    }, 500)) : task_jqObj.removeClass("subContentShadow").fadeOut(500, function() {
                        self.model.checkTask(task_id, task_checked)
                    })
                };
                var task_window = null,
                    task_window_pager_num = 0,
                    task_window_pager_index = 0,
                    task_window_pager_view_num = boot_1.TM.taskwindow_pager_view_num,
                    task_window_pager = null;
                self.prepareTaskWindow = function() {
                    $("#_taskWindowTabOpen").click(function() {
                        "open" != self.alltask_status && ($("#_taskWindowTabDone").removeClass("floatTabSelect"), $(this).addClass("floatTabSelect"), self.alltask_status = "open", self.buildTaskWindow(), sendViewpageInfoToAnalytics())
                    }), $("#_taskWindowTabDone").click(function() {
                        "done" != self.alltask_status && ($("#_taskWindowTabOpen").removeClass("floatTabSelect"), $(this).addClass("floatTabSelect"), self.alltask_status = "done", self.buildTaskWindow(), sendViewpageInfoToAnalytics())
                    }), $C("#_taskWindowList").on("click", "._taskList", function() {
                        $C("#_taskWindowList").find("._taskList").removeClass("adminDetailSelected");
                        var task = $(this);
                        task.addClass("adminDetailSelected"), self.buildTaskDetail(task.attr("data-task-id")), boot_1.AL.trackEvent("task_list", "open", {
                            label: "task_detail"
                        })
                    }), $("#_taskDetailClose").click(function() {
                        $C("#_taskWindowList").find("._taskList").removeClass("adminDetailSelected"), $C("#_taskDetailArea").attr("data-task-id", "").hide(), $C("#_taskDetailBlankArea").show()
                    });
                    var taskview_list = ["my", "assign"];
                    $("#_taskWindowViewType").cwTabbedBar({
                        descriptionDelay: 0,
                        update: function(idx) {
                            self.alltask_type = taskview_list[idx], self.buildTaskWindow(), sendViewpageInfoToAnalytics()
                        }
                    }), task_window = $("#_taskWindow").cwFloatWindow({
                        width: 920,
                        title: L.menu_mytask
                    }), $C("#_taskDetailTitle").click(function() {
                        var task_id = $C("#_taskDetailArea").attr("data-task-id"),
                            task = $C("#_taskWindowList").find("li._taskList[data-task-id=" + task_id + "]");
                        $C("#_taskWindowBox").scrollTo(task, 600)
                    });
                    var taskfilter_list = ["all", "limitover", "today", "inweek", "nolimit"];
                    $("#_taskWindowFilter").cwTabbedBar({
                        update: function(idx) {
                            self.alltask_filter = taskfilter_list[idx], task_window_pager_num = 0, task_window_pager_index = 0, self.buildTaskWindow()
                        }
                    });
                    var taskpager_list = ["first", "prev", "next", "last"];
                    task_window_pager = $("#_taskWindowPager").cwButtonBar({
                        update: function(idx) {
                            switch (taskpager_list[idx]) {
                                case "first":
                                    task_window_pager_index = 0;
                                    break;
                                case "prev":
                                    task_window_pager_index--, task_window_pager_index < 0 && (task_window_pager_index = 0);
                                    break;
                                case "next":
                                    task_window_pager_index++, task_window_pager_index >= task_window_pager_num && (task_window_pager_index = task_window_pager_num - 1);
                                    break;
                                case "last":
                                    task_window_pager_index = task_window_pager_num - 1
                            }
                            self.buildTaskWindow({
                                resetPager: !1
                            }), $C("#_taskWindowBox").scrollTop(0)
                        }
                    })
                }, self.openTaskWindow = function() {
                    task_window || self.prepareTaskWindow(), task_window.open(), self.buildTaskWindow()
                }, self.enableTaskArea = function() {
                    $C("#_subRoomTaskAddArea").show()
                }, self.disableTaskArea = function() {
                    $C("#_subRoomTaskAddArea").hide()
                }, self.buildByTaskId = function(task_id, tasknum_refresh) {
                    var task_id_list;
                    task_id_list = "object" != typeof task_id ? [task_id] : task_id, void 0 == tasknum_refresh && (tasknum_refresh = !1);
                    var rm_build = !1,
                        allmy_build = !1,
                        rid_flag = {};
                    for (var i in task_id_list) {
                        var task_dat = boot_1.TK.task_id2task_dat[task_id_list[i]];
                        rid_flag[task_dat.rid] = !0, boot_1.RM && boot_1.RM.id == task_dat.rid && (rm_build = !0), task_dat.aid != boot_1.AC.myid && task_dat.bid != boot_1.AC.myid || (allmy_build = !0)
                    }
                    if (tasknum_refresh) {
                        for (var rid in rid_flag) boot_1.RL.rooms[rid].refreshTaskNum();
                        boot_1.RL.build()
                    }
                    rm_build && boot_1.RM.tasklist.build(), allmy_build && self.buildTaskWindow()
                }, self.buildTaskWindow = function(user_option) {
                    if (task_window && task_window.isOpen()) {
                        var option = $.extend({
                            resetPager: !0
                        }, user_option);
                        option.resetPager && (task_window_pager_index = 0);
                        var status = self.alltask_status,
                            type = self.alltask_type,
                            stkey = status + type;
                        if ($C("#_emptyTaskContent").hide(), !self.model.mytask_load_flag.loaded[stkey]) return $C("#_taskWindowList").html('<li class="contentLoading"><img src="./imagenew/all/common/loader/img_loader_gray.gif" />' + L.task_loading + "</li>"), !self.model.mytask_load_flag.loading[stkey] && (self.model.mytask_load_flag.loading[stkey] = !0, boot_1.CW.get("gateway.php", {
                            cmd: "load_my_task",
                            type: type,
                            status: status
                        }, function(json) {
                            if (json.task_dat) {
                                for (var task_id in json.task_dat) json.task_dat[task_id].cid = parseInt(json.task_dat[task_id].cid, 10), self.model.setTask(json.task_dat[task_id]);
                                self.model.mytask_load_flag.loading[stkey] = !1, self.model.mytask_load_flag.loaded[stkey] = common_1.time(), self.buildTaskWindow()
                            }
                        }), !1);
                        var task_list = self.model.getMyTaskList(status, type),
                            filtered_task_list = [];
                        if ("open" == status) {
                            $C("#_taskWindowFilter").show();
                            for (var now = common_1.time(), term_today_start = now, term_today_end = term_today_start + 86400, term_week_end = term_today_start + 604800, num_all = task_list.length, num_limitover = 0, num_limittoday = 0, num_limitweek = 0, num_limitnone = 0, i = num_all; i--;) {
                                var task_id = task_list[i],
                                    task_dat = boot_1.TK.task_id2task_dat[task_list[i]];
                                0 != task_dat.lt && task_dat.lt <= now && (num_limitover++, "limitover" == self.alltask_filter && filtered_task_list.push(task_id)), term_today_start < task_dat.lt && term_today_end > task_dat.lt && (num_limittoday++, "today" == self.alltask_filter && filtered_task_list.push(task_id)), term_today_start < task_dat.lt && term_week_end > task_dat.lt && (num_limitweek++, "inweek" == self.alltask_filter && filtered_task_list.push(task_id)), 0 == task_dat.lt && (num_limitnone++, "nolimit" == self.alltask_filter && filtered_task_list.push(task_id)), "all" == self.alltask_filter && filtered_task_list.push(task_id)
                            }
                            boot_1.RL.mytask_total > 0 ? $C("#_taskWindowNumAll").text(num_all).show() : $C("#_taskWindowNumAll").hide(), num_limitover > 0 ? $C("#_taskWindowNumLimitOver").text(num_limitover).show() : $C("#_taskWindowNumLimitOver").hide(), num_limittoday > 0 ? $C("#_taskWindowNumLimitToday").text(num_limittoday).show() : $C("#_taskWindowNumLimitToday").hide(), num_limitweek > 0 ? $C("#_taskWindowNumLimitWeek").text(num_limitweek).show() : $C("#_taskWindowNumLimitWeek").hide(), num_limitnone > 0 ? $C("#_taskWindowNumLimitNone").text(num_limitnone).show() : $C("#_taskWindowNumLimitNone").hide()
                        } else $C("#_taskWindowFilter").hide(), filtered_task_list = task_list;
                        boot_1.TK.sortTaskList(filtered_task_list);
                        var disp_task_list = [],
                            filtererd_length = filtered_task_list.length;
                        if (task_window_pager_num = parseInt(filtererd_length / task_window_pager_view_num, 10), filtererd_length % task_window_pager_view_num !== 0 && task_window_pager_num++, filtererd_length >= task_window_pager_view_num) {
                            var idx_start = task_window_pager_index * task_window_pager_view_num,
                                idx_end = idx_start + task_window_pager_view_num;
                            idx_end > filtererd_length && (idx_end = filtererd_length);
                            for (var idx = idx_start; idx < idx_end; idx++) disp_task_list.push(filtered_task_list[idx])
                        } else disp_task_list = filtered_task_list;
                        for (var detail_task_id = $C("#_taskDetailArea").attr("data-task-id"), detail_task_is_found = !1, html = "", task_length = disp_task_list.length, i = 0; i < task_length; i++) {
                            var task_dat = boot_1.TK.task_id2task_dat[disp_task_list[i]],
                                room = boot_1.RL.rooms[task_dat.rid];
                            room || (room = {
                                getIcon: function() {
                                    return ""
                                },
                                getName: function() {
                                    return L.chatroom_error_not_found
                                }
                            }), detail_task_id == task_dat.id && (detail_task_is_found = !0), html += self.getTaskPanel(task_dat, {
                                type: "taskwindow"
                            })
                        }
                        $C("#_taskWindowList").html(html), detail_task_is_found || $C("#_taskDetailClose").click(), 0 == task_length && $C("#_emptyTaskContent").show(), task_length ? $C("#_taskWindowPagerIndex").text((task_window_pager_index + 1).toString() + " / " + task_window_pager_num) : $C("#_taskWindowPagerIndex").text(""), task_window_pager.enableButtonAll(), 0 == task_window_pager_index && task_window_pager.disableButton(0).disableButton(1), task_window_pager_num - task_window_pager_index <= 1 && task_window_pager.disableButton(2).disableButton(3), task_window.resize()
                    }
                };
                var task_timeline_span = 30;
                self.buildTaskDetail = function(task_id, loaded) {
                    var task_dat = self.model.task_id2task_dat[task_id];
                    if (task_dat.st == self.alltask_status) {
                        switch (self.alltask_type) {
                            case "my":
                                if (task_dat.aid != boot_1.AC.myid) return;
                                break;
                            case "assign":
                                if (task_dat.bid != boot_1.AC.myid) return
                        }
                        var task_name_text = $C("#_taskWindowList").find('[data-task-id="' + task_id + '"]').find("._taskNameContent").text();
                        $C("#_taskDetailTitle").text(task_name_text), $C("#_taskDetailLimit").html(self.getTaskLimit(task_dat, {
                            withLabel: !1
                        })), $C("#_taskDetailAssign").html(self.getTaskAssign(task_dat, {
                            withName: !0
                        })), $C("#_taskDetailAssignBy").html(self.getTaskAssignBy(task_dat, {
                            withName: !0
                        })), $C("#_taskDetailChatName").html(self.getTaskChatName(task_dat, {
                            withIcon: !0
                        })), $C("#_taskDetailBlankArea").hide();
                        var room, room_id = task_dat.rid,
                            message_id = task_dat.cid,
                            is_timeline_built = !1,
                            html = "";
                        if (boot_1.RL.rooms[room_id]) {
                            room = boot_1.RL.rooms[room_id];
                            var need_load = !1,
                                load_old_only = !1;
                            if (!loaded)
                                if (room.timeline)
                                    if (room.timeline.chat_id2chat_dat[message_id]) {
                                        var i = void 0,
                                            msg_len = void 0;
                                        for (i = 0, msg_len = room.timeline.chat_list.length; i < msg_len; i++) {
                                            var chat_dat = room.timeline.chat_list[i];
                                            if (chat_dat.id == message_id) break
                                        }
                                        task_timeline_span > i && room.timeline.has_old && (need_load = !0, load_old_only = !0)
                                    } else need_load = !0;
                                    else need_load = !0;
                            if (need_load) loaded ? html = "<div>" + L.jump_to_addpoint_not_found + "</div>" : (html = '<div class="timeLineLoading"><img src="./imagenew/all/common/loader/img_loader_white.gif" />' + L.chat_loading + "</div>", load_old_only ? room.timeline.loadOld(function() {
                                self.buildTaskDetail(task_id, !0)
                            }) : room.load({
                                jumpTo: message_id
                            }, function() {
                                room.timeline.loadOld(function() {
                                    self.buildTaskDetail(task_id, !0)
                                })
                            }));
                            else {
                                var target_idx = 0,
                                    i = void 0,
                                    msg_len = void 0;
                                for (i = 0, msg_len = room.timeline.chat_list.length; i < msg_len; i++) {
                                    var chat_dat = room.timeline.chat_list[i];
                                    if (chat_dat.id == message_id) {
                                        target_idx = i;
                                        break
                                    }
                                }
                                if (target_idx) {
                                    var start_idx = 0;
                                    target_idx > task_timeline_span && (start_idx = target_idx - task_timeline_span);
                                    for (var end_idx = target_idx + task_timeline_span, chat_list = [], i_1 = start_idx; i_1 <= end_idx && i_1 < msg_len; i_1++) chat_list.push(room.timeline.chat_list[i_1]);
                                    html = room.timeline.view.getTimeLine(chat_list, {
                                        idPrefix: "taskWindow",
                                        selectId: message_id
                                    }), is_timeline_built = !0
                                } else;
                            }
                        } else html = "<div>" + L.jump_to_addpoint_not_found + "</div>"; if (room.timeline.view.renderTimeLine($C("#_taskDetailTimeLine"), html), $C("#_taskDetailArea").attr("data-task-id", task_id).show(), is_timeline_built) {
                            var target_msg = $("#taskWindow_messageId" + message_id);
                            target_msg.length > 0 && $C("#_taskDetailTimeLine").scrollTo(target_msg, 0)
                        }
                    }
                }, self.getTaskListRows = function() {}, self.getTaskPanel = function(task_dat, option) {
                    var html = "";
                    if ("deleted" != task_dat.st) {
                        var task_class = "_task",
                            date = "";
                        if (self.isMyTask(task_dat) && (task_class += " taskMine"), "done" == task_dat.st && (task_class += " taskComplete"), "tasklist" == option.type) {
                            var task_cmd_button = '<div class="_moveTask button"><span class="icoFontActionMove"></span><span class="icoTextHide">' + L.jump_to_addpoint + "</span></div>";
                            task_dat.aid != boot_1.AC.myid && task_dat.bid != boot_1.AC.myid || (task_cmd_button += '<div class="_editTask button"><span class="icoFontActionEdit"></span><span class="icoTextHide">' + L.task_edit_hint + '</span></div><div class="_deleteTask button"><span class="icoFontActionDelete"></span><span class="icoTextHide">' + L.task_delete_hint + "</span></div>"), html = '<li class="_taskList subContentSection subContentShadow ' + task_class + '" data-task-id="' + task_dat.id + '" data-type="list"><div id="_taskContent" class="subContentAreaInner">' + ('<div class="clearfix"><div class="completeCheckboxArea">' + self.getTaskButton(task_dat) + "</div>" + self.getTaskName(task_dat) + "</div>") + ('<div class="taskMetaArea">' + self.getTaskAssign(task_dat) + self.getTaskLimit(task_dat) + "</div></div>") + ('<div class="btnGroup">' + task_cmd_button + "</div>") + "</li>"
                        } else if ("preview" == option.type) html = '<div class="deleteTask ' + task_class + '">' + self.getTaskName(task_dat) + '<div class="deleteTaskMeta">' + self.getTaskAssign(task_dat) + self.getTaskLimit(task_dat) + "</div></div>";
                        else if ("taskwindow" == option.type) {
                            var task_cmd_button = '<div class="_moveTask button"><span class="icoFontActionMove"></span><span class="icoTextHide">' + L.jump_to_addpoint + "</span></div>";
                            task_dat.aid != boot_1.AC.myid && task_dat.bid != boot_1.AC.myid || (task_cmd_button += '<div class="_editTask button"><span class="icoFontActionEdit"></span><span class="icoTextHide">' + L.task_edit_hint + '</span></div><div class="_deleteTask button"><span class="icoFontActionDelete"></span><span class="icoTextHide">' + L.task_delete_hint + "</span></div>"), html = '<li class="_taskList subContentSection subContentShadow" data-task-id="' + task_dat.id + '"><div class="subContentAreaInner">' + ('<div class="clearfix"><div class="completeCheckboxArea">' + self.getTaskButton(task_dat) + "</div>" + self.getTaskName(task_dat) + "</div>") + ('<div class="taskMetaArea">' + self.getTaskAssign(task_dat) + self.getTaskLimit(task_dat) + "</div>") + "</div>" + ('<div class="btnGroup">' + task_cmd_button + "</div>") + "</li>"
                        } else if ("timeline" == option.type) {
                            task_dat.lt && (date = "<span>" + self.getTaskLimit(task_dat, {
                                icon: !0
                            }) + "</span>");
                            var task_body_class = "";
                            "done" == task_dat.st && (boot_1.RM.timeline.view.task_showmore_flag[option.mid] || (task_class += " _taskCompleteHide", task_body_class += " _taskBody taskBodyHide")), html = '<div class="chatInfoTaskArea ' + task_class + '"><div class="chatInfoTaskMetaArea ' + task_class + '"><div>' + self.getTaskAssign(task_dat) + date + '</div></div><div class="chatInfoTaskContentArea' + task_body_class + '">'
                        }
                    } else html = '<div class="_delete chatInfoTaskArea">' + L.task_deleted + "</div>";
                    return html
                }, self.isMyTask = function(task_dat) {
                    if (task_dat.aid.indexOf && task_dat.aid.indexOf(",") != -1) {
                        task_dat.aid = task_dat.aid.split(",");
                        for (var idx in task_dat.aid)
                            if (task_dat.aid[idx] == boot_1.AC.myid) return !0
                    } else if (task_dat.aid == boot_1.AC.myid) return !0;
                    return !1
                }, self.getTaskName = function(task_dat) {
                    return '<pre class="_taskName taskName"><div class="_taskNameContent">' + boot_1.CW.renderMessage(task_dat.tn) + "</div></pre>"
                };
                var chatname_opton_default = {
                    withIcon: !1
                };
                self.getTaskChatName = function(task_dat, option) {
                    void 0 == option && (option = chatname_opton_default);
                    var icon = "";
                    return option.withIcon && (icon = boot_1.RL.rooms[task_dat.rid].getIcon()), icon + boot_1.CW.getRoomName(task_dat.rid)
                };
                var assign_option_default = {
                    withName: !1
                }, max_assign_show_num = boot_1.TM.timeline_assign_member_show_max;
                self.getTaskAssign = function(task_dat, option) {
                    void 0 == option && (option = assign_option_default);
                    var account_panel = "",
                        more_aid_list = [];
                    if ($.isArray(task_dat.aid)) {
                        boot_1.RM.sortMember(task_dat.aid);
                        for (var i = 0, mem_len = task_dat.aid.length; i < mem_len; i++) {
                            var aid = task_dat.aid[i];
                            i < max_assign_show_num ? account_panel += boot_1.CW.getAvatarPanel(aid, {
                                size: "tiny"
                            }) : more_aid_list.push(aid)
                        }
                    } else account_panel += boot_1.CW.getAvatarPanel(task_dat.aid, {
                        size: "tiny"
                    });
                    return option.withName && (account_panel += boot_1.CW.getName(task_dat.aid)), more_aid_list.length > 0 && (account_panel += '<a class="_showMoreMemberTask showMoreMember" data-aid-list="' + task_dat.aid.join(",") + '">' + L.chatroom_member_rest_number.replace(/%%rest_number%%/, more_aid_list.length) + "</a>"), account_panel
                }, self.getTaskAssignBy = function(task_dat, option) {
                    void 0 == option && (option = assign_option_default);
                    var account_panel = "";
                    if ("object" == typeof task_dat.bid)
                        for (var idx in task_dat.bid) account_panel += boot_1.CW.getAvatarPanel(task_dat.bid[idx], {
                            size: "tiny"
                        });
                    else account_panel += boot_1.CW.getAvatarPanel(task_dat.bid, {
                        size: "tiny",
                        clicktip: !1,
                        hovertip: !1
                    });
                    return option.withName && (account_panel += boot_1.CW.getName(task_dat.bid)), account_panel
                }, self.getTaskLimit = function(task_dat, option) {
                    var html, now = common_1.time(),
                        limit_over = !1,
                        date = "";
                    return option = $.extend(!0, {
                        withLabel: !0
                    }, option), html = '<div class="taskDateLimit">', task_dat.lt && (option.withLabel && (html += L.task_limittip), date = boot_1.CW.getDate(task_dat.lt, boot_1.ST.data.dateformat), "open" == task_dat.st && (task_dat.lt <= now || date == boot_1.CW.getDate(now, boot_1.ST.data.dateformat)) && (limit_over = !0)), limit_over ? html + '<time class="limitedOver">' + date + "</time></div>" : html + "<time>" + date + "</time></div>"
                }, self.getTaskButton = function(task_dat) {
                    return task_dat.aid == boot_1.AC.myid || task_dat.bid == boot_1.AC.myid ? "done" == task_dat.st ? '<div class="_taskCheck button" data-task-id="' + task_dat.id + '" data-task-status="open"><span class="_checkTaskLabel completeText">' + L.button_incomplete + "</span></div>" : '<div class="_taskCheck button btnPrimary" data-task-id="' + task_dat.id + '" data-task-status="done"><span class="_checkTaskLabel completeText">' + L.button_complete + "</span></div>" : ""
                }
            }
            var common_1 = require("../../core/lib/common"),
                boot_1 = require("../controller/boot");
            exports.TaskView = TaskView
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66
        }
    ],
    145: [
        function(require, module, exports) {
            "use strict";

            function TimeLineView(model) {
                var self = this;
                self.model = model, self.task_showmore_flag = {}, self.start_index = 0, self.has_new = !1
            }
            var range = require("lodash.range"),
                boot_1 = require("../controller/boot"),
                common_1 = require("../../core/lib/common");
            exports.TimeLineView = TimeLineView, window.TimeLineView = TimeLineView,
            function() {
                var message_select_id = 0,
                    latest_build_rid = 0,
                    max_view_span = 100,
                    max_view_num = 200,
                    last_aid = 0;
                TimeLineView.prototype = {
                    read: function(before_unread_num) {
                        var unread_num = this.model.room.getUnreadNum();
                        if (0 == unread_num) $C("#_timeLine").find("._unreadMark").fadeOut("slow", function() {
                            $(this).remove()
                        });
                        else {
                            var chat_list_1 = 0 == boot_1.ST.data.show_delmessage ? this.model.getChatListWithoutDeleted() : this.model.getChatList(),
                                max_index = chat_list_1.length - unread_num,
                                min_index = max_index - (before_unread_num - unread_num),
                                read_range = range(min_index, max_index, 1);
                            read_range.map(function(index) {
                                void 0 !== chat_list_1[index] && $("#_messageId" + chat_list_1[index].id + " ._unreadMark").fadeOut("slow", function() {
                                    $(this).remove()
                                })
                            })
                        }
                    },
                    build: function(user_option) {
                        var timeline_obj = $C("#_timeLine"),
                            option = $.extend({
                                smoothScroll: !1,
                                scrollTo: null,
                                everScroll: !1,
                                highlight: !1,
                                jumpToCallback: function() {},
                                sendingId: null
                            }, user_option),
                            scroll_to = option.scrollTo,
                            cend = $("#_messageIdEnd"),
                            cend_top = 0;
                        cend.length > 0 && (cend_top = cend.offset().top);
                        var disabled_send = this.model.room.view.disabled_send,
                            html = "",
                            timeline_build_key = [],
                            t_idx = 0;
                        timeline_build_key[t_idx++] = "d:" + disabled_send + ":", this.model.chat_list.length < this.model.room.chat_num ? (timeline_build_key[t_idx++] = "l:1", html += '<div class="timeLineLoading"><img src="./imagenew/all/common/loader/img_loader_white.gif" />' + L.chat_loading + "</div>", this.model.room.buildtime ? this.model.has_old = !0 : this.model.has_old = !1) : this.model.has_old = !1;
                        var model = this.model,
                            chat_list = [],
                            target_idx = null,
                            start_idx = 0,
                            msg_len = model.chat_list.length;
                        if (latest_build_rid != model.room.id && (this.start_index = 0), scroll_to && "End" != scroll_to)
                            for (var i = 0; i < msg_len; i++) {
                                var chat_dat = model.chat_list[i];
                                if (scroll_to == chat_dat.id) {
                                    target_idx = i, this.start_index = target_idx - max_view_span;
                                    break
                                }
                            }
                        if (latest_build_rid == model.room.id)
                            if (option.everScroll) {
                                var tl_top = $C("#_timeLine").offset().top,
                                    temp_idx_except_deletemessage = [];
                                if (!target_idx)
                                    for (var i = 0; i < msg_len; i++) {
                                        var chat_dat_1 = model.chat_list[i];
                                        "[deleted]" !== chat_dat_1.msg && (temp_idx_except_deletemessage.push(i), max_view_span < temp_idx_except_deletemessage.length && temp_idx_except_deletemessage.shift());
                                        var chat_obj = $("#_messageId" + chat_dat_1.id);
                                        if (chat_obj.length && tl_top < chat_obj.offset().top) {
                                            if (!model.has_new_message && !scroll_to) {
                                                if (!model.has_old && 0 == i) return !1;
                                                scroll_to = chat_dat_1.id
                                            }
                                            target_idx = i;
                                            break
                                        }
                                    }
                                start_idx = "number" == typeof temp_idx_except_deletemessage[0] ? temp_idx_except_deletemessage[0] : target_idx - max_view_span
                            } else start_idx = this.start_index;
                            else start_idx = null !== target_idx ? target_idx - max_view_span : msg_len - 2 * max_view_span;
                        start_idx < 0 && (start_idx = 0);
                        for (var num = 0, i = start_idx; i < msg_len && (0 == boot_1.ST.data.show_delmessage && "[deleted]" == model.chat_list[i].msg || (model.chat_list[i] && (chat_list.push(model.chat_list[i]), num++), !(num >= max_view_num))); i++);
                        this.start_index = start_idx;
                        var chat_len = chat_list.length;
                        chat_len > max_view_span && chat_list[chat_list.length - 1].id != model.chat_list[msg_len - 1].id ? ("End" == scroll_to && (scroll_to = !1), this.has_new = !0) : this.has_new = !1;
                        var sending_chat_list = model.sending_chat_list;
                        if (sending_chat_list.length)
                            for (var i = 0; i < sending_chat_list.length; i++) {
                                var chat_dat_2 = sending_chat_list[i];
                                chat_dat_2 && chat_list.push(chat_dat_2)
                            }
                        var chat_list_for_view = 0 == boot_1.ST.data.show_delmessage ? this.model.getChatListWithoutDeleted() : this.model.getChatList(),
                            chat_list_length = chat_list_for_view.length,
                            unread_num = this.model.room.getUnreadNum(),
                            last_read_message_id = 0,
                            last_read_message_index = chat_list_length - unread_num - 1,
                            last_read_message = chat_list_for_view[last_read_message_index];
                        last_read_message && (last_read_message_id = last_read_message.id), html += this.getTimeLine(chat_list, {
                            lastReadMessageId: last_read_message_id,
                            unreadFrom: chat_list_length - unread_num,
                            readLock: model.room.read_lock,
                            editId: boot_1.CS.chatedit_id,
                            selectId: message_select_id
                        }), html += '<div id="_messageIdEnd" class="actionBarSpacer"></div>';
                        var scroll_time = 0;
                        option.smoothScroll && (scroll_time = option.sendingId ? 70 : 200);
                        var scroll_move = !1,
                            buildkey = html;
                        if (boot_1.CW.last_timeline_buildkey != buildkey) {
                            if (this.renderTimeLine(timeline_obj, html), latest_build_rid != model.room.id && (latest_build_rid = model.room.id, message_select_id = 0), model.has_new_message = !1, option.sendingId && $C("#_timeLine").find("._sendingMessage img:last").hide().fadeIn(3e3), boot_1.CW.last_timeline_buildkey = buildkey, scroll_to || cend_top < $C("#_chatSendArea").offset().top + 50 && (scroll_to = "End"), (this.model.room.rswitch || scroll_to) && scroll_to) {
                                var self_1 = this,
                                    obj_1 = $("#_messageId" + scroll_to);
                                obj_1.length && (option.highlight && (message_select_id = scroll_to), scroll_move = !0, function() {
                                    var exec_scroll = !1,
                                        scroll_handler = function() {
                                            exec_scroll = !0
                                        }, _timeLine = $C("#_timeLine");
                                    _timeLine.one("scroll", scroll_handler).scrollTo(obj_1, scroll_time, function() {
                                        option.highlight && self_1.highlight(obj_1), option.jumpToCallback()
                                    }), setTimeout(function() {
                                        exec_scroll || (_timeLine.unbind("scroll", scroll_handler), _timeLine.trigger("scroll"))
                                    }, 0)
                                }())
                            }
                            boot_1.AC.hasUnknown() && boot_1.AC.getUnknown(function(account_dat) {
                                for (var account_id in account_dat) $("._nameAid" + account_id).text(account_dat[account_id].name)
                            })
                        } else if (scroll_to) {
                            var self_2 = this,
                                obj_2 = $("#_messageId" + scroll_to);
                            obj_2.length && (scroll_move = !0, $C("#_timeLine").scrollTo(obj_2, scroll_time, function() {
                                option.highlight && self_2.highlight(obj_2), option.jumpToCallback()
                            }))
                        }
                        model.has_old && !scroll_move && setTimeout(function() {
                            $C("#_timeLine").trigger("scroll")
                        }, 100)
                    },
                    getTimeLine: function(chat_list, user_option) {
                        for (var option = $.extend({
                            lastReadMessageId: !1,
                            unreadFrom: !1,
                            readLock: !1,
                            editId: !1,
                            selectId: !1,
                            idPrefix: ""
                        }, user_option), html = "", before_date = "", i = 0, chat_len = chat_list.length; i < chat_len; i++) {
                            var moption = {
                                idPrefix: option.idPrefix
                            }, chat_dat = chat_list[i];
                            if (0 != boot_1.ST.data.show_delmessage || "[deleted]" != chat_dat.msg) {
                                var chat_dat_date = boot_1.CW.getDate(chat_dat.tm, boot_1.ST.data.dateformat);
                                before_date != chat_dat_date && (before_date = chat_dat_date, last_aid = 0, moption.topView = !0, html += '<div class="dateHead"><div class="dateContent"><span class="icoFontClock"></span><span class="dateText">' + chat_dat_date + "</span></div></div>"), last_aid == chat_dat.aid ? moption.showSender = !1 : last_aid = chat_dat.aid, option.lastReadMessageId !== !1 && chat_dat.id > option.lastReadMessageId && (moption.showUnreadMark = !0), option.readLock && (moption.readLock = !0), option.editId && option.editId == chat_dat.id && (moption.editView = !0), option.selectId || (option.selectId = message_select_id), option.selectId && option.selectId == chat_dat.id && (moption.selectView = !0), html += this.getMessagePanel(chat_dat, moption)
                            } else html += '<div id="_messageId' + chat_dat.id + '"></div>'
                        }
                        return html
                    },
                    renderTimeLine: function(timeline_obj, html) {
                        timeline_obj.html(html).find("._taskCompleteHide").each(function() {
                            var task_box = $(this),
                                task_body = task_box.find("._taskBody");
                            task_body.height() >= 38 && task_box.append('<p class="_showMore showMore showMoreComplete">' + L.read_more + "</p>")
                        })
                    },
                    getMessagePanel: function(chat_dat, user_option) {
                        var option = $.extend({
                            showSender: !0,
                            topView: !1,
                            showUnreadMark: !1,
                            readLock: !1,
                            editView: !1,
                            selectView: !1,
                            idPrefix: ""
                        }, user_option),
                            avatar = "",
                            name = "",
                            org_name_html = "",
                            chat_class = "_message chatTimeLineMessage chatTimeLineMessageAnim clearfix",
                            chat_attr = "";
                        option.showSender && (avatar = '<div class="_speaker avatarSpeaker">' + boot_1.CW.getAvatarPanel(chat_dat.aid, {
                            size: "medium"
                        }) + "</div>", name = boot_1.CW.getName(chat_dat.aid), org_name_html = '<p class="chatNameOrgname">' + boot_1.CW.getOrgName(chat_dat.aid) + "</p>", option.topView || (chat_class += " chatTimeLineBorder"));
                        var read_stat = "";
                        option.showUnreadMark && (read_stat = chat_dat.sid ? '<span class="_sendingMessage"><img src="./imagenew/all/common/loader/img_loader_white.gif" ald="Loading"/></span>' : option.readLock ? '<span class="_unreadMark unreadTimeLine unreadTimeLineLock"></span>' : '<span class="_unreadMark unreadTimeLine"></span>');
                        var message = "";
                        chat_dat.aid == boot_1.AC.myid && (chat_class += " chatTimeLineMessageMine");
                        var is_deleted = 0;
                        "[deleted]" == chat_dat.msg ? (is_deleted = 1, message = '<div class="_delete messegeDelete">' + L.chat_deleted + "</div>") : "[deleted_by_admin]" == chat_dat.msg ? (is_deleted = 1, message = '<div class="_delete messegeDelete">' + L.chat_deleted_by_admin + "</div>") : message = boot_1.CW.renderMessage(chat_dat.msg, {
                            mid: chat_dat.id
                        }), is_deleted && (chat_attr += ' data-deleted="1"');
                        var message_date = boot_1.CW.getDate(chat_dat.tm, "H:i");
                        if (option.showSender) {
                            var dateFormat = common_1.is_this_year(chat_dat.tm) ? boot_1.ST.data.dateformat_short : boot_1.ST.data.dateformat;
                            message_date = boot_1.CW.getDate(chat_dat.tm, dateFormat + " H:i")
                        }
                        var dlabel = message_date;
                        chat_dat.utm > 0 && (dlabel += ' <span class="icoFontActionEdit icoSizeSmall"></span>'), chat_dat.mn && (chat_class += " chatTimeLineMessageMention");
                        var edit_label = "";
                        option.editView && (chat_class += " chatTimeLineMessageEdit", edit_label = '<div class="chatTimeLineMessageEditText">' + L.chat_editing_label_on_message + '<span class="_editCancel closeAction icoFontCancel massageEditCancel"></span></div>');
                        var move_label = "";
                        option.selectView && (chat_class += " _messageSelected chatTimeLineMessageMove", move_label = '<span class="icoFontMessegeMoveArrow icoSizeLarge"></span><span class="icoTextHide">移動したチャット</span>');
                        var room_id = 0;
                        chat_dat.rid ? room_id = chat_dat.rid : this.model && (room_id = this.model.room.id);
                        var timestamp_data = ' data-deleted="' + is_deleted + '" data-tm="' + chat_dat.tm + '"';
                        return chat_dat.utm && (timestamp_data += ' data-utm="' + chat_dat.utm + '"'), '<div id="' + option.idPrefix + "_messageId" + chat_dat.id + '" data-rid="' + room_id + '" data-mid="' + chat_dat.id + '" class="' + chat_class + '"' + chat_attr + ">" + ('<div class="_chatTimeLineMessageBox chatTimeLineMessageInner">' + avatar + '<div class="chatTimeLineMessageArea clearfix">') + ('<div class="chatTimeLineItemHeader autotrim"><p class="_speakerName chatName">' + name + "</p>" + org_name_html + "</div>") + ("<pre>" + message + "</pre></div>") + ('<div class="_timeStamp timeStamp"' + timestamp_data + ">" + read_stat + dlabel + "</div>" + edit_label + '</div><div class="_moveArrow chatTimeLineMoveArrow selected">' + move_label + "</div></div>")
                    },
                    highlight: function(message_jqObj) {
                        return this.clearHighlightAll(), message_jqObj.addClass("chatTimeLineMessageMove _messageSelected").find("._moveArrow").html('<span class="icoFontMessegeMoveArrow icoSizeLarge"></span><span class="icoTextHide">移動したチャット</span>'), this
                    },
                    clearHighlight: function(message_jqObj) {
                        return message_jqObj.removeClass("chatTimeLineMessageMove _messageSelected").find("._moveArrow").quickEmpty(), this
                    },
                    clearHighlightAll: function() {
                        return $C("#_timeLine").find("._messageSelected").removeClass("chatTimeLineMessageMove _messageSelected").find("._moveArrow").quickEmpty(), this
                    }
                }
            }()
        }, {
            "../../core/lib/common": 50,
            "../controller/boot": 66,
            "lodash.range": 40
        }
    ],
    146: [
        function(require, module, exports) {
            "use strict";

            function TutorialView(use_bob_phase1) {
                var self = this,
                    is_bob_phase1 = use_bob_phase1 || "ja" === LANGUAGE,
                    step_index = 0,
                    tutorial_scenario = [],
                    addButton = $("#_addButton"),
                    headerSearch = $("#_headerSearch"),
                    subRoomTaskAddArea = $("#_subRoomTaskAddArea"),
                    chatSendToolbar = $("#_chatSendToolbar"),
                    chatTextArea = $("#_chatTextArea"),
                    step_header = $("#_tutorialHeader"),
                    step_message = $("#_tutorialMessage"),
                    next_button = $("#_tutorialNextButton"),
                    openContact = $("#_openContactWindow"),
                    step_tip = $("#_tutorialStep").cwToolTip({
                        useFloatBox: !1
                    }),
                    zindex_avoid = {
                        "#_content": "",
                        "#_globalHeader": "",
                        "#_subContent": "",
                        "#_mainContent": "",
                        "#_chatContent": "",
                        "#_addButton": "",
                        "#_headerSearch": "",
                        "#_subRoomTaskAddArea": "",
                        "#_chatSendToolbar": "",
                        "#_chatSendArea": "",
                        "#_sideContent": ""
                    };
                self.handleStart = function() {
                    tutorial_scenario = is_bob_phase1 ? self.bobPhose1Scenario() : self.defaultScenario(), $('<script src="//fast.wistia.com/assets/external/E-v1.js" async></script>').appendTo("body"), prepareZindex(), prepareShowMovieButton(), prepareNextButton(), prepareStepIndicator(), $("#_expose").fadeIn("slow", function() {
                        self.play()
                    })
                }, self.handleNextStep = function() {
                    self.getCurrentStep().finish(), step_index++, self.play(), boot_1.AL.trackEvent("onboarding", "click", {
                        label: "onboarding_t" + step_index + "_2"
                    })
                }, self.handleFinish = function() {
                    self.getCurrentStep().finish(), step_tip.close(), subRoomTaskAddArea.css("z-index", "auto"), resumeZindex(), $("#_expose").fadeOut("slow"), boot_1.AL.trackEvent("onboarding", "click", {
                        label: "onboarding_t4_2"
                    })
                }, self.defaultScenario = function() {
                    return [room_create_step, search_step, message_input_step, task_step]
                }, self.bobPhose1Scenario = function() {
                    return [room_create_step, message_input_step, task_step, contact_step]
                }, self.play = function() {
                    var step = self.getCurrentStep();
                    step.start(), $(".tutorialStepIndicator .circle").removeClass("active"), $(".tutorialStepIndicator .circle").eq(step_index).addClass("active");
                    var is_last_step = tutorial_scenario.length === step_index + 1;
                    is_last_step && (is_bob_phase1 ? (next_button.find(".label").text("使いはじめる"), next_button.off("click"), next_button.on("click", self.handleFinish)) : next_button.cwButton().setOption({
                        type: "success",
                        text: L.button_complete,
                        click: self.handleFinish
                    }))
                }, self.getCurrentStep = function() {
                    return tutorial_scenario[step_index]
                };
                var prepareNextButton = function() {
                    is_bob_phase1 ? next_button.on("click", self.handleNextStep) : next_button.cwButton({
                        type: "primary",
                        click: self.handleNextStep
                    })
                }, prepareZindex = function() {
                        for (var id in zindex_avoid) {
                            var area = $C(id);
                            zindex_avoid[id] = area.css("z-index"), area.css("z-index", "auto")
                        }
                    }, resumeZindex = function() {
                        for (var id in zindex_avoid) $C(id).css("z-index", zindex_avoid[id])
                    }, prepareShowMovieButton = function() {
                        var show_movie = function() {
                            var i = step_index + 1;
                            boot_1.AL.trackEvent("onboarding", "click", {
                                label: "onboarding_t" + i + "_1"
                            });
                            var step = self.getCurrentStep();
                            $(step.video_id).children().click()
                        }, show_movie_button = $("#_tutorialShowMovieButton");
                        show_movie_button.length > 0 && show_movie_button.cwButton({
                            type: "primary",
                            click: show_movie
                        })
                    }, prepareStepIndicator = function() {
                        $(".tutorialStepIndicator").html("").append(tutorial_scenario.map(function() {
                            return $("<span>").addClass("circle")
                        }))
                    }, room_create_step = {
                        video_id: "#tutorialMovieChat",
                        start: function() {
                            addButton.css("z-index", boot_1.TM.expose_zindex), step_header.text("グループチャットの作成はここからできます"), step_message.text(L.tutorial_addbutton), step_tip.isOpen() || step_tip.open(addButton)
                        },
                        finish: function() {
                            addButton.css("z-index", "auto")
                        }
                    }, search_step = {
                        start: function() {
                            headerSearch.css("z-index", boot_1.TM.expose_zindex), step_message.text(L.tutorial_globalsearch), step_tip.move(headerSearch)
                        },
                        finish: function() {
                            headerSearch.css("z-index", "auto")
                        }
                    }, message_input_step = {
                        video_id: "#tutorialMovieMessage",
                        start: function() {
                            boot_1.CS.view.expandChatArea(!0), chatSendToolbar.css("z-index", boot_1.TM.expose_zindex), chatTextArea.css("z-index", boot_1.TM.expose_zindex), step_header.text("メッセージの送信はここからできます"), step_message.text(L.tutorial_send_message), step_tip.move(chatSendToolbar)
                        },
                        finish: function() {
                            chatSendToolbar.css("z-index", "auto"), chatTextArea.css("z-index", "auto")
                        }
                    }, task_step = {
                        video_id: "#tutorialMovieTask",
                        start: function() {
                            subRoomTaskAddArea.css("z-index", boot_1.TM.expose_zindex), step_header.text("タスクの作成はここからできます"), step_message.text(L.tutorial_add_task), step_tip.move(subRoomTaskAddArea)
                        },
                        finish: function() {
                            subRoomTaskAddArea.css("z-index", "auto")
                        }
                    }, contact_step = {
                        video_id: "#tutorialMovieContact",
                        start: function() {
                            openContact.css("z-index", boot_1.TM.expose_zindex), step_header.text("ここからコンタクトを追加できます"), step_message.text("知り合い・取引先のメールアドレスで招待してみてください。チャットワークを利用中の方にはコンタクト申請、未利用の方には新規ユーザーとして招待することができます。"), step_tip.move(openContact)
                        },
                        finish: function() {
                            openContact.css("z-index", "auto")
                        }
                    }
            }
            var boot_1 = require("../controller/boot");
            exports.TutorialView = TutorialView
        }, {
            "../controller/boot": 66
        }
    ]
}, {}, [65]);